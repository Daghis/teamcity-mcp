name: CI

on:
  push:
    branches:
      - main
      - 'release-please--*'
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  checks: write

jobs:
  lint:
    name: Lint (no fix)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - run: npm ci
      - run: npm run lint:check

  format:
    name: Format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - run: npm ci
      - run: npm run format:check

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - run: npm ci
      - run: npm run typecheck

  tests:
    name: Tests with coverage (unit) â€“ shard ${{ matrix.shard }}/4
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - run: npm ci
      - name: Run tests with coverage (unit-only + JUnit)
        env:
          JEST_JUNIT_OUTPUT: ./coverage/junit-${{ matrix.shard }}.xml
          JEST_JUNIT_CLASSNAME: "{filepath}"
        run: npm run test:coverage:ci -- --reporters=default --reporters=jest-junit --shard=${{ matrix.shard }}/4 --passWithNoTests
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/junit-${{ matrix.shard }}.xml
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-shard-${{ matrix.shard }}
          path: coverage/
          if-no-files-found: ignore

  coverage:
    name: Coverage upload (merged)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Merge LCOV files
        run: |
          set -euo pipefail
          mkdir -p coverage-merged
          LCOVS=$(find artifacts -type f -name 'lcov.info' | sort)
          if [ -z "$LCOVS" ]; then
            echo "No lcov.info files found" >&2
            exit 1
          fi
          cat $LCOVS > coverage-merged/lcov.info
          echo "Merged $(echo "$LCOVS" | wc -l | tr -d ' ') lcov files into coverage-merged/lcov.info"
      - name: Upload merged coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage-merged/lcov.info
          flags: unittests
          name: codecov-coverage-merged
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      - name: Collect bundle analyses (if any)
        run: |
          mkdir -p coverage-merged/bundles
          find artifacts -type f -path '*/coverage/bundles/*.json' -exec cp {} coverage-merged/bundles/ \; || true
          ls -la coverage-merged/bundles || true
      - name: Upload bundle analysis to Codecov
        if: ${{ hashFiles('coverage-merged/bundles/*.json') != '' }}
        uses: codecov/codecov-action@v4
        with:
          plugin: javascript-bundle
          files: coverage-merged/bundles/*.json
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  aggregate:
    name: Lint, Typecheck, Test (Node 20)
    runs-on: ubuntu-latest
    needs: [lint, format, typecheck, tests, coverage]
    if: always()
    steps:
      - name: Evaluate job results
        run: |
          echo "lint: ${{ needs.lint.result }}"
          echo "format: ${{ needs.format.result }}"
          echo "typecheck: ${{ needs.typecheck.result }}"
          echo "tests: ${{ needs.tests.result }}"
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.format.result }}" != "success" ] || \
             [ "${{ needs.typecheck.result }}" != "success" ] || \
             [ "${{ needs.tests.result }}" != "success" ]; then
            echo "One or more jobs failed";
            exit 1;
          fi

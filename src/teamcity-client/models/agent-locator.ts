/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Represents a locator string for filtering Agent entities.
 * @export
 * @interface AgentLocator
 */
export interface AgentLocator {
  /**
   * Agent name.
   * @type {string}
   * @memberof AgentLocator
   */
  $singleValue?: string;
  /**
   * Is the agent authorized.
   * @type {string}
   * @memberof AgentLocator
   */
  authorized?: AgentLocatorAuthorizedEnum;
  /**
   * Build locator which run on this agent (or is compatible with for queued builds).
   * @type {string}
   * @memberof AgentLocator
   */
  build?: string;
  /**
   * Compatible build types locator.
   * @type {string}
   * @memberof AgentLocator
   */
  compatible?: string;
  /**
   * Is the agent connected.
   * @type {string}
   * @memberof AgentLocator
   */
  connected?: AgentLocatorConnectedEnum;
  /**
   * For paginated calls, how many entities to return per page.
   * @type {number}
   * @memberof AgentLocator
   */
  count?: number;
  /**
   * Is the agent enabled.
   * @type {string}
   * @memberof AgentLocator
   */
  enabled?: AgentLocatorEnabledEnum;
  /**
   * Agent id.
   * @type {number}
   * @memberof AgentLocator
   */
  id?: number;
  /**
   * Agent ip address
   * @type {string}
   * @memberof AgentLocator
   */
  ip?: string;
  /**
   * Agent name.
   * @type {string}
   * @memberof AgentLocator
   */
  name?: string;
  /**
   * Matching parameter.
   * @type {string}
   * @memberof AgentLocator
   */
  parameter?: string;
  /**
   * Agent pool locator.
   * @type {string}
   * @memberof AgentLocator
   */
  pool?: string;
  /**
   * For paginated calls, from which entity to start rendering the page.
   * @type {number}
   * @memberof AgentLocator
   */
  start?: number;
}

export const AgentLocatorAuthorizedEnum = {
  True: 'true',
  False: 'false',
  Any: 'any',
} as const;

export type AgentLocatorAuthorizedEnum =
  (typeof AgentLocatorAuthorizedEnum)[keyof typeof AgentLocatorAuthorizedEnum];
export const AgentLocatorConnectedEnum = {
  True: 'true',
  False: 'false',
  Any: 'any',
} as const;

export type AgentLocatorConnectedEnum =
  (typeof AgentLocatorConnectedEnum)[keyof typeof AgentLocatorConnectedEnum];
export const AgentLocatorEnabledEnum = {
  True: 'true',
  False: 'false',
  Any: 'any',
} as const;

export type AgentLocatorEnabledEnum =
  (typeof AgentLocatorEnabledEnum)[keyof typeof AgentLocatorEnabledEnum];

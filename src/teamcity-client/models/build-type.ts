/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
// May contain unused imports in some cases
// @ts-ignore
import type { AgentRequirements } from './agent-requirements';
// May contain unused imports in some cases
// @ts-ignore
import type { Agents } from './agents';
// May contain unused imports in some cases
// @ts-ignore
import type { ArtifactDependencies } from './artifact-dependencies';
// May contain unused imports in some cases
// @ts-ignore
import type { Branches } from './branches';
// May contain unused imports in some cases
// @ts-ignore
import type { BuildTypes } from './build-types';
// May contain unused imports in some cases
// @ts-ignore
import type { Builds } from './builds';
// May contain unused imports in some cases
// @ts-ignore
import type { CloudImages } from './cloud-images';
// May contain unused imports in some cases
// @ts-ignore
import type { Comment } from './comment';
// May contain unused imports in some cases
// @ts-ignore
import type { Features } from './features';
// May contain unused imports in some cases
// @ts-ignore
import type { Investigations } from './investigations';
// May contain unused imports in some cases
// @ts-ignore
import type { Links } from './links';
// May contain unused imports in some cases
// @ts-ignore
import type { Project } from './project';
// May contain unused imports in some cases
// @ts-ignore
import type { Properties } from './properties';
// May contain unused imports in some cases
// @ts-ignore
import type { SnapshotDependencies } from './snapshot-dependencies';
// May contain unused imports in some cases
// @ts-ignore
import type { Steps } from './steps';
// May contain unused imports in some cases
// @ts-ignore
import type { Triggers } from './triggers';
// May contain unused imports in some cases
// @ts-ignore
import type { VcsRootEntries } from './vcs-root-entries';
// May contain unused imports in some cases
// @ts-ignore
import type { VcsRootInstances } from './vcs-root-instances';

/**
 * A build configuration owned by a TeamCity project, or a template created from this configuration. Spawns builds to execute configured build steps.
 * @export
 * @interface BuildType
 */
export interface BuildType {
  /**
   * The build configuration ID. Typically consists of a trunkated project and configuration names in the ProjectName_ConfigurationName format.
   * @type {string}
   * @memberof BuildType
   */
  id?: string;
  /**
   * The automatically generated build configuration ID. This is the internal property and is not intented to be used.
   * @type {string}
   * @memberof BuildType
   */
  internalId?: string;
  /**
   * The public build configuration name displayed in TeamCity UI.
   * @type {string}
   * @memberof BuildType
   */
  name?: string;
  /**
   * Returns *true* if the current BuildType entity is a build configuration template; *false* if this is a regular build configuration. Inspect the `templates` field to view all templates attached to the target configuration.
   * @type {boolean}
   * @memberof BuildType
   */
  templateFlag?: boolean;
  /**
   * The build configuration type:  * *regular* — a regular build configuration. * *composite* — a composite configuration that aggregates results of multiple upstream build chain configurations. * *deployment* — a deployment build configuration.  See [Changing build configuration type](https://www.jetbrains.com/help/teamcity/changing-build-configuration-type.html) for more information.
   * @type {string}
   * @memberof BuildType
   */
  type?: BuildTypeTypeEnum;
  /**
   * Returns *true* if a configuration is paused and cannot start new builds automatically upon build trigger requests; otherwise, *false*. To pause or unpause a configuration, use the configuration\'s Actions menu in TeamCity UI or send a `PUT` request with the required Boolean value to the `/app/rest/buildTypes/_build_type_locator_/paused` endpoint.
   * @type {boolean}
   * @memberof BuildType
   */
  paused?: boolean;
  /**
   * An internally used universally unique identifier.
   * @type {string}
   * @memberof BuildType
   */
  uuid?: string;
  /**
   * The custom build configuration description, or *null* if not set.
   * @type {string}
   * @memberof BuildType
   */
  description?: string;
  /**
   * The public name of a parent TeamCity project.
   * @type {string}
   * @memberof BuildType
   */
  projectName?: string;
  /**
   * The ID of a parent TeamCity project that owns this build configuration.
   * @type {string}
   * @memberof BuildType
   */
  projectId?: string;
  /**
   * The automatically generated ID of a parent project. This is the internal property and is not intented to be used.
   * @type {string}
   * @memberof BuildType
   */
  projectInternalId?: string;
  /**
   * The short link (without the address of a TeamCity server) to this build configuration.
   * @type {string}
   * @memberof BuildType
   */
  href?: string;
  /**
   * The regular URL for this build configuration or template.
   * @type {string}
   * @memberof BuildType
   */
  webUrl?: string;
  /**
   * Returns *null* for build configurations, *true* for configuration templates inherited from other templates, and *false* for regular templates extracted from build configurations. You can only create templates inherited from other base templates in Kotlin.
   * @type {boolean}
   * @memberof BuildType
   */
  inherited?: boolean;
  /**
   *
   * @type {Links}
   * @memberof BuildType
   */
  links?: Links;
  /**
   *
   * @type {Project}
   * @memberof BuildType
   */
  project?: Project;
  /**
   *
   * @type {BuildTypes}
   * @memberof BuildType
   */
  templates?: BuildTypes;
  /**
   *
   * @type {BuildType}
   * @memberof BuildType
   */
  template?: BuildType;
  /**
   *
   * @type {VcsRootEntries}
   * @memberof BuildType
   */
  'vcs-root-entries'?: VcsRootEntries;
  /**
   *
   * @type {Properties}
   * @memberof BuildType
   */
  settings?: Properties;
  /**
   *
   * @type {Properties}
   * @memberof BuildType
   */
  parameters?: Properties;
  /**
   *
   * @type {Properties}
   * @memberof BuildType
   */
  'output-parameters'?: Properties;
  /**
   *
   * @type {Steps}
   * @memberof BuildType
   */
  steps?: Steps;
  /**
   *
   * @type {Features}
   * @memberof BuildType
   */
  features?: Features;
  /**
   *
   * @type {Triggers}
   * @memberof BuildType
   */
  triggers?: Triggers;
  /**
   *
   * @type {SnapshotDependencies}
   * @memberof BuildType
   */
  'snapshot-dependencies'?: SnapshotDependencies;
  /**
   *
   * @type {ArtifactDependencies}
   * @memberof BuildType
   */
  'artifact-dependencies'?: ArtifactDependencies;
  /**
   *
   * @type {AgentRequirements}
   * @memberof BuildType
   */
  'agent-requirements'?: AgentRequirements;
  /**
   *
   * @type {Branches}
   * @memberof BuildType
   */
  branches?: Branches;
  /**
   *
   * @type {Builds}
   * @memberof BuildType
   */
  builds?: Builds;
  /**
   *
   * @type {Investigations}
   * @memberof BuildType
   */
  investigations?: Investigations;
  /**
   *
   * @type {Agents}
   * @memberof BuildType
   */
  compatibleAgents?: Agents;
  /**
   *
   * @type {CloudImages}
   * @memberof BuildType
   */
  compatibleCloudImages?: CloudImages;
  /**
   *
   * @type {VcsRootInstances}
   * @memberof BuildType
   */
  vcsRootInstances?: VcsRootInstances;
  /**
   * This is the internal property and is not intented to be used.
   * @type {boolean}
   * @memberof BuildType
   */
  externalStatusAllowed?: boolean;
  /**
   *
   * @type {Comment}
   * @memberof BuildType
   */
  pauseComment?: Comment;
  /**
   *
   * @type {string}
   * @memberof BuildType
   */
  locator?: string;
}

export const BuildTypeTypeEnum = {
  Regular: 'regular',
  Composite: 'composite',
  Deployment: 'deployment',
} as const;

export type BuildTypeTypeEnum = (typeof BuildTypeTypeEnum)[keyof typeof BuildTypeTypeEnum];

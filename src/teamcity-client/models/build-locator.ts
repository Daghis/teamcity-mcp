/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Represents a locator string for filtering Build entities.
 * @export
 * @interface BuildLocator
 */
export interface BuildLocator {
  /**
   * Project (direct or indirect parent) locator.
   * @type {string}
   * @memberof BuildLocator
   */
  affectedProject?: string;
  /**
   * Agent locator.
   * @type {string}
   * @memberof BuildLocator
   */
  agent?: string;
  /**
   * typeId of agent used to execute build.
   * @type {number}
   * @memberof BuildLocator
   */
  agentTypeId?: number;
  /**
   * State can be any.
   * @type {boolean}
   * @memberof BuildLocator
   */
  any?: boolean;
  /**
   *
   * @type {string}
   * @memberof BuildLocator
   */
  artifactDependency?: string;
  /**
   * Branch locator.
   * @type {string}
   * @memberof BuildLocator
   */
  branch?: string;
  /**
   * Build type locator.
   * @type {string}
   * @memberof BuildLocator
   */
  buildType?: string;
  /**
   * Is canceled.
   * @type {boolean}
   * @memberof BuildLocator
   */
  canceled?: boolean;
  /**
   * Agent locator.
   * @type {string}
   * @memberof BuildLocator
   */
  compatibleAgent?: string;
  /**
   * Is composite.
   * @type {boolean}
   * @memberof BuildLocator
   */
  composite?: boolean;
  /**
   * For paginated calls, how many entities to return per page.
   * @type {number}
   * @memberof BuildLocator
   */
  count?: number;
  /**
   * If true, applies default filter which returns only \"normal\" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations)).
   * @type {boolean}
   * @memberof BuildLocator
   */
  defaultFilter?: boolean;
  /**
   * Is failed to start.
   * @type {boolean}
   * @memberof BuildLocator
   */
  failedToStart?: boolean;
  /**
   * Requires either date or build dimension.
   * @type {string}
   * @memberof BuildLocator
   */
  finishDate?: string;
  /**
   * Is finished.
   * @type {boolean}
   * @memberof BuildLocator
   */
  finished?: boolean;
  /**
   * Is hanging.
   * @type {boolean}
   * @memberof BuildLocator
   */
  hanging?: boolean;
  /**
   * Is history build.
   * @type {boolean}
   * @memberof BuildLocator
   */
  history?: boolean;
  /**
   * Entity ID.
   * @type {string}
   * @memberof BuildLocator
   */
  id?: string;
  /**
   * Supply multiple locators and return a union of the results.
   * @type {string}
   * @memberof BuildLocator
   */
  item?: string;
  /**
   * Limit processing to the latest `<lookupLimit>` entities.
   * @type {number}
   * @memberof BuildLocator
   */
  lookupLimit?: number;
  /**
   * Build number string.
   * @type {string}
   * @memberof BuildLocator
   */
  number?: string;
  /**
   * Is a personal build.
   * @type {boolean}
   * @memberof BuildLocator
   */
  personal?: boolean;
  /**
   * Is pinned.
   * @type {boolean}
   * @memberof BuildLocator
   */
  pinned?: boolean;
  /**
   * Project (direct parent) locator.
   * @type {string}
   * @memberof BuildLocator
   */
  project?: string;
  /**
   *
   * @type {string}
   * @memberof BuildLocator
   */
  property?: BuildLocatorPropertyEnum;
  /**
   * Is queued.
   * @type {boolean}
   * @memberof BuildLocator
   */
  queued?: boolean;
  /**
   * Requires either date or build dimension.
   * @type {string}
   * @memberof BuildLocator
   */
  queuedDate?: string;
  /**
   * Build revision.
   * @type {string}
   * @memberof BuildLocator
   */
  revision?: string;
  /**
   * Is running.
   * @type {boolean}
   * @memberof BuildLocator
   */
  running?: boolean;
  /**
   *
   * @type {string}
   * @memberof BuildLocator
   */
  snapshotDependency?: string;
  /**
   * For paginated calls, from which entity to start rendering the page.
   * @type {number}
   * @memberof BuildLocator
   */
  start?: number;
  /**
   * Requires either date or build dimension.
   * @type {string}
   * @memberof BuildLocator
   */
  startDate?: string;
  /**
   *
   * @type {string}
   * @memberof BuildLocator
   */
  state?: BuildLocatorStateEnum;
  /**
   * Status text.
   * @type {string}
   * @memberof BuildLocator
   */
  status?: string;
  /**
   * Tag locator.
   * @type {string}
   * @memberof BuildLocator
   */
  tag?: string;
  /**
   * ID of a build or build promotion.
   * @type {number}
   * @memberof BuildLocator
   */
  taskId?: number;
  /**
   * For personal builds checks the owner of the build, triggerring user in other cases.
   * @type {string}
   * @memberof BuildLocator
   */
  user?: string;
}

export const BuildLocatorPropertyEnum = {
  Exists: 'exists',
  NotExists: 'not-exists',
  Equals: 'equals',
  DoesNotEqual: 'does-not-equal',
  StartsWith: 'starts-with',
  Contains: 'contains',
  DoesNotContain: 'does-not-contain',
  EndsWith: 'ends-with',
  Any: 'any',
  Matches: 'matches',
  DoesNotMatch: 'does-not-match',
  MoreThan: 'more-than',
  NoMoreThan: 'no-more-than',
  LessThan: 'less-than',
  NoLessThan: 'no-less-than',
  VerMoreThan: 'ver-more-than',
  VerNoMoreThan: 'ver-no-more-than',
  VerLessThan: 'ver-less-than',
  VerNoLessThan: 'ver-no-less-than',
} as const;

export type BuildLocatorPropertyEnum =
  (typeof BuildLocatorPropertyEnum)[keyof typeof BuildLocatorPropertyEnum];
export const BuildLocatorStateEnum = {
  Queued: 'queued',
  Running: 'running',
  Finished: 'finished',
  Any: 'any',
} as const;

export type BuildLocatorStateEnum =
  (typeof BuildLocatorStateEnum)[keyof typeof BuildLocatorStateEnum];

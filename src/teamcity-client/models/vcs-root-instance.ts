/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
// May contain unused imports in some cases
// @ts-ignore
import type { Items } from './items';
// May contain unused imports in some cases
// @ts-ignore
import type { Properties } from './properties';
// May contain unused imports in some cases
// @ts-ignore
import type { RepositoryState } from './repository-state';
// May contain unused imports in some cases
// @ts-ignore
import type { VcsRoot } from './vcs-root';
// May contain unused imports in some cases
// @ts-ignore
import type { VcsStatus } from './vcs-status';

/**
 * An instance of the VCS root. VCS roots are abstract storages of VCS connection settings that cannot be used directly. Build configurations, triggers, build features, and other TeamCity entities use instances of corresponding VCS roots to perform their tasks (checkout sources, post build statuses, and so on). If a root includes parameter references in its settings (for example, `{\'name\':\'branch\',\'value\':\'%main-branch%\'}`), it spawns a separate instance for each configuration that has a unique value for that parameter. Otherwise, if all root settings are static, it generates one instance that can be attached to any number of build configurations.
 * @export
 * @interface VcsRootInstance
 */
export interface VcsRootInstance {
  /**
   * The internal read-only ID of this root instance.
   * @type {string}
   * @memberof VcsRootInstance
   */
  id?: string;
  /**
   * The ID of a parent VcsRoot.
   * @type {string}
   * @memberof VcsRootInstance
   */
  'vcs-root-id'?: string;
  /**
   * The internal ID of a parent VcsRoot
   * @type {string}
   * @memberof VcsRootInstance
   */
  vcsRootInternalId?: string;
  /**
   * The public name of a parent VcsRoot.
   * @type {string}
   * @memberof VcsRootInstance
   */
  name?: string;
  /**
   * The type of a VCS provider to which the parent VcsRoot connects.
   * @type {string}
   * @memberof VcsRootInstance
   */
  vcsName?: string;
  /**
   * The actual interval (in seconds) for polling VCS for new changes.
   * @type {number}
   * @memberof VcsRootInstance
   */
  modificationCheckInterval?: number;
  /**
   * Returns **true** if the configuration uses post-commit hooks to get new repository changes\' notifications; **false** if pending changes are retrieved via periodic repository polling.
   * @type {boolean}
   * @memberof VcsRootInstance
   */
  commitHookMode?: boolean;
  /**
   * The latest revision of a remote repository branch targeted by this root instance.
   * @type {string}
   * @memberof VcsRootInstance
   */
  lastVersion?: string;
  /**
   * This is the internal property and is not intented to be used.
   * @type {string}
   * @memberof VcsRootInstance
   */
  lastVersionInternal?: string;
  /**
   * The short (without TeamCity server address) link to this root instance.
   * @type {string}
   * @memberof VcsRootInstance
   */
  href?: string;
  /**
   *
   * @type {VcsRoot}
   * @memberof VcsRootInstance
   */
  'vcs-root'?: VcsRoot;
  /**
   *
   * @type {VcsStatus}
   * @memberof VcsRootInstance
   */
  status?: VcsStatus;
  /**
   *
   * @type {RepositoryState}
   * @memberof VcsRootInstance
   */
  repositoryState?: RepositoryState;
  /**
   *
   * @type {Properties}
   * @memberof VcsRootInstance
   */
  properties?: Properties;
  /**
   *
   * @type {Items}
   * @memberof VcsRootInstance
   */
  repositoryIdStrings?: Items;
  /**
   *
   * @type {string}
   * @memberof VcsRootInstance
   */
  projectLocator?: string;
}

/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Represents a locator string for filtering Mute entities.
 * @export
 * @interface MuteLocator
 */
export interface MuteLocator {
  /**
   * Project affected by the mutes.
   * @type {string}
   * @memberof MuteLocator
   */
  affectedProject?: string;
  /**
   * For paginated calls, how many entities to return per page.
   * @type {number}
   * @memberof MuteLocator
   */
  count?: number;
  /**
   * Mute creation time, yyyyMMddTHHmmss+ZZZZ.
   * @type {string}
   * @memberof MuteLocator
   */
  creationDate?: string;
  /**
   * Internal mute id.
   * @type {number}
   * @memberof MuteLocator
   */
  id?: number;
  /**
   * Problem for which mute is assigned.
   * @type {string}
   * @memberof MuteLocator
   */
  problem?: string;
  /**
   * Project in which mute is assigned.
   * @type {string}
   * @memberof MuteLocator
   */
  project?: string;
  /**
   * User who muted this test/problem.
   * @type {string}
   * @memberof MuteLocator
   */
  reporter?: string;
  /**
   * Unmute condition.
   * @type {string}
   * @memberof MuteLocator
   */
  resolution?: MuteLocatorResolutionEnum;
  /**
   * For paginated calls, from which entity to start rendering the page.
   * @type {number}
   * @memberof MuteLocator
   */
  start?: number;
  /**
   * test for which mute is assigned
   * @type {string}
   * @memberof MuteLocator
   */
  test?: string;
  /**
   * What is muted.
   * @type {string}
   * @memberof MuteLocator
   */
  type?: MuteLocatorTypeEnum;
  /**
   * Automatic unmute time, yyyyMMddTHHmmss+ZZZZ.
   * @type {string}
   * @memberof MuteLocator
   */
  unmuteDate?: string;
}

export const MuteLocatorResolutionEnum = {
  Manually: 'manually',
  Whenfixed: 'whenfixed',
  Attime: 'attime',
} as const;

export type MuteLocatorResolutionEnum =
  (typeof MuteLocatorResolutionEnum)[keyof typeof MuteLocatorResolutionEnum];
export const MuteLocatorTypeEnum = {
  Test: 'test',
  Problem: 'problem',
} as const;

export type MuteLocatorTypeEnum = (typeof MuteLocatorTypeEnum)[keyof typeof MuteLocatorTypeEnum];

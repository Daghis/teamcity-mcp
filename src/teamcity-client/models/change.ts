/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
// May contain unused imports in some cases
// @ts-ignore
import type { ChangeStatus } from './change-status';
// May contain unused imports in some cases
// @ts-ignore
import type { Changes } from './changes';
// May contain unused imports in some cases
// @ts-ignore
import type { Commiter } from './commiter';
// May contain unused imports in some cases
// @ts-ignore
import type { FileChanges } from './file-changes';
// May contain unused imports in some cases
// @ts-ignore
import type { Items } from './items';
// May contain unused imports in some cases
// @ts-ignore
import type { Properties } from './properties';
// May contain unused imports in some cases
// @ts-ignore
import type { SnapshotDependencyLink } from './snapshot-dependency-link';
// May contain unused imports in some cases
// @ts-ignore
import type { User } from './user';
// May contain unused imports in some cases
// @ts-ignore
import type { VcsRootInstance } from './vcs-root-instance';

/**
 * Represents a VCS change (commit).
 * @export
 * @interface Change
 */
export interface Change {
  /**
   * The unique ID of this change object.
   * @type {number}
   * @memberof Change
   */
  id?: number;
  /**
   * The full revision SHA that corresponds to this change, or a time stamp of a personal build that processed a custom diff
   * @type {string}
   * @memberof Change
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof Change
   */
  internalVersion?: string;
  /**
   * This property is obsolete. To identify the change author, read the `commiter` property instead.
   * @type {string}
   * @memberof Change
   */
  username?: string;
  /**
   * Returns the timestamp that corresponds to the moment this change was pushed to the VCS. If this is a custom change uploaded to a personal build, returns the timestamp of this build instead.
   * @type {string}
   * @memberof Change
   */
  date?: string;
  /**
   * Returns the timestamp that corresponds to the moment this change was registered in the TeamCity database.
   * @type {string}
   * @memberof Change
   */
  registrationDate?: string;
  /**
   * Returns *true* if this change was a custom patch uploaded to a personal build. If this is a regular change that comes from a VCS (even if the build that processed it is a personal one), returns *false*.
   * @type {boolean}
   * @memberof Change
   */
  personal?: boolean;
  /**
   * Returns the shortened (without the server URL) link to the current change.
   * @type {string}
   * @memberof Change
   */
  href?: string;
  /**
   * The TeamCity server link to this change.
   * @type {string}
   * @memberof Change
   */
  webUrl?: string;
  /**
   * The comment an author of the change left.
   * @type {string}
   * @memberof Change
   */
  comment?: string;
  /**
   *
   * @type {User}
   * @memberof Change
   */
  user?: User;
  /**
   * Specifies the origin of the change.  * *VCS_CHANGE* — the regular change that originates from a repository related to the target build. * *SNAPSHOT_DEPENDENCY_VCS_CHANGE* — the change is processed in another build on which the target build depends (via the snapshot dependency). Add the `changesFromDependencies:true` locator to your request if you want the response to include changes processed in upstream chain builds.
   * @type {string}
   * @memberof Change
   */
  type?: string;
  /**
   *
   * @type {SnapshotDependencyLink}
   * @memberof Change
   */
  snapshotDependencyLink?: SnapshotDependencyLink;
  /**
   *
   * @type {FileChanges}
   * @memberof Change
   */
  files?: FileChanges;
  /**
   *
   * @type {VcsRootInstance}
   * @memberof Change
   */
  vcsRootInstance?: VcsRootInstance;
  /**
   *
   * @type {Changes}
   * @memberof Change
   */
  parentChanges?: Changes;
  /**
   *
   * @type {Items}
   * @memberof Change
   */
  parentRevisions?: Items;
  /**
   *
   * @type {Properties}
   * @memberof Change
   */
  attributes?: Properties;
  /**
   *
   * @type {boolean}
   * @memberof Change
   */
  storesProjectSettings?: boolean;
  /**
   *
   * @type {ChangeStatus}
   * @memberof Change
   */
  status?: ChangeStatus;
  /**
   *
   * @type {Commiter}
   * @memberof Change
   */
  commiter?: Commiter;
  /**
   *
   * @type {boolean}
   * @memberof Change
   */
  canEditComment?: boolean;
  /**
   * This property supports the internal infrastructure and is not intended to be used in your code.
   * @type {string}
   * @memberof Change
   */
  locator?: string;
}

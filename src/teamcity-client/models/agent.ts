/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
// May contain unused imports in some cases
// @ts-ignore
import type { AgentPool } from './agent-pool';
// May contain unused imports in some cases
// @ts-ignore
import type { AuthorizedInfo } from './authorized-info';
// May contain unused imports in some cases
// @ts-ignore
import type { Build } from './build';
// May contain unused imports in some cases
// @ts-ignore
import type { BuildTypes } from './build-types';
// May contain unused imports in some cases
// @ts-ignore
import type { Builds } from './builds';
// May contain unused imports in some cases
// @ts-ignore
import type { CloudImage } from './cloud-image';
// May contain unused imports in some cases
// @ts-ignore
import type { CloudInstance } from './cloud-instance';
// May contain unused imports in some cases
// @ts-ignore
import type { Compatibilities } from './compatibilities';
// May contain unused imports in some cases
// @ts-ignore
import type { CompatibilityPolicy } from './compatibility-policy';
// May contain unused imports in some cases
// @ts-ignore
import type { EnabledInfo } from './enabled-info';
// May contain unused imports in some cases
// @ts-ignore
import type { Environment } from './environment';
// May contain unused imports in some cases
// @ts-ignore
import type { Links } from './links';
// May contain unused imports in some cases
// @ts-ignore
import type { Properties } from './properties';

/**
 * Represents a known agent instance.
 * @export
 * @interface Agent
 */
export interface Agent {
  /**
   * An integer value that is the unique agent identificator.
   * @type {number}
   * @memberof Agent
   */
  id?: number;
  /**
   * The public agent name. Cloud agent names are typically formed by appending the unique instance name to the parent cloud profile name.
   * @type {string}
   * @memberof Agent
   */
  name?: string;
  /**
   * Returns the unique ID of the agent category. Local standalone have unique type IDs whereas cloud agents spawned from the same cloud image have the same type ID.
   * @type {number}
   * @memberof Agent
   */
  typeId?: number;
  /**
   * Returns *true* if the agent is connected to the TeamCity server; otherwise, *false*. Connected agents are those that can communicate with the TeamCity server.
   * @type {boolean}
   * @memberof Agent
   */
  connected?: boolean;
  /**
   * Returns *true* if the agent is enabled; otherwise, *false*. Enabled agents are those that are ready to process new bulds.  Send `PUT` requests to the [`/app/rest/agents/{agentLocator}/enabledInfo`](https://www.jetbrains.com/help/teamcity/rest/agentapi.html#setEnabledInfo) endpoint to manually enable or disable agents.
   * @type {boolean}
   * @memberof Agent
   */
  enabled?: boolean;
  /**
   * Returns *true* if the agent is authorized on the server; otherwise, *false*. Authorized agents are those that are granted permission to execute building tasks on this TeamCity server.  Send `PUT` requests to the [`/app/rest/agents/{agentLocator}/authorizedInfo`](https://www.jetbrains.com/help/teamcity/rest/agentapi.html#setAuthorizedInfo) endpoint to manually authorize or unauthorize agents.
   * @type {boolean}
   * @memberof Agent
   */
  authorized?: boolean;
  /**
   * Returns *true* if both `outdated` and `pluginsOutdated` properties return *false*; *false* if any of these properties returns *true*.
   * @type {boolean}
   * @memberof Agent
   */
  uptodate?: boolean;
  /**
   * Returns *true* for outdated agents that require an update; *false* for agents that are up to date. Agents typically update their software automatically and do not require any actions from your side.
   * @type {boolean}
   * @memberof Agent
   */
  outdated?: boolean;
  /**
   * Returns *false* if all plugins installed on this agent are of the latest version; *true* if some of plugins are outdated. Plugins installed from the JetBrains Marketplace are typically updated automatically.
   * @type {boolean}
   * @memberof Agent
   */
  pluginsOutdated?: boolean;
  /**
   * Returns *true* the Java version installed on the agent machine is outdated; otherwise, *false*.
   * @type {boolean}
   * @memberof Agent
   */
  javaOutdated?: boolean;
  /**
   * The IP address of the agent machine.
   * @type {string}
   * @memberof Agent
   */
  ip?: string;
  /**
   * Returns the agent-server communication protocol type:  * *unidirectional* — the default one-way communication protocol. Unidirectional agents establish an HTTP(S) connection to the TeamCity server, and periodically poll it for server commands. * *bidirectional* — [no longer supported](https://www.jetbrains.com/help/teamcity/upgrade-notes.html#Canceled+bidirectional+agent-server+communication+protocol) in TeamCity 2021.2 and newer.
   * @type {string}
   * @memberof Agent
   */
  protocol?: AgentProtocolEnum;
  /**
   * The actual version of the agent software or \'unknown\' if the agent is disconnected. If this version differs from the version expected by the server (the `currentAgentVersion` property), the agent is considered outdated.
   * @type {string}
   * @memberof Agent
   */
  version?: string;
  /**
   * The version of the agent software that is expected by the current TeamCity server. Matches the build number of this server (can be obtained from the `/app/rest/server/build` endpoint).
   * @type {string}
   * @memberof Agent
   */
  currentAgentVersion?: string;
  /**
   * The timestamp of the last comminication between this agent and the TeamCity server.  To get the last time this agent performed an activity different from periodic server polling (for example, ran a build), use the `idleSinceTime` property instead.
   * @type {string}
   * @memberof Agent
   */
  lastActivityTime?: string;
  /**
   * The timestamp of the last meaningful agent activity (for example, running a build). For agents that never ran a build after they were authorized by the server, this timestamp is typically equal to the `registrationTimestamp` property value.
   * @type {string}
   * @memberof Agent
   */
  idleSinceTime?: string;
  /**
   * The summary that explains why this agent was disconnected. Returns `null` for connected agents.
   * @type {string}
   * @memberof Agent
   */
  disconnectionComment?: string;
  /**
   * The timestamp of the first successful agent authorization on this server.
   * @type {string}
   * @memberof Agent
   */
  registrationTimestamp?: string;
  /**
   * The name of the agent machine host.
   * @type {string}
   * @memberof Agent
   */
  host?: string;
  /**
   * An integer value that is the [benchmarking score](https://www.jetbrains.com/help/teamcity/viewing-build-agent-details.html#Agent+Summary) of the agent machine\'s CPU.
   * @type {number}
   * @memberof Agent
   */
  cpuRank?: number;
  /**
   * The port used by the TeamCity server to connect to the agent.
   * @type {number}
   * @memberof Agent
   */
  port?: number;
  /**
   * Returns the shortened (without the server URL) link to the current agent. To obtain the full URL, use the *webUrl* property instead.
   * @type {string}
   * @memberof Agent
   */
  href?: string;
  /**
   * Returns the full web link to access this agent. To get a shortened link without the server URL, read the *href* property instead.
   * @type {string}
   * @memberof Agent
   */
  webUrl?: string;
  /**
   *
   * @type {Build}
   * @memberof Agent
   */
  build?: Build;
  /**
   *
   * @type {Links}
   * @memberof Agent
   */
  links?: Links;
  /**
   *
   * @type {EnabledInfo}
   * @memberof Agent
   */
  enabledInfo?: EnabledInfo;
  /**
   *
   * @type {AuthorizedInfo}
   * @memberof Agent
   */
  authorizedInfo?: AuthorizedInfo;
  /**
   *
   * @type {Properties}
   * @memberof Agent
   */
  properties?: Properties;
  /**
   *
   * @type {CloudInstance}
   * @memberof Agent
   */
  cloudInstance?: CloudInstance;
  /**
   *
   * @type {CloudImage}
   * @memberof Agent
   */
  cloudImage?: CloudImage;
  /**
   *
   * @type {Environment}
   * @memberof Agent
   */
  environment?: Environment;
  /**
   *
   * @type {AgentPool}
   * @memberof Agent
   */
  pool?: AgentPool;
  /**
   *
   * @type {CompatibilityPolicy}
   * @memberof Agent
   */
  compatibilityPolicy?: CompatibilityPolicy;
  /**
   *
   * @type {BuildTypes}
   * @memberof Agent
   */
  compatibleBuildTypes?: BuildTypes;
  /**
   *
   * @type {Compatibilities}
   * @memberof Agent
   */
  incompatibleBuildTypes?: Compatibilities;
  /**
   *
   * @type {Builds}
   * @memberof Agent
   */
  builds?: Builds;
  /**
   * Returns *true* if the agent was removed after a long period of inactivity; otherwise, *false*.
   * @type {boolean}
   * @memberof Agent
   */
  removed?: boolean;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  locator?: string;
}

export const AgentProtocolEnum = {
  Unidirectional: 'unidirectional',
  Bidirectional: 'bidirectional',
} as const;

export type AgentProtocolEnum = (typeof AgentProtocolEnum)[keyof typeof AgentProtocolEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Agent } from '../models';
// @ts-ignore
import type { AgentPool } from '../models';
// @ts-ignore
import type { Agents } from '../models';
// @ts-ignore
import type { AuthorizedInfo } from '../models';
// @ts-ignore
import type { BuildTypes } from '../models';
// @ts-ignore
import type { Compatibilities } from '../models';
// @ts-ignore
import type { CompatibilityPolicy } from '../models';
// @ts-ignore
import type { EnabledInfo } from '../models';

/**
 * AgentApi - axios parameter creator
 * @export
 */
export const AgentApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Delete an inactive agent.
     * @param {string} agentLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent: async (
      agentLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('deleteAgent', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get agent matching the locator.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgent: async (
      agentLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getAgent', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a field of the matching agent.
     * @param {string} agentLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentField: async (
      agentLocator: string,
      field: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getAgentField', 'agentLocator', agentLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('getAgentField', 'field', field);
      const localVarPath = `/app/rest/agents/{agentLocator}/{field}`
        .replace(`{${'agentLocator'}}`, encodeURIComponent(String(agentLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the agent pool of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPool: async (
      agentLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getAgentPool', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/pool`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all known agents.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAgents: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/agents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the authorization info of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorizedInfo: async (
      agentLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getAuthorizedInfo', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/authorizedInfo`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the build configuration run policy of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildConfigurationRunPolicy: async (
      agentLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getBuildConfigurationRunPolicy', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/compatibilityPolicy`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build types compatible with the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompatibleBuildTypes: async (
      agentLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getCompatibleBuildTypes', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/compatibleBuildTypes`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Check if the matching agent is enabled.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnabledInfo: async (
      agentLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getEnabledInfo', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/enabledInfo`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build types incompatible with the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncompatibleBuildTypes: async (
      agentLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('getIncompatibleBuildTypes', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/incompatibleBuildTypes`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a field of the matching agent.
     * @param {string} agentLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentField: async (
      agentLocator: string,
      field: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('setAgentField', 'agentLocator', agentLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('setAgentField', 'field', field);
      const localVarPath = `/app/rest/agents/{agentLocator}/{field}`
        .replace(`{${'agentLocator'}}`, encodeURIComponent(String(agentLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Assign the matching agent to the specified agent pool.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {AgentPool} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentPool: async (
      agentLocator: string,
      fields?: string,
      body?: AgentPool,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('setAgentPool', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/pool`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the authorization info of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {AuthorizedInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthorizedInfo: async (
      agentLocator: string,
      fields?: string,
      body?: AuthorizedInfo,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('setAuthorizedInfo', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/authorizedInfo`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build configuration run policy of agent matching locator.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {CompatibilityPolicy} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildConfigurationRunPolicy: async (
      agentLocator: string,
      fields?: string,
      body?: CompatibilityPolicy,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('setBuildConfigurationRunPolicy', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/compatibilityPolicy`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the enablement status of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {EnabledInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setEnabledInfo: async (
      agentLocator: string,
      fields?: string,
      body?: EnabledInfo,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentLocator' is not null or undefined
      assertParamExists('setEnabledInfo', 'agentLocator', agentLocator);
      const localVarPath = `/app/rest/agents/{agentLocator}/enabledInfo`.replace(
        `{${'agentLocator'}}`,
        encodeURIComponent(String(agentLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AgentApi - functional programming interface
 * @export
 */
export const AgentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AgentApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Delete an inactive agent.
     * @param {string} agentLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAgent(
      agentLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgent(agentLocator, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.deleteAgent']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get agent matching the locator.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAgent(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAgent(
        agentLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getAgent']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a field of the matching agent.
     * @param {string} agentLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAgentField(
      agentLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentField(
        agentLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getAgentField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the agent pool of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAgentPool(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentPool>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentPool(
        agentLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getAgentPool']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all known agents.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllAgents(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agents>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAgents(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getAllAgents']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the authorization info of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthorizedInfo(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorizedInfo(
        agentLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getAuthorizedInfo']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the build configuration run policy of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildConfigurationRunPolicy(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompatibilityPolicy>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildConfigurationRunPolicy(
        agentLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getBuildConfigurationRunPolicy']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build types compatible with the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCompatibleBuildTypes(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildTypes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCompatibleBuildTypes(
        agentLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getCompatibleBuildTypes']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Check if the matching agent is enabled.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEnabledInfo(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnabledInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnabledInfo(
        agentLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getEnabledInfo']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build types incompatible with the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIncompatibleBuildTypes(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Compatibilities>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getIncompatibleBuildTypes(
        agentLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.getIncompatibleBuildTypes']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a field of the matching agent.
     * @param {string} agentLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAgentField(
      agentLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAgentField(
        agentLocator,
        field,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.setAgentField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Assign the matching agent to the specified agent pool.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {AgentPool} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAgentPool(
      agentLocator: string,
      fields?: string,
      body?: AgentPool,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentPool>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAgentPool(
        agentLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.setAgentPool']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update the authorization info of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {AuthorizedInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAuthorizedInfo(
      agentLocator: string,
      fields?: string,
      body?: AuthorizedInfo,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAuthorizedInfo(
        agentLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.setAuthorizedInfo']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build configuration run policy of agent matching locator.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {CompatibilityPolicy} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setBuildConfigurationRunPolicy(
      agentLocator: string,
      fields?: string,
      body?: CompatibilityPolicy,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompatibilityPolicy>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setBuildConfigurationRunPolicy(
        agentLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.setBuildConfigurationRunPolicy']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update the enablement status of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {EnabledInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setEnabledInfo(
      agentLocator: string,
      fields?: string,
      body?: EnabledInfo,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnabledInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setEnabledInfo(
        agentLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentApi.setEnabledInfo']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AgentApi - factory interface
 * @export
 */
export const AgentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AgentApiFp(configuration);
  return {
    /**
     *
     * @summary Delete an inactive agent.
     * @param {string} agentLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(agentLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteAgent(agentLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get agent matching the locator.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgent(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Agent> {
      return localVarFp
        .getAgent(agentLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a field of the matching agent.
     * @param {string} agentLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentField(
      agentLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getAgentField(agentLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the agent pool of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPool(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentPool> {
      return localVarFp
        .getAgentPool(agentLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all known agents.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAgents(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Agents> {
      return localVarFp
        .getAllAgents(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the authorization info of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorizedInfo(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AuthorizedInfo> {
      return localVarFp
        .getAuthorizedInfo(agentLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the build configuration run policy of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildConfigurationRunPolicy(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CompatibilityPolicy> {
      return localVarFp
        .getBuildConfigurationRunPolicy(agentLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build types compatible with the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompatibleBuildTypes(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildTypes> {
      return localVarFp
        .getCompatibleBuildTypes(agentLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Check if the matching agent is enabled.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnabledInfo(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<EnabledInfo> {
      return localVarFp
        .getEnabledInfo(agentLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build types incompatible with the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncompatibleBuildTypes(
      agentLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Compatibilities> {
      return localVarFp
        .getIncompatibleBuildTypes(agentLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a field of the matching agent.
     * @param {string} agentLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentField(
      agentLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setAgentField(agentLocator, field, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Assign the matching agent to the specified agent pool.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {AgentPool} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentPool(
      agentLocator: string,
      fields?: string,
      body?: AgentPool,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentPool> {
      return localVarFp
        .setAgentPool(agentLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the authorization info of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {AuthorizedInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthorizedInfo(
      agentLocator: string,
      fields?: string,
      body?: AuthorizedInfo,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AuthorizedInfo> {
      return localVarFp
        .setAuthorizedInfo(agentLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build configuration run policy of agent matching locator.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {CompatibilityPolicy} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildConfigurationRunPolicy(
      agentLocator: string,
      fields?: string,
      body?: CompatibilityPolicy,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CompatibilityPolicy> {
      return localVarFp
        .setBuildConfigurationRunPolicy(agentLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the enablement status of the matching agent.
     * @param {string} agentLocator
     * @param {string} [fields]
     * @param {EnabledInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setEnabledInfo(
      agentLocator: string,
      fields?: string,
      body?: EnabledInfo,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<EnabledInfo> {
      return localVarFp
        .setEnabledInfo(agentLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AgentApi - interface
 * @export
 * @interface AgentApi
 */
export interface AgentApiInterface {
  /**
   *
   * @summary Delete an inactive agent.
   * @param {string} agentLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  deleteAgent(agentLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Get agent matching the locator.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getAgent(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Agent>;

  /**
   *
   * @summary Get a field of the matching agent.
   * @param {string} agentLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getAgentField(
    agentLocator: string,
    field: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get the agent pool of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getAgentPool(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentPool>;

  /**
   *
   * @summary Get all known agents.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getAllAgents(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Agents>;

  /**
   *
   * @summary Get the authorization info of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getAuthorizedInfo(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AuthorizedInfo>;

  /**
   *
   * @summary Get the build configuration run policy of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getBuildConfigurationRunPolicy(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CompatibilityPolicy>;

  /**
   *
   * @summary Get build types compatible with the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getCompatibleBuildTypes(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildTypes>;

  /**
   *
   * @summary Check if the matching agent is enabled.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getEnabledInfo(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<EnabledInfo>;

  /**
   *
   * @summary Get build types incompatible with the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  getIncompatibleBuildTypes(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Compatibilities>;

  /**
   *
   * @summary Update a field of the matching agent.
   * @param {string} agentLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  setAgentField(
    agentLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Assign the matching agent to the specified agent pool.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {AgentPool} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  setAgentPool(
    agentLocator: string,
    fields?: string,
    body?: AgentPool,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentPool>;

  /**
   *
   * @summary Update the authorization info of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {AuthorizedInfo} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  setAuthorizedInfo(
    agentLocator: string,
    fields?: string,
    body?: AuthorizedInfo,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AuthorizedInfo>;

  /**
   *
   * @summary Update build configuration run policy of agent matching locator.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {CompatibilityPolicy} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  setBuildConfigurationRunPolicy(
    agentLocator: string,
    fields?: string,
    body?: CompatibilityPolicy,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CompatibilityPolicy>;

  /**
   *
   * @summary Update the enablement status of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {EnabledInfo} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApiInterface
   */
  setEnabledInfo(
    agentLocator: string,
    fields?: string,
    body?: EnabledInfo,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<EnabledInfo>;
}

/**
 * AgentApi - object-oriented interface
 * @export
 * @class AgentApi
 * @extends {BaseAPI}
 */
export class AgentApi extends BaseAPI implements AgentApiInterface {
  /**
   *
   * @summary Delete an inactive agent.
   * @param {string} agentLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public deleteAgent(agentLocator: string, options?: RawAxiosRequestConfig) {
    return AgentApiFp(this.configuration)
      .deleteAgent(agentLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get agent matching the locator.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getAgent(agentLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return AgentApiFp(this.configuration)
      .getAgent(agentLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a field of the matching agent.
   * @param {string} agentLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getAgentField(agentLocator: string, field: string, options?: RawAxiosRequestConfig) {
    return AgentApiFp(this.configuration)
      .getAgentField(agentLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the agent pool of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getAgentPool(agentLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return AgentApiFp(this.configuration)
      .getAgentPool(agentLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all known agents.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getAllAgents(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return AgentApiFp(this.configuration)
      .getAllAgents(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the authorization info of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getAuthorizedInfo(agentLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return AgentApiFp(this.configuration)
      .getAuthorizedInfo(agentLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the build configuration run policy of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getBuildConfigurationRunPolicy(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .getBuildConfigurationRunPolicy(agentLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build types compatible with the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getCompatibleBuildTypes(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .getCompatibleBuildTypes(agentLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Check if the matching agent is enabled.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getEnabledInfo(agentLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return AgentApiFp(this.configuration)
      .getEnabledInfo(agentLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build types incompatible with the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public getIncompatibleBuildTypes(
    agentLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .getIncompatibleBuildTypes(agentLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a field of the matching agent.
   * @param {string} agentLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public setAgentField(
    agentLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .setAgentField(agentLocator, field, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Assign the matching agent to the specified agent pool.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {AgentPool} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public setAgentPool(
    agentLocator: string,
    fields?: string,
    body?: AgentPool,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .setAgentPool(agentLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the authorization info of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {AuthorizedInfo} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public setAuthorizedInfo(
    agentLocator: string,
    fields?: string,
    body?: AuthorizedInfo,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .setAuthorizedInfo(agentLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build configuration run policy of agent matching locator.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {CompatibilityPolicy} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public setBuildConfigurationRunPolicy(
    agentLocator: string,
    fields?: string,
    body?: CompatibilityPolicy,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .setBuildConfigurationRunPolicy(agentLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the enablement status of the matching agent.
   * @param {string} agentLocator
   * @param {string} [fields]
   * @param {EnabledInfo} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentApi
   */
  public setEnabledInfo(
    agentLocator: string,
    fields?: string,
    body?: EnabledInfo,
    options?: RawAxiosRequestConfig
  ) {
    return AgentApiFp(this.configuration)
      .setEnabledInfo(agentLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

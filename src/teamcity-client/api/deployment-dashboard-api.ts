/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { DeploymentDashboard } from '../models';
// @ts-ignore
import type { DeploymentDashboards } from '../models';
// @ts-ignore
import type { DeploymentInstance } from '../models';
// @ts-ignore
import type { DeploymentInstances } from '../models';
// @ts-ignore
import type { DeploymentStateEntry } from '../models';

/**
 * DeploymentDashboardApi - axios parameter creator
 * @export
 */
export const DeploymentDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new deployment dashboard.
     * @param {DeploymentDashboard} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDashboard: async (
      body?: DeploymentDashboard,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/deploymentDashboards`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new deployment instance.
     * @param {string} deploymentDashboardLocator
     * @param {DeploymentInstance} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInstance: async (
      deploymentDashboardLocator: string,
      body?: DeploymentInstance,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'deploymentDashboardLocator' is not null or undefined
      assertParamExists('createInstance', 'deploymentDashboardLocator', deploymentDashboardLocator);
      const localVarPath =
        `/app/rest/deploymentDashboards/{deploymentDashboardLocator}/instances`.replace(
          `{${'deploymentDashboardLocator'}}`,
          encodeURIComponent(String(deploymentDashboardLocator))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the deployment dashboard matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDashboard: async (
      deploymentDashboardLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'deploymentDashboardLocator' is not null or undefined
      assertParamExists(
        'deleteDashboard',
        'deploymentDashboardLocator',
        deploymentDashboardLocator
      );
      const localVarPath = `/app/rest/deploymentDashboards/{deploymentDashboardLocator}`.replace(
        `{${'deploymentDashboardLocator'}}`,
        encodeURIComponent(String(deploymentDashboardLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the deployment instance matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInstance: async (
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'deploymentDashboardLocator' is not null or undefined
      assertParamExists('deleteInstance', 'deploymentDashboardLocator', deploymentDashboardLocator);
      // verify required parameter 'deploymentInstanceLocator' is not null or undefined
      assertParamExists('deleteInstance', 'deploymentInstanceLocator', deploymentInstanceLocator);
      const localVarPath =
        `/app/rest/deploymentDashboards/{deploymentDashboardLocator}/instances/{deploymentInstanceLocator}`
          .replace(
            `{${'deploymentDashboardLocator'}}`,
            encodeURIComponent(String(deploymentDashboardLocator))
          )
          .replace(
            `{${'deploymentInstanceLocator'}}`,
            encodeURIComponent(String(deploymentInstanceLocator))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all deployment dashboards.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDashboards: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/deploymentDashboards`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the deployment dashboard matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDashboard: async (
      deploymentDashboardLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'deploymentDashboardLocator' is not null or undefined
      assertParamExists('getDashboard', 'deploymentDashboardLocator', deploymentDashboardLocator);
      const localVarPath = `/app/rest/deploymentDashboards/{deploymentDashboardLocator}`.replace(
        `{${'deploymentDashboardLocator'}}`,
        encodeURIComponent(String(deploymentDashboardLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the deployment instance matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstance: async (
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'deploymentDashboardLocator' is not null or undefined
      assertParamExists('getInstance', 'deploymentDashboardLocator', deploymentDashboardLocator);
      // verify required parameter 'deploymentInstanceLocator' is not null or undefined
      assertParamExists('getInstance', 'deploymentInstanceLocator', deploymentInstanceLocator);
      const localVarPath =
        `/app/rest/deploymentDashboards/{deploymentDashboardLocator}/instances/{deploymentInstanceLocator}`
          .replace(
            `{${'deploymentDashboardLocator'}}`,
            encodeURIComponent(String(deploymentDashboardLocator))
          )
          .replace(
            `{${'deploymentInstanceLocator'}}`,
            encodeURIComponent(String(deploymentInstanceLocator))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get deployment instances for a given deployment dashboard.
     * @param {string} deploymentDashboardLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstances: async (
      deploymentDashboardLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'deploymentDashboardLocator' is not null or undefined
      assertParamExists('getInstances', 'deploymentDashboardLocator', deploymentDashboardLocator);
      const localVarPath =
        `/app/rest/deploymentDashboards/{deploymentDashboardLocator}/instances`.replace(
          `{${'deploymentDashboardLocator'}}`,
          encodeURIComponent(String(deploymentDashboardLocator))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Report a new deployment for instance.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {DeploymentStateEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportNewDeploymentForInstance: async (
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      body?: DeploymentStateEntry,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'deploymentDashboardLocator' is not null or undefined
      assertParamExists(
        'reportNewDeploymentForInstance',
        'deploymentDashboardLocator',
        deploymentDashboardLocator
      );
      // verify required parameter 'deploymentInstanceLocator' is not null or undefined
      assertParamExists(
        'reportNewDeploymentForInstance',
        'deploymentInstanceLocator',
        deploymentInstanceLocator
      );
      const localVarPath =
        `/app/rest/deploymentDashboards/{deploymentDashboardLocator}/instances/{deploymentInstanceLocator}`
          .replace(
            `{${'deploymentDashboardLocator'}}`,
            encodeURIComponent(String(deploymentDashboardLocator))
          )
          .replace(
            `{${'deploymentInstanceLocator'}}`,
            encodeURIComponent(String(deploymentInstanceLocator))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DeploymentDashboardApi - functional programming interface
 * @export
 */
export const DeploymentDashboardApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DeploymentDashboardApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a new deployment dashboard.
     * @param {DeploymentDashboard} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDashboard(
      body?: DeploymentDashboard,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentDashboard>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboard(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.createDashboard']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new deployment instance.
     * @param {string} deploymentDashboardLocator
     * @param {DeploymentInstance} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createInstance(
      deploymentDashboardLocator: string,
      body?: DeploymentInstance,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentInstance>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createInstance(
        deploymentDashboardLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.createInstance']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete the deployment dashboard matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDashboard(
      deploymentDashboardLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboard(
        deploymentDashboardLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.deleteDashboard']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete the deployment instance matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteInstance(
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstance(
        deploymentDashboardLocator,
        deploymentInstanceLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.deleteInstance']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all deployment dashboards.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllDashboards(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentDashboards>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDashboards(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.getAllDashboards']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the deployment dashboard matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDashboard(
      deploymentDashboardLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentDashboard>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboard(
        deploymentDashboardLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.getDashboard']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the deployment instance matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInstance(
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentInstance>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(
        deploymentDashboardLocator,
        deploymentInstanceLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.getInstance']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get deployment instances for a given deployment dashboard.
     * @param {string} deploymentDashboardLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInstances(
      deploymentDashboardLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentInstances>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(
        deploymentDashboardLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.getInstances']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Report a new deployment for instance.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {DeploymentStateEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reportNewDeploymentForInstance(
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      body?: DeploymentStateEntry,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentInstance>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reportNewDeploymentForInstance(
        deploymentDashboardLocator,
        deploymentInstanceLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DeploymentDashboardApi.reportNewDeploymentForInstance']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DeploymentDashboardApi - factory interface
 * @export
 */
export const DeploymentDashboardApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DeploymentDashboardApiFp(configuration);
  return {
    /**
     *
     * @summary Create a new deployment dashboard.
     * @param {DeploymentDashboard} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDashboard(
      body?: DeploymentDashboard,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentDashboard> {
      return localVarFp.createDashboard(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new deployment instance.
     * @param {string} deploymentDashboardLocator
     * @param {DeploymentInstance} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInstance(
      deploymentDashboardLocator: string,
      body?: DeploymentInstance,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentInstance> {
      return localVarFp
        .createInstance(deploymentDashboardLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete the deployment dashboard matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDashboard(
      deploymentDashboardLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteDashboard(deploymentDashboardLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete the deployment instance matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInstance(
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteInstance(deploymentDashboardLocator, deploymentInstanceLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all deployment dashboards.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDashboards(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentDashboards> {
      return localVarFp
        .getAllDashboards(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the deployment dashboard matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDashboard(
      deploymentDashboardLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentDashboard> {
      return localVarFp
        .getDashboard(deploymentDashboardLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the deployment instance matching the locator.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstance(
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentInstance> {
      return localVarFp
        .getInstance(deploymentDashboardLocator, deploymentInstanceLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get deployment instances for a given deployment dashboard.
     * @param {string} deploymentDashboardLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstances(
      deploymentDashboardLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentInstances> {
      return localVarFp
        .getInstances(deploymentDashboardLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Report a new deployment for instance.
     * @param {string} deploymentDashboardLocator
     * @param {string} deploymentInstanceLocator
     * @param {DeploymentStateEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportNewDeploymentForInstance(
      deploymentDashboardLocator: string,
      deploymentInstanceLocator: string,
      body?: DeploymentStateEntry,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentInstance> {
      return localVarFp
        .reportNewDeploymentForInstance(
          deploymentDashboardLocator,
          deploymentInstanceLocator,
          body,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DeploymentDashboardApi - interface
 * @export
 * @interface DeploymentDashboardApi
 */
export interface DeploymentDashboardApiInterface {
  /**
   *
   * @summary Create a new deployment dashboard.
   * @param {DeploymentDashboard} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  createDashboard(
    body?: DeploymentDashboard,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentDashboard>;

  /**
   *
   * @summary Create a new deployment instance.
   * @param {string} deploymentDashboardLocator
   * @param {DeploymentInstance} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  createInstance(
    deploymentDashboardLocator: string,
    body?: DeploymentInstance,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentInstance>;

  /**
   *
   * @summary Delete the deployment dashboard matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  deleteDashboard(
    deploymentDashboardLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete the deployment instance matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {string} deploymentInstanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  deleteInstance(
    deploymentDashboardLocator: string,
    deploymentInstanceLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Get all deployment dashboards.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  getAllDashboards(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentDashboards>;

  /**
   *
   * @summary Get the deployment dashboard matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  getDashboard(
    deploymentDashboardLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentDashboard>;

  /**
   *
   * @summary Get the deployment instance matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {string} deploymentInstanceLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  getInstance(
    deploymentDashboardLocator: string,
    deploymentInstanceLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentInstance>;

  /**
   *
   * @summary Get deployment instances for a given deployment dashboard.
   * @param {string} deploymentDashboardLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  getInstances(
    deploymentDashboardLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentInstances>;

  /**
   *
   * @summary Report a new deployment for instance.
   * @param {string} deploymentDashboardLocator
   * @param {string} deploymentInstanceLocator
   * @param {DeploymentStateEntry} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApiInterface
   */
  reportNewDeploymentForInstance(
    deploymentDashboardLocator: string,
    deploymentInstanceLocator: string,
    body?: DeploymentStateEntry,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentInstance>;
}

/**
 * DeploymentDashboardApi - object-oriented interface
 * @export
 * @class DeploymentDashboardApi
 * @extends {BaseAPI}
 */
export class DeploymentDashboardApi extends BaseAPI implements DeploymentDashboardApiInterface {
  /**
   *
   * @summary Create a new deployment dashboard.
   * @param {DeploymentDashboard} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public createDashboard(body?: DeploymentDashboard, options?: RawAxiosRequestConfig) {
    return DeploymentDashboardApiFp(this.configuration)
      .createDashboard(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new deployment instance.
   * @param {string} deploymentDashboardLocator
   * @param {DeploymentInstance} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public createInstance(
    deploymentDashboardLocator: string,
    body?: DeploymentInstance,
    options?: RawAxiosRequestConfig
  ) {
    return DeploymentDashboardApiFp(this.configuration)
      .createInstance(deploymentDashboardLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete the deployment dashboard matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public deleteDashboard(deploymentDashboardLocator: string, options?: RawAxiosRequestConfig) {
    return DeploymentDashboardApiFp(this.configuration)
      .deleteDashboard(deploymentDashboardLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete the deployment instance matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {string} deploymentInstanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public deleteInstance(
    deploymentDashboardLocator: string,
    deploymentInstanceLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return DeploymentDashboardApiFp(this.configuration)
      .deleteInstance(deploymentDashboardLocator, deploymentInstanceLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all deployment dashboards.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public getAllDashboards(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return DeploymentDashboardApiFp(this.configuration)
      .getAllDashboards(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the deployment dashboard matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public getDashboard(
    deploymentDashboardLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return DeploymentDashboardApiFp(this.configuration)
      .getDashboard(deploymentDashboardLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the deployment instance matching the locator.
   * @param {string} deploymentDashboardLocator
   * @param {string} deploymentInstanceLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public getInstance(
    deploymentDashboardLocator: string,
    deploymentInstanceLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return DeploymentDashboardApiFp(this.configuration)
      .getInstance(deploymentDashboardLocator, deploymentInstanceLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get deployment instances for a given deployment dashboard.
   * @param {string} deploymentDashboardLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public getInstances(
    deploymentDashboardLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return DeploymentDashboardApiFp(this.configuration)
      .getInstances(deploymentDashboardLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Report a new deployment for instance.
   * @param {string} deploymentDashboardLocator
   * @param {string} deploymentInstanceLocator
   * @param {DeploymentStateEntry} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeploymentDashboardApi
   */
  public reportNewDeploymentForInstance(
    deploymentDashboardLocator: string,
    deploymentInstanceLocator: string,
    body?: DeploymentStateEntry,
    options?: RawAxiosRequestConfig
  ) {
    return DeploymentDashboardApiFp(this.configuration)
      .reportNewDeploymentForInstance(
        deploymentDashboardLocator,
        deploymentInstanceLocator,
        body,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Mute } from '../models';
// @ts-ignore
import type { Mutes } from '../models';

/**
 * MuteApi - axios parameter creator
 * @export
 */
export const MuteApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get all muted tests.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllMutedTests: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/mutes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a muted test.
     * @param {string} muteLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMutedTest: async (
      muteLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'muteLocator' is not null or undefined
      assertParamExists('getMutedTest', 'muteLocator', muteLocator);
      const localVarPath = `/app/rest/mutes/{muteLocator}`.replace(
        `{${'muteLocator'}}`,
        encodeURIComponent(String(muteLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Mute multiple tests.
     * @param {string} [fields]
     * @param {Mutes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteMultipleTests: async (
      fields?: string,
      body?: Mutes,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/mutes/multiple`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Mute a test.
     * @param {string} [fields]
     * @param {Mute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteTest: async (
      fields?: string,
      body?: Mute,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/mutes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unmute multiple tests.
     * @param {string} [fields]
     * @param {Mutes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteMultipleTests: async (
      fields?: string,
      body?: Mutes,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/mutes/multiple`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unmute the matching test.
     * @param {string} muteLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteTest: async (
      muteLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'muteLocator' is not null or undefined
      assertParamExists('unmuteTest', 'muteLocator', muteLocator);
      const localVarPath = `/app/rest/mutes/{muteLocator}`.replace(
        `{${'muteLocator'}}`,
        encodeURIComponent(String(muteLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MuteApi - functional programming interface
 * @export
 */
export const MuteApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MuteApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get all muted tests.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllMutedTests(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mutes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMutedTests(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MuteApi.getAllMutedTests']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a muted test.
     * @param {string} muteLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMutedTest(
      muteLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mute>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMutedTest(
        muteLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MuteApi.getMutedTest']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Mute multiple tests.
     * @param {string} [fields]
     * @param {Mutes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async muteMultipleTests(
      fields?: string,
      body?: Mutes,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mutes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.muteMultipleTests(
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MuteApi.muteMultipleTests']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Mute a test.
     * @param {string} [fields]
     * @param {Mute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async muteTest(
      fields?: string,
      body?: Mute,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mute>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.muteTest(fields, body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MuteApi.muteTest']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unmute multiple tests.
     * @param {string} [fields]
     * @param {Mutes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unmuteMultipleTests(
      fields?: string,
      body?: Mutes,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unmuteMultipleTests(
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MuteApi.unmuteMultipleTests']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unmute the matching test.
     * @param {string} muteLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unmuteTest(
      muteLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unmuteTest(
        muteLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MuteApi.unmuteTest']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MuteApi - factory interface
 * @export
 */
export const MuteApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MuteApiFp(configuration);
  return {
    /**
     *
     * @summary Get all muted tests.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllMutedTests(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Mutes> {
      return localVarFp
        .getAllMutedTests(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a muted test.
     * @param {string} muteLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMutedTest(
      muteLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Mute> {
      return localVarFp
        .getMutedTest(muteLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Mute multiple tests.
     * @param {string} [fields]
     * @param {Mutes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteMultipleTests(
      fields?: string,
      body?: Mutes,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Mutes> {
      return localVarFp
        .muteMultipleTests(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Mute a test.
     * @param {string} [fields]
     * @param {Mute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteTest(fields?: string, body?: Mute, options?: RawAxiosRequestConfig): AxiosPromise<Mute> {
      return localVarFp.muteTest(fields, body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unmute multiple tests.
     * @param {string} [fields]
     * @param {Mutes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteMultipleTests(
      fields?: string,
      body?: Mutes,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .unmuteMultipleTests(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unmute the matching test.
     * @param {string} muteLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteTest(
      muteLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .unmuteTest(muteLocator, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MuteApi - interface
 * @export
 * @interface MuteApi
 */
export interface MuteApiInterface {
  /**
   *
   * @summary Get all muted tests.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApiInterface
   */
  getAllMutedTests(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Mutes>;

  /**
   *
   * @summary Get a muted test.
   * @param {string} muteLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApiInterface
   */
  getMutedTest(
    muteLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Mute>;

  /**
   *
   * @summary Mute multiple tests.
   * @param {string} [fields]
   * @param {Mutes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApiInterface
   */
  muteMultipleTests(
    fields?: string,
    body?: Mutes,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Mutes>;

  /**
   *
   * @summary Mute a test.
   * @param {string} [fields]
   * @param {Mute} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApiInterface
   */
  muteTest(fields?: string, body?: Mute, options?: RawAxiosRequestConfig): AxiosPromise<Mute>;

  /**
   *
   * @summary Unmute multiple tests.
   * @param {string} [fields]
   * @param {Mutes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApiInterface
   */
  unmuteMultipleTests(
    fields?: string,
    body?: Mutes,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Unmute the matching test.
   * @param {string} muteLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApiInterface
   */
  unmuteTest(
    muteLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;
}

/**
 * MuteApi - object-oriented interface
 * @export
 * @class MuteApi
 * @extends {BaseAPI}
 */
export class MuteApi extends BaseAPI implements MuteApiInterface {
  /**
   *
   * @summary Get all muted tests.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApi
   */
  public getAllMutedTests(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return MuteApiFp(this.configuration)
      .getAllMutedTests(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a muted test.
   * @param {string} muteLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApi
   */
  public getMutedTest(muteLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return MuteApiFp(this.configuration)
      .getMutedTest(muteLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Mute multiple tests.
   * @param {string} [fields]
   * @param {Mutes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApi
   */
  public muteMultipleTests(fields?: string, body?: Mutes, options?: RawAxiosRequestConfig) {
    return MuteApiFp(this.configuration)
      .muteMultipleTests(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Mute a test.
   * @param {string} [fields]
   * @param {Mute} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApi
   */
  public muteTest(fields?: string, body?: Mute, options?: RawAxiosRequestConfig) {
    return MuteApiFp(this.configuration)
      .muteTest(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unmute multiple tests.
   * @param {string} [fields]
   * @param {Mutes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApi
   */
  public unmuteMultipleTests(fields?: string, body?: Mutes, options?: RawAxiosRequestConfig) {
    return MuteApiFp(this.configuration)
      .unmuteMultipleTests(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unmute the matching test.
   * @param {string} muteLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MuteApi
   */
  public unmuteTest(muteLocator: string, body?: string, options?: RawAxiosRequestConfig) {
    return MuteApiFp(this.configuration)
      .unmuteTest(muteLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

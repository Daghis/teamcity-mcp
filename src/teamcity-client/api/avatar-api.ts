/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';

/**
 * AvatarApi - axios parameter creator
 * @export
 */
export const AvatarApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Delete a users avatar
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAvatar: async (
      userLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('deleteAvatar', 'userLocator', userLocator);
      const localVarPath = `/app/rest/avatars/{userLocator}`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a users avatar
     * @param {string} userLocator
     * @param {number} size avatar\&#39;s size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvatar: async (
      userLocator: string,
      size: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getAvatar', 'userLocator', userLocator);
      // verify required parameter 'size' is not null or undefined
      assertParamExists('getAvatar', 'size', size);
      const localVarPath = `/app/rest/avatars/{userLocator}/{size}/avatar.png`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'size'}}`, encodeURIComponent(String(size)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a users avatar
     * @param {string} userLocator
     * @param {number} size avatar\&#39;s size
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvatarWithHash: async (
      userLocator: string,
      size: number,
      hash: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getAvatarWithHash', 'userLocator', userLocator);
      // verify required parameter 'size' is not null or undefined
      assertParamExists('getAvatarWithHash', 'size', size);
      // verify required parameter 'hash' is not null or undefined
      assertParamExists('getAvatarWithHash', 'hash', hash);
      const localVarPath = `/app/rest/avatars/{userLocator}/{size}/avatar.{hash}.png`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'size'}}`, encodeURIComponent(String(size)))
        .replace(`{${'hash'}}`, encodeURIComponent(String(hash)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a users avatar
     * @param {string} userLocator
     * @param {File} [avatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAvatar: async (
      userLocator: string,
      avatar?: File,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('putAvatar', 'userLocator', userLocator);
      const localVarPath = `/app/rest/avatars/{userLocator}`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

      if (avatar !== undefined) {
        localVarFormParams.append('avatar', avatar as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AvatarApi - functional programming interface
 * @export
 */
export const AvatarApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AvatarApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Delete a users avatar
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAvatar(
      userLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAvatar(userLocator, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AvatarApi.deleteAvatar']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a users avatar
     * @param {string} userLocator
     * @param {number} size avatar\&#39;s size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAvatar(
      userLocator: string,
      size: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatar(
        userLocator,
        size,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AvatarApi.getAvatar']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a users avatar
     * @param {string} userLocator
     * @param {number} size avatar\&#39;s size
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAvatarWithHash(
      userLocator: string,
      size: number,
      hash: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatarWithHash(
        userLocator,
        size,
        hash,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AvatarApi.getAvatarWithHash']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a users avatar
     * @param {string} userLocator
     * @param {File} [avatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putAvatar(
      userLocator: string,
      avatar?: File,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putAvatar(
        userLocator,
        avatar,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AvatarApi.putAvatar']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AvatarApi - factory interface
 * @export
 */
export const AvatarApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AvatarApiFp(configuration);
  return {
    /**
     *
     * @summary Delete a users avatar
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAvatar(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteAvatar(userLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a users avatar
     * @param {string} userLocator
     * @param {number} size avatar\&#39;s size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvatar(
      userLocator: string,
      size: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .getAvatar(userLocator, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a users avatar
     * @param {string} userLocator
     * @param {number} size avatar\&#39;s size
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvatarWithHash(
      userLocator: string,
      size: number,
      hash: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .getAvatarWithHash(userLocator, size, hash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a users avatar
     * @param {string} userLocator
     * @param {File} [avatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAvatar(
      userLocator: string,
      avatar?: File,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .putAvatar(userLocator, avatar, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AvatarApi - interface
 * @export
 * @interface AvatarApi
 */
export interface AvatarApiInterface {
  /**
   *
   * @summary Delete a users avatar
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApiInterface
   */
  deleteAvatar(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Get a users avatar
   * @param {string} userLocator
   * @param {number} size avatar\&#39;s size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApiInterface
   */
  getAvatar(userLocator: string, size: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Get a users avatar
   * @param {string} userLocator
   * @param {number} size avatar\&#39;s size
   * @param {string} hash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApiInterface
   */
  getAvatarWithHash(
    userLocator: string,
    size: number,
    hash: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Update a users avatar
   * @param {string} userLocator
   * @param {File} [avatar]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApiInterface
   */
  putAvatar(
    userLocator: string,
    avatar?: File,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;
}

/**
 * AvatarApi - object-oriented interface
 * @export
 * @class AvatarApi
 * @extends {BaseAPI}
 */
export class AvatarApi extends BaseAPI implements AvatarApiInterface {
  /**
   *
   * @summary Delete a users avatar
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApi
   */
  public deleteAvatar(userLocator: string, options?: RawAxiosRequestConfig) {
    return AvatarApiFp(this.configuration)
      .deleteAvatar(userLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a users avatar
   * @param {string} userLocator
   * @param {number} size avatar\&#39;s size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApi
   */
  public getAvatar(userLocator: string, size: number, options?: RawAxiosRequestConfig) {
    return AvatarApiFp(this.configuration)
      .getAvatar(userLocator, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a users avatar
   * @param {string} userLocator
   * @param {number} size avatar\&#39;s size
   * @param {string} hash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApi
   */
  public getAvatarWithHash(
    userLocator: string,
    size: number,
    hash: string,
    options?: RawAxiosRequestConfig
  ) {
    return AvatarApiFp(this.configuration)
      .getAvatarWithHash(userLocator, size, hash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a users avatar
   * @param {string} userLocator
   * @param {File} [avatar]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AvatarApi
   */
  public putAvatar(userLocator: string, avatar?: File, options?: RawAxiosRequestConfig) {
    return AvatarApiFp(this.configuration)
      .putAvatar(userLocator, avatar, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Builds } from '../models';
// @ts-ignore
import type { Change } from '../models';
// @ts-ignore
import type { Changes } from '../models';
// @ts-ignore
import type { Entries } from '../models';
// @ts-ignore
import type { Issues } from '../models';
// @ts-ignore
import type { Items } from '../models';
// @ts-ignore
import type { VcsRootInstance } from '../models';

/**
 * ChangeApi - axios parameter creator
 * @export
 */
export const ChangeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get all changes.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllChanges: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/changes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get change matching the locator.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChange: async (
      changeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChange', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get attributes of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeAttributes: async (
      changeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeAttributes', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}/attributes`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get duplicates of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeDuplicates: async (
      changeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeDuplicates', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}/duplicates`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a field of the matching change.
     * @param {string} changeLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeField: async (
      changeLocator: string,
      field: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeField', 'changeLocator', changeLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('getChangeField', 'field', field);
      const localVarPath = `/app/rest/changes/{changeLocator}/{field}`
        .replace(`{${'changeLocator'}}`, encodeURIComponent(String(changeLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get first builds of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeFirstBuilds: async (
      changeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeFirstBuilds', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}/firstBuilds`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get issues of the matching change.
     * @param {string} changeLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeIssue: async (
      changeLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeIssue', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}/issues`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get parent changes of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeParentChanges: async (
      changeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeParentChanges', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}/parentChanges`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get parent revisions of the matching change.
     * @param {string} changeLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeParentRevisions: async (
      changeLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeParentRevisions', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}/parentRevisions`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a VCS root instance of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeVcsRoot: async (
      changeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changeLocator' is not null or undefined
      assertParamExists('getChangeVcsRoot', 'changeLocator', changeLocator);
      const localVarPath = `/app/rest/changes/{changeLocator}/vcsRootInstance`.replace(
        `{${'changeLocator'}}`,
        encodeURIComponent(String(changeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ChangeApi - functional programming interface
 * @export
 */
export const ChangeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChangeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get all changes.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllChanges(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Changes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllChanges(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getAllChanges']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get change matching the locator.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChange(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Change>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChange(
        changeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChange']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get attributes of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeAttributes(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entries>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeAttributes(
        changeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeAttributes']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get duplicates of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeDuplicates(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Changes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeDuplicates(
        changeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeDuplicates']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a field of the matching change.
     * @param {string} changeLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeField(
      changeLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeField(
        changeLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get first builds of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeFirstBuilds(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Builds>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeFirstBuilds(
        changeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeFirstBuilds']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get issues of the matching change.
     * @param {string} changeLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeIssue(
      changeLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Issues>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeIssue(
        changeLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeIssue']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get parent changes of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeParentChanges(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Changes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeParentChanges(
        changeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeParentChanges']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get parent revisions of the matching change.
     * @param {string} changeLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeParentRevisions(
      changeLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Items>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeParentRevisions(
        changeLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeParentRevisions']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a VCS root instance of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChangeVcsRoot(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootInstance>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeVcsRoot(
        changeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ChangeApi.getChangeVcsRoot']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ChangeApi - factory interface
 * @export
 */
export const ChangeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ChangeApiFp(configuration);
  return {
    /**
     *
     * @summary Get all changes.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllChanges(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Changes> {
      return localVarFp
        .getAllChanges(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get change matching the locator.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChange(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Change> {
      return localVarFp
        .getChange(changeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get attributes of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeAttributes(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Entries> {
      return localVarFp
        .getChangeAttributes(changeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get duplicates of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeDuplicates(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Changes> {
      return localVarFp
        .getChangeDuplicates(changeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a field of the matching change.
     * @param {string} changeLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeField(
      changeLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getChangeField(changeLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get first builds of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeFirstBuilds(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Builds> {
      return localVarFp
        .getChangeFirstBuilds(changeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get issues of the matching change.
     * @param {string} changeLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeIssue(changeLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<Issues> {
      return localVarFp
        .getChangeIssue(changeLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get parent changes of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeParentChanges(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Changes> {
      return localVarFp
        .getChangeParentChanges(changeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get parent revisions of the matching change.
     * @param {string} changeLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeParentRevisions(
      changeLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Items> {
      return localVarFp
        .getChangeParentRevisions(changeLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a VCS root instance of the matching change.
     * @param {string} changeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChangeVcsRoot(
      changeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootInstance> {
      return localVarFp
        .getChangeVcsRoot(changeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ChangeApi - interface
 * @export
 * @interface ChangeApi
 */
export interface ChangeApiInterface {
  /**
   *
   * @summary Get all changes.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getAllChanges(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Changes>;

  /**
   *
   * @summary Get change matching the locator.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChange(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Change>;

  /**
   *
   * @summary Get attributes of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeAttributes(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Entries>;

  /**
   *
   * @summary Get duplicates of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeDuplicates(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Changes>;

  /**
   *
   * @summary Get a field of the matching change.
   * @param {string} changeLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeField(
    changeLocator: string,
    field: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get first builds of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeFirstBuilds(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Builds>;

  /**
   *
   * @summary Get issues of the matching change.
   * @param {string} changeLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeIssue(changeLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<Issues>;

  /**
   *
   * @summary Get parent changes of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeParentChanges(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Changes>;

  /**
   *
   * @summary Get parent revisions of the matching change.
   * @param {string} changeLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeParentRevisions(
    changeLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Items>;

  /**
   *
   * @summary Get a VCS root instance of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApiInterface
   */
  getChangeVcsRoot(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootInstance>;
}

/**
 * ChangeApi - object-oriented interface
 * @export
 * @class ChangeApi
 * @extends {BaseAPI}
 */
export class ChangeApi extends BaseAPI implements ChangeApiInterface {
  /**
   *
   * @summary Get all changes.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getAllChanges(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return ChangeApiFp(this.configuration)
      .getAllChanges(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get change matching the locator.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChange(changeLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return ChangeApiFp(this.configuration)
      .getChange(changeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get attributes of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeAttributes(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ChangeApiFp(this.configuration)
      .getChangeAttributes(changeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get duplicates of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeDuplicates(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ChangeApiFp(this.configuration)
      .getChangeDuplicates(changeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a field of the matching change.
   * @param {string} changeLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeField(changeLocator: string, field: string, options?: RawAxiosRequestConfig) {
    return ChangeApiFp(this.configuration)
      .getChangeField(changeLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get first builds of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeFirstBuilds(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ChangeApiFp(this.configuration)
      .getChangeFirstBuilds(changeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get issues of the matching change.
   * @param {string} changeLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeIssue(changeLocator: string, options?: RawAxiosRequestConfig) {
    return ChangeApiFp(this.configuration)
      .getChangeIssue(changeLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get parent changes of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeParentChanges(
    changeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ChangeApiFp(this.configuration)
      .getChangeParentChanges(changeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get parent revisions of the matching change.
   * @param {string} changeLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeParentRevisions(changeLocator: string, options?: RawAxiosRequestConfig) {
    return ChangeApiFp(this.configuration)
      .getChangeParentRevisions(changeLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a VCS root instance of the matching change.
   * @param {string} changeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChangeApi
   */
  public getChangeVcsRoot(changeLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return ChangeApiFp(this.configuration)
      .getChangeVcsRoot(changeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

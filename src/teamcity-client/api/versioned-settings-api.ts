/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Projects } from '../models';
// @ts-ignore
import type { VersionedSettingsConfig } from '../models';
// @ts-ignore
import type { VersionedSettingsContextParameters } from '../models';
// @ts-ignore
import type { VersionedSettingsStatus } from '../models';
// @ts-ignore
import type { VersionedSettingsTokens } from '../models';

/**
 * VersionedSettingsApi - axios parameter creator
 * @export
 */
export const VersionedSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add Versioned Settings Tokens.
     * @param {string} locator
     * @param {VersionedSettingsTokens} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVersionedSettingsTokens: async (
      locator: string,
      body?: VersionedSettingsTokens,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('addVersionedSettingsTokens', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/tokens`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Check for changes in Versioned Settings.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkForVersionedSettingsChanges: async (
      locator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('checkForVersionedSettingsChanges', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/checkForChanges`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Perform Versioned Settings action: Commit current settings to VCS.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commitCurrentSettings: async (
      locator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('commitCurrentSettings', 'locator', locator);
      const localVarPath =
        `/app/rest/projects/{locator}/versionedSettings/commitCurrentSettings`.replace(
          `{${'locator'}}`,
          encodeURIComponent(String(locator))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersionedSettingsConfigParameter: async (
      locator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('deleteVersionedSettingsConfigParameter', 'locator', locator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deleteVersionedSettingsConfigParameter', 'name', name);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}`
        .replace(`{${'locator'}}`, encodeURIComponent(String(locator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Versioned Settings Tokens.
     * @param {string} locator
     * @param {VersionedSettingsTokens} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersionedSettingsTokens: async (
      locator: string,
      body?: VersionedSettingsTokens,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('deleteVersionedSettingsTokens', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/tokens`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Versioned Settings config.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsConfig: async (
      locator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('getVersionedSettingsConfig', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/config`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsConfigParameter: async (
      locator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('getVersionedSettingsConfigParameter', 'locator', locator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getVersionedSettingsConfigParameter', 'name', name);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}`
        .replace(`{${'locator'}}`, encodeURIComponent(String(locator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Versioned Settings Context Parameters.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsContextParameters: async (
      locator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('getVersionedSettingsContextParameters', 'locator', locator);
      const localVarPath =
        `/app/rest/projects/{locator}/versionedSettings/contextParameters`.replace(
          `{${'locator'}}`,
          encodeURIComponent(String(locator))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a list of projects that are affected by Load Settings from VCS action.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsProjectsToLoad: async (
      locator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('getVersionedSettingsProjectsToLoad', 'locator', locator);
      const localVarPath =
        `/app/rest/projects/{locator}/versionedSettings/affectedProjects`.replace(
          `{${'locator'}}`,
          encodeURIComponent(String(locator))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get current status of Versioned Settings.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsStatus: async (
      locator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('getVersionedSettingsStatus', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/status`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Versioned Settings Tokens.
     * @param {string} locator
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsTokens: async (
      locator: string,
      status?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('getVersionedSettingsTokens', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/tokens`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (status !== undefined) {
        localVarQueryParameter['status'] = String(status);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Perform Versioned Settings action: Load Setting from VCS.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loadSettingsFromVCS: async (
      locator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('loadSettingsFromVCS', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/loadSettings`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set Verseioned Settings config.
     * @param {string} locator
     * @param {string} [fields]
     * @param {VersionedSettingsConfig} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVersionedSettingsConfig: async (
      locator: string,
      fields?: string,
      body?: VersionedSettingsConfig,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('setVersionedSettingsConfig', 'locator', locator);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/config`.replace(
        `{${'locator'}}`,
        encodeURIComponent(String(locator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVersionedSettingsConfigParameter: async (
      locator: string,
      name: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('setVersionedSettingsConfigParameter', 'locator', locator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('setVersionedSettingsConfigParameter', 'name', name);
      const localVarPath = `/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}`
        .replace(`{${'locator'}}`, encodeURIComponent(String(locator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set Versioned Settings Context Parameters.
     * @param {string} locator
     * @param {VersionedSettingsContextParameters} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVersionedSettingsContextParameters: async (
      locator: string,
      body?: VersionedSettingsContextParameters,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'locator' is not null or undefined
      assertParamExists('setVersionedSettingsContextParameters', 'locator', locator);
      const localVarPath =
        `/app/rest/projects/{locator}/versionedSettings/contextParameters`.replace(
          `{${'locator'}}`,
          encodeURIComponent(String(locator))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VersionedSettingsApi - functional programming interface
 * @export
 */
export const VersionedSettingsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VersionedSettingsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add Versioned Settings Tokens.
     * @param {string} locator
     * @param {VersionedSettingsTokens} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addVersionedSettingsTokens(
      locator: string,
      body?: VersionedSettingsTokens,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsTokens>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addVersionedSettingsTokens(
        locator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.addVersionedSettingsTokens']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Check for changes in Versioned Settings.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkForVersionedSettingsChanges(
      locator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.checkForVersionedSettingsChanges(
        locator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.checkForVersionedSettingsChanges']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Perform Versioned Settings action: Commit current settings to VCS.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commitCurrentSettings(
      locator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.commitCurrentSettings(
        locator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.commitCurrentSettings']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVersionedSettingsConfigParameter(
      locator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteVersionedSettingsConfigParameter(
          locator,
          name,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.deleteVersionedSettingsConfigParameter']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete Versioned Settings Tokens.
     * @param {string} locator
     * @param {VersionedSettingsTokens} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVersionedSettingsTokens(
      locator: string,
      body?: VersionedSettingsTokens,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsTokens>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVersionedSettingsTokens(
        locator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.deleteVersionedSettingsTokens']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get Versioned Settings config.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionedSettingsConfig(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsConfig>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionedSettingsConfig(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.getVersionedSettingsConfig']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionedSettingsConfigParameter(
      locator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionedSettingsConfigParameter(
        locator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.getVersionedSettingsConfigParameter']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get Versioned Settings Context Parameters.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionedSettingsContextParameters(
      locator: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsContextParameters>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getVersionedSettingsContextParameters(locator, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.getVersionedSettingsContextParameters']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a list of projects that are affected by Load Settings from VCS action.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionedSettingsProjectsToLoad(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projects>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionedSettingsProjectsToLoad(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.getVersionedSettingsProjectsToLoad']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get current status of Versioned Settings.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionedSettingsStatus(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsStatus>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionedSettingsStatus(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.getVersionedSettingsStatus']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get Versioned Settings Tokens.
     * @param {string} locator
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionedSettingsTokens(
      locator: string,
      status?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsTokens>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionedSettingsTokens(
        locator,
        status,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.getVersionedSettingsTokens']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Perform Versioned Settings action: Load Setting from VCS.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loadSettingsFromVCS(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projects>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loadSettingsFromVCS(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.loadSettingsFromVCS']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Set Verseioned Settings config.
     * @param {string} locator
     * @param {string} [fields]
     * @param {VersionedSettingsConfig} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setVersionedSettingsConfig(
      locator: string,
      fields?: string,
      body?: VersionedSettingsConfig,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsConfig>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setVersionedSettingsConfig(
        locator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.setVersionedSettingsConfig']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Set Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setVersionedSettingsConfigParameter(
      locator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setVersionedSettingsConfigParameter(
        locator,
        name,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.setVersionedSettingsConfigParameter']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Set Versioned Settings Context Parameters.
     * @param {string} locator
     * @param {VersionedSettingsContextParameters} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setVersionedSettingsContextParameters(
      locator: string,
      body?: VersionedSettingsContextParameters,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionedSettingsContextParameters>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.setVersionedSettingsContextParameters(
          locator,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VersionedSettingsApi.setVersionedSettingsContextParameters']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * VersionedSettingsApi - factory interface
 * @export
 */
export const VersionedSettingsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = VersionedSettingsApiFp(configuration);
  return {
    /**
     *
     * @summary Add Versioned Settings Tokens.
     * @param {string} locator
     * @param {VersionedSettingsTokens} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVersionedSettingsTokens(
      locator: string,
      body?: VersionedSettingsTokens,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsTokens> {
      return localVarFp
        .addVersionedSettingsTokens(locator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Check for changes in Versioned Settings.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkForVersionedSettingsChanges(
      locator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .checkForVersionedSettingsChanges(locator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Perform Versioned Settings action: Commit current settings to VCS.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commitCurrentSettings(locator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .commitCurrentSettings(locator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersionedSettingsConfigParameter(
      locator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteVersionedSettingsConfigParameter(locator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Versioned Settings Tokens.
     * @param {string} locator
     * @param {VersionedSettingsTokens} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersionedSettingsTokens(
      locator: string,
      body?: VersionedSettingsTokens,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsTokens> {
      return localVarFp
        .deleteVersionedSettingsTokens(locator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Versioned Settings config.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsConfig(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsConfig> {
      return localVarFp
        .getVersionedSettingsConfig(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsConfigParameter(
      locator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getVersionedSettingsConfigParameter(locator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Versioned Settings Context Parameters.
     * @param {string} locator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsContextParameters(
      locator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsContextParameters> {
      return localVarFp
        .getVersionedSettingsContextParameters(locator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a list of projects that are affected by Load Settings from VCS action.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsProjectsToLoad(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Projects> {
      return localVarFp
        .getVersionedSettingsProjectsToLoad(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get current status of Versioned Settings.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsStatus(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsStatus> {
      return localVarFp
        .getVersionedSettingsStatus(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Versioned Settings Tokens.
     * @param {string} locator
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionedSettingsTokens(
      locator: string,
      status?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsTokens> {
      return localVarFp
        .getVersionedSettingsTokens(locator, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Perform Versioned Settings action: Load Setting from VCS.
     * @param {string} locator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loadSettingsFromVCS(
      locator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Projects> {
      return localVarFp
        .loadSettingsFromVCS(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set Verseioned Settings config.
     * @param {string} locator
     * @param {string} [fields]
     * @param {VersionedSettingsConfig} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVersionedSettingsConfig(
      locator: string,
      fields?: string,
      body?: VersionedSettingsConfig,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsConfig> {
      return localVarFp
        .setVersionedSettingsConfig(locator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set Versioned Settings config parameter value.
     * @param {string} locator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVersionedSettingsConfigParameter(
      locator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setVersionedSettingsConfigParameter(locator, name, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set Versioned Settings Context Parameters.
     * @param {string} locator
     * @param {VersionedSettingsContextParameters} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVersionedSettingsContextParameters(
      locator: string,
      body?: VersionedSettingsContextParameters,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VersionedSettingsContextParameters> {
      return localVarFp
        .setVersionedSettingsContextParameters(locator, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VersionedSettingsApi - interface
 * @export
 * @interface VersionedSettingsApi
 */
export interface VersionedSettingsApiInterface {
  /**
   *
   * @summary Add Versioned Settings Tokens.
   * @param {string} locator
   * @param {VersionedSettingsTokens} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  addVersionedSettingsTokens(
    locator: string,
    body?: VersionedSettingsTokens,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsTokens>;

  /**
   *
   * @summary Check for changes in Versioned Settings.
   * @param {string} locator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  checkForVersionedSettingsChanges(
    locator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Perform Versioned Settings action: Commit current settings to VCS.
   * @param {string} locator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  commitCurrentSettings(locator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Delete Versioned Settings config parameter value.
   * @param {string} locator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  deleteVersionedSettingsConfigParameter(
    locator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete Versioned Settings Tokens.
   * @param {string} locator
   * @param {VersionedSettingsTokens} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  deleteVersionedSettingsTokens(
    locator: string,
    body?: VersionedSettingsTokens,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsTokens>;

  /**
   *
   * @summary Get Versioned Settings config.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  getVersionedSettingsConfig(
    locator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsConfig>;

  /**
   *
   * @summary Get Versioned Settings config parameter value.
   * @param {string} locator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  getVersionedSettingsConfigParameter(
    locator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get Versioned Settings Context Parameters.
   * @param {string} locator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  getVersionedSettingsContextParameters(
    locator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsContextParameters>;

  /**
   *
   * @summary Get a list of projects that are affected by Load Settings from VCS action.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  getVersionedSettingsProjectsToLoad(
    locator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Projects>;

  /**
   *
   * @summary Get current status of Versioned Settings.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  getVersionedSettingsStatus(
    locator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsStatus>;

  /**
   *
   * @summary Get Versioned Settings Tokens.
   * @param {string} locator
   * @param {string} [status]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  getVersionedSettingsTokens(
    locator: string,
    status?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsTokens>;

  /**
   *
   * @summary Perform Versioned Settings action: Load Setting from VCS.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  loadSettingsFromVCS(
    locator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Projects>;

  /**
   *
   * @summary Set Verseioned Settings config.
   * @param {string} locator
   * @param {string} [fields]
   * @param {VersionedSettingsConfig} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  setVersionedSettingsConfig(
    locator: string,
    fields?: string,
    body?: VersionedSettingsConfig,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsConfig>;

  /**
   *
   * @summary Set Versioned Settings config parameter value.
   * @param {string} locator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  setVersionedSettingsConfigParameter(
    locator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Set Versioned Settings Context Parameters.
   * @param {string} locator
   * @param {VersionedSettingsContextParameters} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApiInterface
   */
  setVersionedSettingsContextParameters(
    locator: string,
    body?: VersionedSettingsContextParameters,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VersionedSettingsContextParameters>;
}

/**
 * VersionedSettingsApi - object-oriented interface
 * @export
 * @class VersionedSettingsApi
 * @extends {BaseAPI}
 */
export class VersionedSettingsApi extends BaseAPI implements VersionedSettingsApiInterface {
  /**
   *
   * @summary Add Versioned Settings Tokens.
   * @param {string} locator
   * @param {VersionedSettingsTokens} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public addVersionedSettingsTokens(
    locator: string,
    body?: VersionedSettingsTokens,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .addVersionedSettingsTokens(locator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Check for changes in Versioned Settings.
   * @param {string} locator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public checkForVersionedSettingsChanges(locator: string, options?: RawAxiosRequestConfig) {
    return VersionedSettingsApiFp(this.configuration)
      .checkForVersionedSettingsChanges(locator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Perform Versioned Settings action: Commit current settings to VCS.
   * @param {string} locator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public commitCurrentSettings(locator: string, options?: RawAxiosRequestConfig) {
    return VersionedSettingsApiFp(this.configuration)
      .commitCurrentSettings(locator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Versioned Settings config parameter value.
   * @param {string} locator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public deleteVersionedSettingsConfigParameter(
    locator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .deleteVersionedSettingsConfigParameter(locator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Versioned Settings Tokens.
   * @param {string} locator
   * @param {VersionedSettingsTokens} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public deleteVersionedSettingsTokens(
    locator: string,
    body?: VersionedSettingsTokens,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .deleteVersionedSettingsTokens(locator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Versioned Settings config.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public getVersionedSettingsConfig(
    locator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .getVersionedSettingsConfig(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Versioned Settings config parameter value.
   * @param {string} locator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public getVersionedSettingsConfigParameter(
    locator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .getVersionedSettingsConfigParameter(locator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Versioned Settings Context Parameters.
   * @param {string} locator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public getVersionedSettingsContextParameters(locator: string, options?: RawAxiosRequestConfig) {
    return VersionedSettingsApiFp(this.configuration)
      .getVersionedSettingsContextParameters(locator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a list of projects that are affected by Load Settings from VCS action.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public getVersionedSettingsProjectsToLoad(
    locator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .getVersionedSettingsProjectsToLoad(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get current status of Versioned Settings.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public getVersionedSettingsStatus(
    locator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .getVersionedSettingsStatus(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Versioned Settings Tokens.
   * @param {string} locator
   * @param {string} [status]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public getVersionedSettingsTokens(
    locator: string,
    status?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .getVersionedSettingsTokens(locator, status, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Perform Versioned Settings action: Load Setting from VCS.
   * @param {string} locator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public loadSettingsFromVCS(locator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return VersionedSettingsApiFp(this.configuration)
      .loadSettingsFromVCS(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Set Verseioned Settings config.
   * @param {string} locator
   * @param {string} [fields]
   * @param {VersionedSettingsConfig} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public setVersionedSettingsConfig(
    locator: string,
    fields?: string,
    body?: VersionedSettingsConfig,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .setVersionedSettingsConfig(locator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Set Versioned Settings config parameter value.
   * @param {string} locator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public setVersionedSettingsConfigParameter(
    locator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .setVersionedSettingsConfigParameter(locator, name, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Set Versioned Settings Context Parameters.
   * @param {string} locator
   * @param {VersionedSettingsContextParameters} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionedSettingsApi
   */
  public setVersionedSettingsContextParameters(
    locator: string,
    body?: VersionedSettingsContextParameters,
    options?: RawAxiosRequestConfig
  ) {
    return VersionedSettingsApiFp(this.configuration)
      .setVersionedSettingsContextParameters(locator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

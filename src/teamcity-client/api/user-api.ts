/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Group } from '../models';
// @ts-ignore
import type { Groups } from '../models';
// @ts-ignore
import type { PermissionAssignments } from '../models';
// @ts-ignore
import type { Properties } from '../models';
// @ts-ignore
import type { Role } from '../models';
// @ts-ignore
import type { Roles } from '../models';
// @ts-ignore
import type { Token } from '../models';
// @ts-ignore
import type { Tokens } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { Users } from '../models';

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a role to the matching user.
     * @param {string} userLocator
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleToUser: async (
      userLocator: string,
      body?: Role,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('addRoleToUser', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/roles`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a role with the specific scope to the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleToUserAtScope: async (
      userLocator: string,
      roleId: string,
      scope: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('addRoleToUserAtScope', 'userLocator', userLocator);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('addRoleToUserAtScope', 'roleId', roleId);
      // verify required parameter 'scope' is not null or undefined
      assertParamExists('addRoleToUserAtScope', 'scope', scope);
      const localVarPath = `/app/rest/users/{userLocator}/roles/{roleId}/{scope}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'scope'}}`, encodeURIComponent(String(scope)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new user.
     * @param {string} [fields]
     * @param {User} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser: async (
      fields?: string,
      body?: User,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new authentication token for the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {Token} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToken: async (
      userLocator: string,
      fields?: string,
      body?: Token,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('addUserToken', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/tokens`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete user matching the locator.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      userLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('deleteUser', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a property of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserField: async (
      userLocator: string,
      field: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('deleteUserField', 'userLocator', userLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('deleteUserField', 'field', field);
      const localVarPath = `/app/rest/users/{userLocator}/{field}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove an authentication token from the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserToken: async (
      userLocator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('deleteUserToken', 'userLocator', userLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deleteUserToken', 'name', name);
      const localVarPath = `/app/rest/users/{userLocator}/tokens/{name}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all groups of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserGroups: async (
      userLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getAllUserGroups', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/groups`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all user roles of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserRoles: async (
      userLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getAllUserRoles', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/roles`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all users.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user matching the locator.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      userLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUser', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a field of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserField: async (
      userLocator: string,
      field: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUserField', 'userLocator', userLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('getUserField', 'field', field);
      const localVarPath = `/app/rest/users/{userLocator}/{field}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a user group of the matching user.
     * @param {string} userLocator
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroup: async (
      userLocator: string,
      groupLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUserGroup', 'userLocator', userLocator);
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('getUserGroup', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/users/{userLocator}/groups/{groupLocator}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all permissions effective for the matching user.
     * @param {string} userLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions: async (
      userLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUserPermissions', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/permissions`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all properties of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProperties: async (
      userLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUserProperties', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/properties`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProperty: async (
      userLocator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUserProperty', 'userLocator', userLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getUserProperty', 'name', name);
      const localVarPath = `/app/rest/users/{userLocator}/properties/{name}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a user role with the specific scope from the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRolesAtScope: async (
      userLocator: string,
      roleId: string,
      scope: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUserRolesAtScope', 'userLocator', userLocator);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('getUserRolesAtScope', 'roleId', roleId);
      // verify required parameter 'scope' is not null or undefined
      assertParamExists('getUserRolesAtScope', 'scope', scope);
      const localVarPath = `/app/rest/users/{userLocator}/roles/{roleId}/{scope}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'scope'}}`, encodeURIComponent(String(scope)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all authentication tokens of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokens: async (
      userLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('getUserTokens', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/tokens`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Terminate all current sessions of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser: async (
      userLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('logoutUser', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/logout`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove the matching user from the specific group.
     * @param {string} userLocator
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserFromGroup: async (
      userLocator: string,
      groupLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('removeUserFromGroup', 'userLocator', userLocator);
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('removeUserFromGroup', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/users/{userLocator}/groups/{groupLocator}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserProperty: async (
      userLocator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('removeUserProperty', 'userLocator', userLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('removeUserProperty', 'name', name);
      const localVarPath = `/app/rest/users/{userLocator}/properties/{name}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove the RememberMe data of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserRememberMe: async (
      userLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('removeUserRememberMe', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/debug/rememberMe`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a role with the specific scope from the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserRoleAtScope: async (
      userLocator: string,
      roleId: string,
      scope: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('removeUserRoleAtScope', 'userLocator', userLocator);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('removeUserRoleAtScope', 'roleId', roleId);
      // verify required parameter 'scope' is not null or undefined
      assertParamExists('removeUserRoleAtScope', 'scope', scope);
      const localVarPath = `/app/rest/users/{userLocator}/roles/{roleId}/{scope}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'scope'}}`, encodeURIComponent(String(scope)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user matching the locator.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {User} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceUser: async (
      userLocator: string,
      fields?: string,
      body?: User,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('replaceUser', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a field of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserField: async (
      userLocator: string,
      field: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('setUserField', 'userLocator', userLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('setUserField', 'field', field);
      const localVarPath = `/app/rest/users/{userLocator}/{field}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update groups of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {Groups} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserGroups: async (
      userLocator: string,
      fields?: string,
      body?: Groups,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('setUserGroups', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/groups`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserProperty: async (
      userLocator: string,
      name: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('setUserProperty', 'userLocator', userLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('setUserProperty', 'name', name);
      const localVarPath = `/app/rest/users/{userLocator}/properties/{name}`
        .replace(`{${'userLocator'}}`, encodeURIComponent(String(userLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user roles of the matching user.
     * @param {string} userLocator
     * @param {Roles} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserRoles: async (
      userLocator: string,
      body?: Roles,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLocator' is not null or undefined
      assertParamExists('setUserRoles', 'userLocator', userLocator);
      const localVarPath = `/app/rest/users/{userLocator}/roles`.replace(
        `{${'userLocator'}}`,
        encodeURIComponent(String(userLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add a role to the matching user.
     * @param {string} userLocator
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addRoleToUser(
      userLocator: string,
      body?: Role,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleToUser(
        userLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.addRoleToUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a role with the specific scope to the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addRoleToUserAtScope(
      userLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleToUserAtScope(
        userLocator,
        roleId,
        scope,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.addRoleToUserAtScope']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new user.
     * @param {string} [fields]
     * @param {User} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUser(
      fields?: string,
      body?: User,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(fields, body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.addUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new authentication token for the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {Token} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUserToken(
      userLocator: string,
      fields?: string,
      body?: Token,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToken(
        userLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.addUserToken']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete user matching the locator.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      userLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userLocator, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.deleteUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a property of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserField(
      userLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserField(
        userLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.deleteUserField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove an authentication token from the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserToken(
      userLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserToken(
        userLocator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.deleteUserToken']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all groups of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUserGroups(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Groups>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserGroups(
        userLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getAllUserGroups']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all user roles of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUserRoles(
      userLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserRoles(
        userLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getAllUserRoles']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all users.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUsers(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get user matching the locator.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        userLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a field of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserField(
      userLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserField(
        userLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a user group of the matching user.
     * @param {string} userLocator
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserGroup(
      userLocator: string,
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroup(
        userLocator,
        groupLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserGroup']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all permissions effective for the matching user.
     * @param {string} userLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserPermissions(
      userLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionAssignments>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPermissions(
        userLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserPermissions']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all properties of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserProperties(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProperties(
        userLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserProperties']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserProperty(
      userLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProperty(
        userLocator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a user role with the specific scope from the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserRolesAtScope(
      userLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRolesAtScope(
        userLocator,
        roleId,
        scope,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserRolesAtScope']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all authentication tokens of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserTokens(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tokens>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTokens(
        userLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserTokens']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Terminate all current sessions of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logoutUser(
      userLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logoutUser(userLocator, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.logoutUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove the matching user from the specific group.
     * @param {string} userLocator
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserFromGroup(
      userLocator: string,
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromGroup(
        userLocator,
        groupLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.removeUserFromGroup']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserProperty(
      userLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserProperty(
        userLocator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.removeUserProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove the RememberMe data of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserRememberMe(
      userLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserRememberMe(
        userLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.removeUserRememberMe']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a role with the specific scope from the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserRoleAtScope(
      userLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserRoleAtScope(
        userLocator,
        roleId,
        scope,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.removeUserRoleAtScope']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user matching the locator.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {User} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceUser(
      userLocator: string,
      fields?: string,
      body?: User,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceUser(
        userLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.replaceUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a field of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setUserField(
      userLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setUserField(
        userLocator,
        field,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.setUserField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update groups of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {Groups} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setUserGroups(
      userLocator: string,
      fields?: string,
      body?: Groups,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Groups>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setUserGroups(
        userLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.setUserGroups']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setUserProperty(
      userLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setUserProperty(
        userLocator,
        name,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.setUserProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user roles of the matching user.
     * @param {string} userLocator
     * @param {Roles} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setUserRoles(
      userLocator: string,
      body?: Roles,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setUserRoles(
        userLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.setUserRoles']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Add a role to the matching user.
     * @param {string} userLocator
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleToUser(
      userLocator: string,
      body?: Role,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .addRoleToUser(userLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a role with the specific scope to the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleToUserAtScope(
      userLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .addRoleToUserAtScope(userLocator, roleId, scope, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new user.
     * @param {string} [fields]
     * @param {User} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser(fields?: string, body?: User, options?: RawAxiosRequestConfig): AxiosPromise<User> {
      return localVarFp.addUser(fields, body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new authentication token for the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {Token} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToken(
      userLocator: string,
      fields?: string,
      body?: Token,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Token> {
      return localVarFp
        .addUserToken(userLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete user matching the locator.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteUser(userLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a property of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserField(
      userLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteUserField(userLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove an authentication token from the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserToken(
      userLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteUserToken(userLocator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all groups of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserGroups(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Groups> {
      return localVarFp
        .getAllUserGroups(userLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all user roles of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserRoles(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<Roles> {
      return localVarFp
        .getAllUserRoles(userLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all users.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Users> {
      return localVarFp
        .getAllUsers(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user matching the locator.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<User> {
      return localVarFp
        .getUser(userLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a field of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserField(
      userLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getUserField(userLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a user group of the matching user.
     * @param {string} userLocator
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroup(
      userLocator: string,
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Group> {
      return localVarFp
        .getUserGroup(userLocator, groupLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all permissions effective for the matching user.
     * @param {string} userLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions(
      userLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PermissionAssignments> {
      return localVarFp
        .getUserPermissions(userLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all properties of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProperties(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getUserProperties(userLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProperty(
      userLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getUserProperty(userLocator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a user role with the specific scope from the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRolesAtScope(
      userLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .getUserRolesAtScope(userLocator, roleId, scope, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all authentication tokens of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokens(
      userLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Tokens> {
      return localVarFp
        .getUserTokens(userLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Terminate all current sessions of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .logoutUser(userLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove the matching user from the specific group.
     * @param {string} userLocator
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserFromGroup(
      userLocator: string,
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeUserFromGroup(userLocator, groupLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserProperty(
      userLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeUserProperty(userLocator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove the RememberMe data of the matching user.
     * @param {string} userLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserRememberMe(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .removeUserRememberMe(userLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a role with the specific scope from the matching user.
     * @param {string} userLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserRoleAtScope(
      userLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeUserRoleAtScope(userLocator, roleId, scope, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user matching the locator.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {User} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceUser(
      userLocator: string,
      fields?: string,
      body?: User,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<User> {
      return localVarFp
        .replaceUser(userLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a field of the matching user.
     * @param {string} userLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserField(
      userLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setUserField(userLocator, field, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update groups of the matching user.
     * @param {string} userLocator
     * @param {string} [fields]
     * @param {Groups} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserGroups(
      userLocator: string,
      fields?: string,
      body?: Groups,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Groups> {
      return localVarFp
        .setUserGroups(userLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a property of the matching user.
     * @param {string} userLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserProperty(
      userLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setUserProperty(userLocator, name, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user roles of the matching user.
     * @param {string} userLocator
     * @param {Roles} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserRoles(
      userLocator: string,
      body?: Roles,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Roles> {
      return localVarFp
        .setUserRoles(userLocator, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
  /**
   *
   * @summary Add a role to the matching user.
   * @param {string} userLocator
   * @param {Role} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  addRoleToUser(
    userLocator: string,
    body?: Role,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Add a role with the specific scope to the matching user.
   * @param {string} userLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  addRoleToUserAtScope(
    userLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Create a new user.
   * @param {string} [fields]
   * @param {User} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  addUser(fields?: string, body?: User, options?: RawAxiosRequestConfig): AxiosPromise<User>;

  /**
   *
   * @summary Create a new authentication token for the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {Token} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  addUserToken(
    userLocator: string,
    fields?: string,
    body?: Token,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Token>;

  /**
   *
   * @summary Delete user matching the locator.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  deleteUser(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Remove a property of the matching user.
   * @param {string} userLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  deleteUserField(
    userLocator: string,
    field: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Remove an authentication token from the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  deleteUserToken(
    userLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Get all groups of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getAllUserGroups(
    userLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Groups>;

  /**
   *
   * @summary Get all user roles of the matching user.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getAllUserRoles(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<Roles>;

  /**
   *
   * @summary Get all users.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getAllUsers(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Users>;

  /**
   *
   * @summary Get user matching the locator.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUser(
    userLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<User>;

  /**
   *
   * @summary Get a field of the matching user.
   * @param {string} userLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUserField(
    userLocator: string,
    field: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get a user group of the matching user.
   * @param {string} userLocator
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUserGroup(
    userLocator: string,
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Group>;

  /**
   *
   * @summary Get all permissions effective for the matching user.
   * @param {string} userLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUserPermissions(
    userLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<PermissionAssignments>;

  /**
   *
   * @summary Get all properties of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUserProperties(
    userLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get a property of the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUserProperty(
    userLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get a user role with the specific scope from the matching user.
   * @param {string} userLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUserRolesAtScope(
    userLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Get all authentication tokens of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUserTokens(
    userLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Tokens>;

  /**
   *
   * @summary Terminate all current sessions of the matching user.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  logoutUser(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Remove the matching user from the specific group.
   * @param {string} userLocator
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  removeUserFromGroup(
    userLocator: string,
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Remove a property of the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  removeUserProperty(
    userLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Remove the RememberMe data of the matching user.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  removeUserRememberMe(userLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Remove a role with the specific scope from the matching user.
   * @param {string} userLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  removeUserRoleAtScope(
    userLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Update user matching the locator.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {User} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  replaceUser(
    userLocator: string,
    fields?: string,
    body?: User,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<User>;

  /**
   *
   * @summary Update a field of the matching user.
   * @param {string} userLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  setUserField(
    userLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update groups of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {Groups} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  setUserGroups(
    userLocator: string,
    fields?: string,
    body?: Groups,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Groups>;

  /**
   *
   * @summary Update a property of the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  setUserProperty(
    userLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update user roles of the matching user.
   * @param {string} userLocator
   * @param {Roles} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  setUserRoles(
    userLocator: string,
    body?: Roles,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Roles>;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
  /**
   *
   * @summary Add a role to the matching user.
   * @param {string} userLocator
   * @param {Role} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public addRoleToUser(userLocator: string, body?: Role, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .addRoleToUser(userLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a role with the specific scope to the matching user.
   * @param {string} userLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public addRoleToUserAtScope(
    userLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .addRoleToUserAtScope(userLocator, roleId, scope, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new user.
   * @param {string} [fields]
   * @param {User} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public addUser(fields?: string, body?: User, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .addUser(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new authentication token for the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {Token} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public addUserToken(
    userLocator: string,
    fields?: string,
    body?: Token,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .addUserToken(userLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete user matching the locator.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUser(userLocator: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .deleteUser(userLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a property of the matching user.
   * @param {string} userLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUserField(userLocator: string, field: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .deleteUserField(userLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove an authentication token from the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUserToken(userLocator: string, name: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .deleteUserToken(userLocator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all groups of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getAllUserGroups(userLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getAllUserGroups(userLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all user roles of the matching user.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getAllUserRoles(userLocator: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getAllUserRoles(userLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all users.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getAllUsers(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getAllUsers(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user matching the locator.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUser(userLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUser(userLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a field of the matching user.
   * @param {string} userLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserField(userLocator: string, field: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserField(userLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a user group of the matching user.
   * @param {string} userLocator
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserGroup(
    userLocator: string,
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUserGroup(userLocator, groupLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all permissions effective for the matching user.
   * @param {string} userLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserPermissions(
    userLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUserPermissions(userLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all properties of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserProperties(userLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserProperties(userLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a property of the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserProperty(userLocator: string, name: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserProperty(userLocator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a user role with the specific scope from the matching user.
   * @param {string} userLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserRolesAtScope(
    userLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUserRolesAtScope(userLocator, roleId, scope, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all authentication tokens of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserTokens(userLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserTokens(userLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Terminate all current sessions of the matching user.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public logoutUser(userLocator: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .logoutUser(userLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove the matching user from the specific group.
   * @param {string} userLocator
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public removeUserFromGroup(
    userLocator: string,
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .removeUserFromGroup(userLocator, groupLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a property of the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public removeUserProperty(userLocator: string, name: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .removeUserProperty(userLocator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove the RememberMe data of the matching user.
   * @param {string} userLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public removeUserRememberMe(userLocator: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .removeUserRememberMe(userLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a role with the specific scope from the matching user.
   * @param {string} userLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public removeUserRoleAtScope(
    userLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .removeUserRoleAtScope(userLocator, roleId, scope, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user matching the locator.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {User} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public replaceUser(
    userLocator: string,
    fields?: string,
    body?: User,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .replaceUser(userLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a field of the matching user.
   * @param {string} userLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public setUserField(
    userLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .setUserField(userLocator, field, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update groups of the matching user.
   * @param {string} userLocator
   * @param {string} [fields]
   * @param {Groups} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public setUserGroups(
    userLocator: string,
    fields?: string,
    body?: Groups,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .setUserGroups(userLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a property of the matching user.
   * @param {string} userLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public setUserProperty(
    userLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .setUserProperty(userLocator, name, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user roles of the matching user.
   * @param {string} userLocator
   * @param {Roles} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public setUserRoles(userLocator: string, body?: Roles, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .setUserRoles(userLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Role } from '../models';
// @ts-ignore
import type { Roles } from '../models';

/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add an included role.
     * @param {string} roleId
     * @param {string} includedId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addIncludedRole: async (
      roleId: string,
      includedId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('addIncludedRole', 'roleId', roleId);
      // verify required parameter 'includedId' is not null or undefined
      assertParamExists('addIncludedRole', 'includedId', includedId);
      const localVarPath = `/app/rest/roles/id:{roleId}/included/{includedId}`
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'includedId'}}`, encodeURIComponent(String(includedId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a permission to a role.
     * @param {string} roleId
     * @param {string} permissionId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPermission: async (
      roleId: string,
      permissionId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('addPermission', 'roleId', roleId);
      // verify required parameter 'permissionId' is not null or undefined
      assertParamExists('addPermission', 'permissionId', permissionId);
      const localVarPath = `/app/rest/roles/id:{roleId}/permissions/{permissionId}`
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'permissionId'}}`, encodeURIComponent(String(permissionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new role.
     * @param {string} [fields]
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole: async (
      fields?: string,
      body?: Role,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a role matching the id.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteRole', 'id', id);
      const localVarPath = `/app/rest/roles/id:{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a role with specified id.
     * @param {string} id
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole: async (
      id: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getRole', 'id', id);
      const localVarPath = `/app/rest/roles/id:{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all roles.
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles: async (
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove an included role.
     * @param {string} roleId
     * @param {string} includedId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeIncludedRole: async (
      roleId: string,
      includedId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('removeIncludedRole', 'roleId', roleId);
      // verify required parameter 'includedId' is not null or undefined
      assertParamExists('removeIncludedRole', 'includedId', includedId);
      const localVarPath = `/app/rest/roles/id:{roleId}/included/{includedId}`
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'includedId'}}`, encodeURIComponent(String(includedId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a permission from a role.
     * @param {string} roleId
     * @param {string} permissionId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePermission: async (
      roleId: string,
      permissionId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('removePermission', 'roleId', roleId);
      // verify required parameter 'permissionId' is not null or undefined
      assertParamExists('removePermission', 'permissionId', permissionId);
      const localVarPath = `/app/rest/roles/id:{roleId}/permissions/{permissionId}`
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'permissionId'}}`, encodeURIComponent(String(permissionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add an included role.
     * @param {string} roleId
     * @param {string} includedId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addIncludedRole(
      roleId: string,
      includedId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addIncludedRole(
        roleId,
        includedId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.addIncludedRole']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a permission to a role.
     * @param {string} roleId
     * @param {string} permissionId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addPermission(
      roleId: string,
      permissionId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addPermission(
        roleId,
        permissionId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.addPermission']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new role.
     * @param {string} [fields]
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRole(
      fields?: string,
      body?: Role,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(fields, body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.createRole']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a role matching the id.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRole(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.deleteRole']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a role with specified id.
     * @param {string} id
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRole(
      id: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(id, fields, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.getRole']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all roles.
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoles(
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(fields, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.getRoles']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove an included role.
     * @param {string} roleId
     * @param {string} includedId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeIncludedRole(
      roleId: string,
      includedId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeIncludedRole(
        roleId,
        includedId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.removeIncludedRole']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a permission from a role.
     * @param {string} roleId
     * @param {string} permissionId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePermission(
      roleId: string,
      permissionId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePermission(
        roleId,
        permissionId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RoleApi.removePermission']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RoleApiFp(configuration);
  return {
    /**
     *
     * @summary Add an included role.
     * @param {string} roleId
     * @param {string} includedId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addIncludedRole(
      roleId: string,
      includedId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .addIncludedRole(roleId, includedId, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a permission to a role.
     * @param {string} roleId
     * @param {string} permissionId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPermission(
      roleId: string,
      permissionId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .addPermission(roleId, permissionId, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new role.
     * @param {string} [fields]
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(fields?: string, body?: Role, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
      return localVarFp
        .createRole(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a role matching the id.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deleteRole(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a role with specified id.
     * @param {string} id
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole(id: string, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
      return localVarFp.getRole(id, fields, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all roles.
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Roles> {
      return localVarFp.getRoles(fields, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove an included role.
     * @param {string} roleId
     * @param {string} includedId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeIncludedRole(
      roleId: string,
      includedId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .removeIncludedRole(roleId, includedId, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a permission from a role.
     * @param {string} roleId
     * @param {string} permissionId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePermission(
      roleId: string,
      permissionId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .removePermission(roleId, permissionId, fields, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoleApi - interface
 * @export
 * @interface RoleApi
 */
export interface RoleApiInterface {
  /**
   *
   * @summary Add an included role.
   * @param {string} roleId
   * @param {string} includedId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  addIncludedRole(
    roleId: string,
    includedId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Add a permission to a role.
   * @param {string} roleId
   * @param {string} permissionId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  addPermission(
    roleId: string,
    permissionId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Create a new role.
   * @param {string} [fields]
   * @param {Role} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  createRole(fields?: string, body?: Role, options?: RawAxiosRequestConfig): AxiosPromise<Role>;

  /**
   *
   * @summary Delete a role matching the id.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  deleteRole(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Get a role with specified id.
   * @param {string} id
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  getRole(id: string, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Role>;

  /**
   *
   * @summary Get all roles.
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  getRoles(fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Roles>;

  /**
   *
   * @summary Remove an included role.
   * @param {string} roleId
   * @param {string} includedId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  removeIncludedRole(
    roleId: string,
    includedId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Remove a permission from a role.
   * @param {string} roleId
   * @param {string} permissionId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  removePermission(
    roleId: string,
    permissionId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;
}

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI implements RoleApiInterface {
  /**
   *
   * @summary Add an included role.
   * @param {string} roleId
   * @param {string} includedId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public addIncludedRole(
    roleId: string,
    includedId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .addIncludedRole(roleId, includedId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a permission to a role.
   * @param {string} roleId
   * @param {string} permissionId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public addPermission(
    roleId: string,
    permissionId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .addPermission(roleId, permissionId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new role.
   * @param {string} [fields]
   * @param {Role} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public createRole(fields?: string, body?: Role, options?: RawAxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .createRole(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a role matching the id.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public deleteRole(id: string, options?: RawAxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .deleteRole(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a role with specified id.
   * @param {string} id
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public getRole(id: string, fields?: string, options?: RawAxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .getRole(id, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all roles.
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public getRoles(fields?: string, options?: RawAxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .getRoles(fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove an included role.
   * @param {string} roleId
   * @param {string} includedId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public removeIncludedRole(
    roleId: string,
    includedId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .removeIncludedRole(roleId, includedId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a permission from a role.
   * @param {string} roleId
   * @param {string} permissionId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public removePermission(
    roleId: string,
    permissionId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .removePermission(roleId, permissionId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

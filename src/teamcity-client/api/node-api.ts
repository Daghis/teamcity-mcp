/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { DisabledResponsibilities } from '../models';
// @ts-ignore
import type { EffectiveResponsibilities } from '../models';
// @ts-ignore
import type { EnabledResponsibilities } from '../models';
// @ts-ignore
import type { Node } from '../models';
// @ts-ignore
import type { Nodes } from '../models';

/**
 * NodeApi - axios parameter creator
 * @export
 */
export const NodeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Enables or disables responsibility for a node.
     * @param {string} nodeLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeNodeResponsibility: async (
      nodeLocator: string,
      name: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'nodeLocator' is not null or undefined
      assertParamExists('changeNodeResponsibility', 'nodeLocator', nodeLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('changeNodeResponsibility', 'name', name);
      const localVarPath = `/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities/{name}`
        .replace(`{${'nodeLocator'}}`, encodeURIComponent(String(nodeLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all TeamCity nodes.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllNodes: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/server/nodes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all effective responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDisabledResponsibilities: async (
      nodeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'nodeLocator' is not null or undefined
      assertParamExists('getDisabledResponsibilities', 'nodeLocator', nodeLocator);
      const localVarPath = `/app/rest/server/nodes/{nodeLocator}/disabledResponsibilities`.replace(
        `{${'nodeLocator'}}`,
        encodeURIComponent(String(nodeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all effective responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEffectiveResponsibilities: async (
      nodeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'nodeLocator' is not null or undefined
      assertParamExists('getEffectiveResponsibilities', 'nodeLocator', nodeLocator);
      const localVarPath = `/app/rest/server/nodes/{nodeLocator}/effectiveResponsibilities`.replace(
        `{${'nodeLocator'}}`,
        encodeURIComponent(String(nodeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all enabled responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnabledResponsibilities: async (
      nodeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'nodeLocator' is not null or undefined
      assertParamExists('getEnabledResponsibilities', 'nodeLocator', nodeLocator);
      const localVarPath = `/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities`.replace(
        `{${'nodeLocator'}}`,
        encodeURIComponent(String(nodeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNode: async (
      nodeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'nodeLocator' is not null or undefined
      assertParamExists('getNode', 'nodeLocator', nodeLocator);
      const localVarPath = `/app/rest/server/nodes/{nodeLocator}`.replace(
        `{${'nodeLocator'}}`,
        encodeURIComponent(String(nodeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * NodeApi - functional programming interface
 * @export
 */
export const NodeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NodeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Enables or disables responsibility for a node.
     * @param {string} nodeLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeNodeResponsibility(
      nodeLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnabledResponsibilities>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changeNodeResponsibility(
        nodeLocator,
        name,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['NodeApi.changeNodeResponsibility']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all TeamCity nodes.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllNodes(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nodes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNodes(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['NodeApi.getAllNodes']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all effective responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDisabledResponsibilities(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DisabledResponsibilities>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDisabledResponsibilities(
        nodeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['NodeApi.getDisabledResponsibilities']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all effective responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEffectiveResponsibilities(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EffectiveResponsibilities>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEffectiveResponsibilities(
        nodeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['NodeApi.getEffectiveResponsibilities']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all enabled responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEnabledResponsibilities(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnabledResponsibilities>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnabledResponsibilities(
        nodeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['NodeApi.getEnabledResponsibilities']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNode(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Node>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getNode(
        nodeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['NodeApi.getNode']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * NodeApi - factory interface
 * @export
 */
export const NodeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = NodeApiFp(configuration);
  return {
    /**
     *
     * @summary Enables or disables responsibility for a node.
     * @param {string} nodeLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeNodeResponsibility(
      nodeLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<EnabledResponsibilities> {
      return localVarFp
        .changeNodeResponsibility(nodeLocator, name, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all TeamCity nodes.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllNodes(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Nodes> {
      return localVarFp
        .getAllNodes(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all effective responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDisabledResponsibilities(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DisabledResponsibilities> {
      return localVarFp
        .getDisabledResponsibilities(nodeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all effective responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEffectiveResponsibilities(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<EffectiveResponsibilities> {
      return localVarFp
        .getEffectiveResponsibilities(nodeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all enabled responsibilities for a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnabledResponsibilities(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<EnabledResponsibilities> {
      return localVarFp
        .getEnabledResponsibilities(nodeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a node matching the locator.
     * @param {string} nodeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNode(
      nodeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Node> {
      return localVarFp
        .getNode(nodeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * NodeApi - interface
 * @export
 * @interface NodeApi
 */
export interface NodeApiInterface {
  /**
   *
   * @summary Enables or disables responsibility for a node.
   * @param {string} nodeLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApiInterface
   */
  changeNodeResponsibility(
    nodeLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<EnabledResponsibilities>;

  /**
   *
   * @summary Get all TeamCity nodes.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApiInterface
   */
  getAllNodes(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Nodes>;

  /**
   *
   * @summary Get all effective responsibilities for a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApiInterface
   */
  getDisabledResponsibilities(
    nodeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DisabledResponsibilities>;

  /**
   *
   * @summary Get all effective responsibilities for a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApiInterface
   */
  getEffectiveResponsibilities(
    nodeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<EffectiveResponsibilities>;

  /**
   *
   * @summary Get all enabled responsibilities for a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApiInterface
   */
  getEnabledResponsibilities(
    nodeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<EnabledResponsibilities>;

  /**
   *
   * @summary Get a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApiInterface
   */
  getNode(
    nodeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Node>;
}

/**
 * NodeApi - object-oriented interface
 * @export
 * @class NodeApi
 * @extends {BaseAPI}
 */
export class NodeApi extends BaseAPI implements NodeApiInterface {
  /**
   *
   * @summary Enables or disables responsibility for a node.
   * @param {string} nodeLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApi
   */
  public changeNodeResponsibility(
    nodeLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return NodeApiFp(this.configuration)
      .changeNodeResponsibility(nodeLocator, name, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all TeamCity nodes.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApi
   */
  public getAllNodes(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return NodeApiFp(this.configuration)
      .getAllNodes(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all effective responsibilities for a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApi
   */
  public getDisabledResponsibilities(
    nodeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return NodeApiFp(this.configuration)
      .getDisabledResponsibilities(nodeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all effective responsibilities for a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApi
   */
  public getEffectiveResponsibilities(
    nodeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return NodeApiFp(this.configuration)
      .getEffectiveResponsibilities(nodeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all enabled responsibilities for a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApi
   */
  public getEnabledResponsibilities(
    nodeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return NodeApiFp(this.configuration)
      .getEnabledResponsibilities(nodeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a node matching the locator.
   * @param {string} nodeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NodeApi
   */
  public getNode(nodeLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return NodeApiFp(this.configuration)
      .getNode(nodeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

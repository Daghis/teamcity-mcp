/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { AgentRequirement } from '../models';
// @ts-ignore
import type { AgentRequirements } from '../models';
// @ts-ignore
import type { ArtifactDependencies } from '../models';
// @ts-ignore
import type { ArtifactDependency } from '../models';
// @ts-ignore
import type { Branches } from '../models';
// @ts-ignore
import type { BuildType } from '../models';
// @ts-ignore
import type { BuildTypes } from '../models';
// @ts-ignore
import type { Builds } from '../models';
// @ts-ignore
import type { Feature } from '../models';
// @ts-ignore
import type { Features } from '../models';
// @ts-ignore
import type { Files } from '../models';
// @ts-ignore
import type { Investigations } from '../models';
// @ts-ignore
import type { Items } from '../models';
// @ts-ignore
import type { Properties } from '../models';
// @ts-ignore
import type { Property } from '../models';
// @ts-ignore
import type { SnapshotDependencies } from '../models';
// @ts-ignore
import type { SnapshotDependency } from '../models';
// @ts-ignore
import type { Step } from '../models';
// @ts-ignore
import type { Steps } from '../models';
// @ts-ignore
import type { Tags } from '../models';
// @ts-ignore
import type { Trigger } from '../models';
// @ts-ignore
import type { Triggers } from '../models';
// @ts-ignore
import type { Type } from '../models';
// @ts-ignore
import type { VcsRootEntries } from '../models';
// @ts-ignore
import type { VcsRootEntry } from '../models';
// @ts-ignore
import type { VcsRootInstances } from '../models';

/**
 * BuildTypeApi - axios parameter creator
 * @export
 */
export const BuildTypeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add an agent requirement to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {AgentRequirement} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAgentRequirementToBuildType: async (
      btLocator: string,
      fields?: string,
      body?: AgentRequirement,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addAgentRequirementToBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/agent-requirements`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add an artifact dependency to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {ArtifactDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addArtifactDependencyToBuildType: async (
      btLocator: string,
      fields?: string,
      body?: ArtifactDependency,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addArtifactDependencyToBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/artifact-dependencies`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add build feature to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Feature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildFeatureToBuildType: async (
      btLocator: string,
      fields?: string,
      body?: Feature,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addBuildFeatureToBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a build step to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Step} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildStepToBuildType: async (
      btLocator: string,
      fields?: string,
      body?: Step,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addBuildStepToBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a build template to the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [optimizeSettings]
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildTemplate: async (
      btLocator: string,
      optimizeSettings?: boolean,
      fields?: string,
      body?: BuildType,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addBuildTemplate', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/templates`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (optimizeSettings !== undefined) {
        localVarQueryParameter['optimizeSettings'] = String(optimizeSettings);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build feature parameter for the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} parameterName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParameterToBuildFeature: async (
      btLocator: string,
      featureId: string,
      parameterName: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addParameterToBuildFeature', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('addParameterToBuildFeature', 'featureId', featureId);
      // verify required parameter 'parameterName' is not null or undefined
      assertParamExists('addParameterToBuildFeature', 'parameterName', parameterName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)))
          .replace(`{${'parameterName'}}`, encodeURIComponent(String(parameterName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a parameter to a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} parameterName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParameterToBuildStep: async (
      btLocator: string,
      stepId: string,
      parameterName: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addParameterToBuildStep', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('addParameterToBuildStep', 'stepId', stepId);
      // verify required parameter 'parameterName' is not null or undefined
      assertParamExists('addParameterToBuildStep', 'parameterName', parameterName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)))
          .replace(`{${'parameterName'}}`, encodeURIComponent(String(parameterName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a snapshot dependency to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {SnapshotDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSnapshotDependencyToBuildType: async (
      btLocator: string,
      fields?: string,
      body?: SnapshotDependency,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addSnapshotDependencyToBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/snapshot-dependencies`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a trigger to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Trigger} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTriggerToBuildType: async (
      btLocator: string,
      fields?: string,
      body?: Trigger,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addTriggerToBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a VCS root to the matching build.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {VcsRootEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVcsRootToBuildType: async (
      btLocator: string,
      fields?: string,
      body?: VcsRootEntry,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('addVcsRootToBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs-root-entries`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildParameterOfBuildType: async (
      btLocator: string,
      fields?: string,
      body?: Property,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('createBuildParameterOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildParameterOfBuildType_1: async (
      btLocator: string,
      fields?: string,
      body?: Property,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('createBuildParameterOfBuildType_1', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new build configuration.
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildType: async (
      fields?: string,
      body?: BuildType,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/buildTypes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentRequirement: async (
      btLocator: string,
      agentRequirementLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteAgentRequirement', 'btLocator', btLocator);
      // verify required parameter 'agentRequirementLocator' is not null or undefined
      assertParamExists(
        'deleteAgentRequirement',
        'agentRequirementLocator',
        agentRequirementLocator
      );
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(
            `{${'agentRequirementLocator'}}`,
            encodeURIComponent(String(agentRequirementLocator))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove an artifact dependency from the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArtifactDependency: async (
      btLocator: string,
      artifactDepLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteArtifactDependency', 'btLocator', btLocator);
      // verify required parameter 'artifactDepLocator' is not null or undefined
      assertParamExists('deleteArtifactDependency', 'artifactDepLocator', artifactDepLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'artifactDepLocator'}}`, encodeURIComponent(String(artifactDepLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameterOfBuildType: async (
      name: string,
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deleteBuildParameterOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteBuildParameterOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameterOfBuildType_2: async (
      name: string,
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deleteBuildParameterOfBuildType_2', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteBuildParameterOfBuildType_2', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParametersOfBuildType: async (
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteBuildParametersOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParametersOfBuildType_3: async (
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteBuildParametersOfBuildType_3', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildStep: async (
      btLocator: string,
      stepId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteBuildStep', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('deleteBuildStep', 'stepId', stepId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps/{stepId}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildStepParameters: async (
      btLocator: string,
      stepId: string,
      fields?: string,
      body?: Properties,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteBuildStepParameters', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('deleteBuildStepParameters', 'stepId', stepId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete build configuration matching the locator.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildType: async (
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureOfBuildType: async (
      btLocator: string,
      featureId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteFeatureOfBuildType', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('deleteFeatureOfBuildType', 'featureId', featureId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features/{featureId}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapshotDependency: async (
      btLocator: string,
      snapshotDepLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteSnapshotDependency', 'btLocator', btLocator);
      // verify required parameter 'snapshotDepLocator' is not null or undefined
      assertParamExists('deleteSnapshotDependency', 'snapshotDepLocator', snapshotDepLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'snapshotDepLocator'}}`, encodeURIComponent(String(snapshotDepLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrigger: async (
      btLocator: string,
      triggerLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteTrigger', 'btLocator', btLocator);
      // verify required parameter 'triggerLocator' is not null or undefined
      assertParamExists('deleteTrigger', 'triggerLocator', triggerLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'triggerLocator'}}`, encodeURIComponent(String(triggerLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVcsRootOfBuildType: async (
      btLocator: string,
      vcsRootLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('deleteVcsRootOfBuildType', 'btLocator', btLocator);
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('deleteVcsRootOfBuildType', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Download specific file.
     * @param {string} path
     * @param {string} btLocator
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFileOfBuildType: async (
      path: string,
      btLocator: string,
      resolveParameters?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'path' is not null or undefined
      assertParamExists('downloadFileOfBuildType', 'path', path);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('downloadFileOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}`
        .replace(`{${'path'}}`, encodeURIComponent(String(path)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (resolveParameters !== undefined) {
        localVarQueryParameter['resolveParameters'] = String(resolveParameters);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentRequirement: async (
      btLocator: string,
      agentRequirementLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAgentRequirement', 'btLocator', btLocator);
      // verify required parameter 'agentRequirementLocator' is not null or undefined
      assertParamExists('getAgentRequirement', 'agentRequirementLocator', agentRequirementLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(
            `{${'agentRequirementLocator'}}`,
            encodeURIComponent(String(agentRequirementLocator))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a setting of an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentRequirementParameter: async (
      btLocator: string,
      agentRequirementLocator: string,
      fieldName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAgentRequirementParameter', 'btLocator', btLocator);
      // verify required parameter 'agentRequirementLocator' is not null or undefined
      assertParamExists(
        'getAgentRequirementParameter',
        'agentRequirementLocator',
        agentRequirementLocator
      );
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('getAgentRequirementParameter', 'fieldName', fieldName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(
            `{${'agentRequirementLocator'}}`,
            encodeURIComponent(String(agentRequirementLocator))
          )
          .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get external IDs of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAliases: async (
      btLocator: string,
      field?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAliases', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/aliases`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (field !== undefined) {
        localVarQueryParameter['field'] = String(field);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all agent requirements of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAgentRequirements: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllAgentRequirements', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/agent-requirements`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all artifact dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllArtifactDependencies: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllArtifactDependencies', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/artifact-dependencies`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all branches of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBranchesOfBuildType: async (
      btLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllBranchesOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/branches`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all parameters of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildFeatureParameters: async (
      btLocator: string,
      featureId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllBuildFeatureParameters', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('getAllBuildFeatureParameters', 'featureId', featureId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all build features of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildFeatures: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllBuildFeatures', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all parameters of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildStepParameters: async (
      btLocator: string,
      stepId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllBuildStepParameters', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('getAllBuildStepParameters', 'stepId', stepId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all build steps of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildSteps: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllBuildSteps', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all build templates of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildTemplates: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllBuildTemplates', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/templates`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all build configurations.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildTypes: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/buildTypes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all investigations of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllInvestigationsOfBuildType: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllInvestigationsOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/investigations`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all snapshot dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSnapshotDependencies: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllSnapshotDependencies', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/snapshot-dependencies`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all triggers of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTriggers: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllTriggers', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all VCS roots of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllVcsRootsOfBuildType: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getAllVcsRootsOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs-root-entries`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArtifactDependency: async (
      btLocator: string,
      artifactDepLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getArtifactDependency', 'btLocator', btLocator);
      // verify required parameter 'artifactDepLocator' is not null or undefined
      assertParamExists('getArtifactDependency', 'artifactDepLocator', artifactDepLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'artifactDepLocator'}}`, encodeURIComponent(String(artifactDepLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a parameter of an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArtifactDependencyParameter: async (
      btLocator: string,
      artifactDepLocator: string,
      fieldName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getArtifactDependencyParameter', 'btLocator', btLocator);
      // verify required parameter 'artifactDepLocator' is not null or undefined
      assertParamExists('getArtifactDependencyParameter', 'artifactDepLocator', artifactDepLocator);
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('getArtifactDependencyParameter', 'fieldName', fieldName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'artifactDepLocator'}}`, encodeURIComponent(String(artifactDepLocator)))
          .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildFeature: async (
      btLocator: string,
      featureId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildFeature', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('getBuildFeature', 'featureId', featureId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features/{featureId}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} parameterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildFeatureParameter: async (
      btLocator: string,
      featureId: string,
      parameterName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildFeatureParameter', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('getBuildFeatureParameter', 'featureId', featureId);
      // verify required parameter 'parameterName' is not null or undefined
      assertParamExists('getBuildFeatureParameter', 'parameterName', parameterName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)))
          .replace(`{${'parameterName'}}`, encodeURIComponent(String(parameterName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the setting of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildFeatureSetting: async (
      btLocator: string,
      featureId: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildFeatureSetting', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('getBuildFeatureSetting', 'featureId', featureId);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildFeatureSetting', 'name', name);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterOfBuildType: async (
      name: string,
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParameterOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterOfBuildType_4: async (
      name: string,
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterOfBuildType_4', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParameterOfBuildType_4', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameter specification.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterSpecificationOfBuildType: async (
      name: string,
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterSpecificationOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParameterSpecificationOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get type of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterTypeOfBuildType: async (
      name: string,
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterTypeOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParameterTypeOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}/type`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterValueOfBuildType: async (
      name: string,
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterValueOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParameterValueOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters/{name}/value`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterValueOfBuildType_5: async (
      name: string,
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterValueOfBuildType_5', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParameterValueOfBuildType_5', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}/value`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParametersOfBuildType: async (
      btLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParametersOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParametersOfBuildType_6: async (
      btLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildParametersOfBuildType_6', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildStep: async (
      btLocator: string,
      stepId: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildStep', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('getBuildStep', 'stepId', stepId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps/{stepId}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} parameterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildStepParameter: async (
      btLocator: string,
      stepId: string,
      parameterName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildStepParameter', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('getBuildStepParameter', 'stepId', stepId);
      // verify required parameter 'parameterName' is not null or undefined
      assertParamExists('getBuildStepParameter', 'parameterName', parameterName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)))
          .replace(`{${'parameterName'}}`, encodeURIComponent(String(parameterName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the setting of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildStepSetting: async (
      btLocator: string,
      stepId: string,
      fieldName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildStepSetting', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('getBuildStepSetting', 'stepId', stepId);
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('getBuildStepSetting', 'fieldName', fieldName);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)))
        .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a template of the matching build configuration.
     * @param {string} btLocator
     * @param {string} templateLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTemplate: async (
      btLocator: string,
      templateLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildTemplate', 'btLocator', btLocator);
      // verify required parameter 'templateLocator' is not null or undefined
      assertParamExists('getBuildTemplate', 'templateLocator', templateLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/templates/{templateLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'templateLocator'}}`, encodeURIComponent(String(templateLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build configuration matching the locator.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildType: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get tags of builds of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeBuildTags: async (
      btLocator: string,
      field?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildTypeBuildTags', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/buildTags`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (field !== undefined) {
        localVarQueryParameter['field'] = String(field);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get builds of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeBuilds: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildTypeBuilds', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/builds`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a field of the matching build configuration.
     * @param {string} btLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeField: async (
      btLocator: string,
      field: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildTypeField', 'btLocator', btLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('getBuildTypeField', 'field', field);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/{field}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the settings file of the matching build configuration.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeSettingsFile: async (
      btLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getBuildTypeSettingsFile', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/settingsFile`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get metadata of specific file.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMetadataOfBuildType: async (
      path: string,
      btLocator: string,
      fields?: string,
      resolveParameters?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'path' is not null or undefined
      assertParamExists('getFileMetadataOfBuildType', 'path', path);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getFileMetadataOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}`
        .replace(`{${'path'}}`, encodeURIComponent(String(path)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      if (resolveParameters !== undefined) {
        localVarQueryParameter['resolveParameters'] = String(resolveParameters);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List files under this path.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesListForSubpathOfBuildType: async (
      path: string,
      btLocator: string,
      basePath?: string,
      locator?: string,
      fields?: string,
      resolveParameters?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'path' is not null or undefined
      assertParamExists('getFilesListForSubpathOfBuildType', 'path', path);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getFilesListForSubpathOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}`
        .replace(`{${'path'}}`, encodeURIComponent(String(path)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (basePath !== undefined) {
        localVarQueryParameter['basePath'] = String(basePath);
      }

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      if (resolveParameters !== undefined) {
        localVarQueryParameter['resolveParameters'] = String(resolveParameters);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List all files.
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesListOfBuildType: async (
      btLocator: string,
      basePath?: string,
      locator?: string,
      fields?: string,
      resolveParameters?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getFilesListOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs/files/latest`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (basePath !== undefined) {
        localVarQueryParameter['basePath'] = String(basePath);
      }

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      if (resolveParameters !== undefined) {
        localVarQueryParameter['resolveParameters'] = String(resolveParameters);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSnapshotDependency: async (
      btLocator: string,
      snapshotDepLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getSnapshotDependency', 'btLocator', btLocator);
      // verify required parameter 'snapshotDepLocator' is not null or undefined
      assertParamExists('getSnapshotDependency', 'snapshotDepLocator', snapshotDepLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'snapshotDepLocator'}}`, encodeURIComponent(String(snapshotDepLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrigger: async (
      btLocator: string,
      triggerLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getTrigger', 'btLocator', btLocator);
      // verify required parameter 'triggerLocator' is not null or undefined
      assertParamExists('getTrigger', 'triggerLocator', triggerLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'triggerLocator'}}`, encodeURIComponent(String(triggerLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a parameter of a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTriggerParameter: async (
      btLocator: string,
      triggerLocator: string,
      fieldName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getTriggerParameter', 'btLocator', btLocator);
      // verify required parameter 'triggerLocator' is not null or undefined
      assertParamExists('getTriggerParameter', 'triggerLocator', triggerLocator);
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('getTriggerParameter', 'fieldName', fieldName);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'triggerLocator'}}`, encodeURIComponent(String(triggerLocator)))
        .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRoot: async (
      btLocator: string,
      vcsRootLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getVcsRoot', 'btLocator', btLocator);
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getVcsRoot', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get checkout rules of a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootCheckoutRules: async (
      btLocator: string,
      vcsRootLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getVcsRootCheckoutRules', 'btLocator', btLocator);
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getVcsRootCheckoutRules', 'vcsRootLocator', vcsRootLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all VCS root instances of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootInstancesOfBuildType: async (
      btLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getVcsRootInstancesOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcsRootInstances`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get specific file zipped.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [name]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getZippedFileOfBuildType: async (
      path: string,
      btLocator: string,
      basePath?: string,
      locator?: string,
      name?: string,
      resolveParameters?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'path' is not null or undefined
      assertParamExists('getZippedFileOfBuildType', 'path', path);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('getZippedFileOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}`
        .replace(`{${'path'}}`, encodeURIComponent(String(path)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (basePath !== undefined) {
        localVarQueryParameter['basePath'] = String(basePath);
      }

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = String(name);
      }

      if (resolveParameters !== undefined) {
        localVarQueryParameter['resolveParameters'] = String(resolveParameters);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Move build type to another project.
     * @param {string} btLocator
     * @param {string} [targetProjectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuildType: async (
      btLocator: string,
      targetProjectId?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('moveBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/move`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (targetProjectId !== undefined) {
        localVarQueryParameter['targetProjectId'] = String(targetProjectId);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Detach all templates from the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [inlineSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllTemplates: async (
      btLocator: string,
      inlineSettings?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('removeAllTemplates', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/templates`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (inlineSettings !== undefined) {
        localVarQueryParameter['inlineSettings'] = String(inlineSettings);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Detach a template from the matching build configuration.
     * @param {string} btLocator
     * @param {string} templateLocator
     * @param {boolean} [inlineSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTemplate: async (
      btLocator: string,
      templateLocator: string,
      inlineSettings?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('removeTemplate', 'btLocator', btLocator);
      // verify required parameter 'templateLocator' is not null or undefined
      assertParamExists('removeTemplate', 'templateLocator', templateLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/templates/{templateLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'templateLocator'}}`, encodeURIComponent(String(templateLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (inlineSettings !== undefined) {
        localVarQueryParameter['inlineSettings'] = String(inlineSettings);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} [fields]
     * @param {AgentRequirement} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAgentRequirement: async (
      btLocator: string,
      agentRequirementLocator: string,
      fields?: string,
      body?: AgentRequirement,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAgentRequirement', 'btLocator', btLocator);
      // verify required parameter 'agentRequirementLocator' is not null or undefined
      assertParamExists(
        'replaceAgentRequirement',
        'agentRequirementLocator',
        agentRequirementLocator
      );
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(
            `{${'agentRequirementLocator'}}`,
            encodeURIComponent(String(agentRequirementLocator))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all agent requirements of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {AgentRequirements} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllAgentRequirements: async (
      btLocator: string,
      fields?: string,
      body?: AgentRequirements,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAllAgentRequirements', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/agent-requirements`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all artifact dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {ArtifactDependencies} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllArtifactDependencies: async (
      btLocator: string,
      fields?: string,
      body?: ArtifactDependencies,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAllArtifactDependencies', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/artifact-dependencies`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all build features of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Features} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllBuildFeatures: async (
      btLocator: string,
      fields?: string,
      body?: Features,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAllBuildFeatures', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all build steps of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Steps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllBuildSteps: async (
      btLocator: string,
      fields?: string,
      body?: Steps,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAllBuildSteps', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all snapshot dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {SnapshotDependencies} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllSnapshotDependencies: async (
      btLocator: string,
      fields?: string,
      body?: SnapshotDependencies,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAllSnapshotDependencies', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/snapshot-dependencies`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all triggers of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Triggers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllTriggers: async (
      btLocator: string,
      fields?: string,
      body?: Triggers,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAllTriggers', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all VCS roots of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {VcsRootEntries} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllVcsRoots: async (
      btLocator: string,
      fields?: string,
      body?: VcsRootEntries,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceAllVcsRoots', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs-root-entries`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} [fields]
     * @param {ArtifactDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceArtifactDependency: async (
      btLocator: string,
      artifactDepLocator: string,
      fields?: string,
      body?: ArtifactDependency,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceArtifactDependency', 'btLocator', btLocator);
      // verify required parameter 'artifactDepLocator' is not null or undefined
      assertParamExists('replaceArtifactDependency', 'artifactDepLocator', artifactDepLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'artifactDepLocator'}}`, encodeURIComponent(String(artifactDepLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {Feature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceBuildFeature: async (
      btLocator: string,
      featureId: string,
      fields?: string,
      body?: Feature,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceBuildFeature', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('replaceBuildFeature', 'featureId', featureId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features/{featureId}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceBuildFeatureParameters: async (
      btLocator: string,
      featureId: string,
      fields?: string,
      body?: Properties,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceBuildFeatureParameters', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('replaceBuildFeatureParameters', 'featureId', featureId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Replace a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {Step} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceBuildStep: async (
      btLocator: string,
      stepId: string,
      fields?: string,
      body?: Step,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceBuildStep', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('replaceBuildStep', 'stepId', stepId);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps/{stepId}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {string} [fields]
     * @param {SnapshotDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceSnapshotDependency: async (
      btLocator: string,
      snapshotDepLocator: string,
      fields?: string,
      body?: SnapshotDependency,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceSnapshotDependency', 'btLocator', btLocator);
      // verify required parameter 'snapshotDepLocator' is not null or undefined
      assertParamExists('replaceSnapshotDependency', 'snapshotDepLocator', snapshotDepLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'snapshotDepLocator'}}`, encodeURIComponent(String(snapshotDepLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} [fields]
     * @param {Trigger} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceTrigger: async (
      btLocator: string,
      triggerLocator: string,
      fields?: string,
      body?: Trigger,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('replaceTrigger', 'btLocator', btLocator);
      // verify required parameter 'triggerLocator' is not null or undefined
      assertParamExists('replaceTrigger', 'triggerLocator', triggerLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'triggerLocator'}}`, encodeURIComponent(String(triggerLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a parameter of an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentRequirementParameter: async (
      btLocator: string,
      agentRequirementLocator: string,
      fieldName: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('setAgentRequirementParameter', 'btLocator', btLocator);
      // verify required parameter 'agentRequirementLocator' is not null or undefined
      assertParamExists(
        'setAgentRequirementParameter',
        'agentRequirementLocator',
        agentRequirementLocator
      );
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('setAgentRequirementParameter', 'fieldName', fieldName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(
            `{${'agentRequirementLocator'}}`,
            encodeURIComponent(String(agentRequirementLocator))
          )
          .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a parameter of an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setArtifactDependencyParameter: async (
      btLocator: string,
      artifactDepLocator: string,
      fieldName: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('setArtifactDependencyParameter', 'btLocator', btLocator);
      // verify required parameter 'artifactDepLocator' is not null or undefined
      assertParamExists('setArtifactDependencyParameter', 'artifactDepLocator', artifactDepLocator);
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('setArtifactDependencyParameter', 'fieldName', fieldName);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'artifactDepLocator'}}`, encodeURIComponent(String(artifactDepLocator)))
          .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildFeatureParameter: async (
      btLocator: string,
      featureId: string,
      name: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('setBuildFeatureParameter', 'btLocator', btLocator);
      // verify required parameter 'featureId' is not null or undefined
      assertParamExists('setBuildFeatureParameter', 'featureId', featureId);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('setBuildFeatureParameter', 'name', name);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'featureId'}}`, encodeURIComponent(String(featureId)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildStepParameter: async (
      btLocator: string,
      stepId: string,
      fieldName: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('setBuildStepParameter', 'btLocator', btLocator);
      // verify required parameter 'stepId' is not null or undefined
      assertParamExists('setBuildStepParameter', 'stepId', stepId);
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('setBuildStepParameter', 'fieldName', fieldName);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'stepId'}}`, encodeURIComponent(String(stepId)))
        .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a field of the matching build configuration.
     * @param {string} btLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildTypeField: async (
      btLocator: string,
      field: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('setBuildTypeField', 'btLocator', btLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('setBuildTypeField', 'field', field);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/{field}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all templates of the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [optimizeSettings]
     * @param {string} [fields]
     * @param {BuildTypes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildTypeTemplates: async (
      btLocator: string,
      optimizeSettings?: boolean,
      fields?: string,
      body?: BuildTypes,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('setBuildTypeTemplates', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/templates`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (optimizeSettings !== undefined) {
        localVarQueryParameter['optimizeSettings'] = String(optimizeSettings);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a parameter of a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTriggerParameter: async (
      btLocator: string,
      triggerLocator: string,
      fieldName: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('setTriggerParameter', 'btLocator', btLocator);
      // verify required parameter 'triggerLocator' is not null or undefined
      assertParamExists('setTriggerParameter', 'triggerLocator', triggerLocator);
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists('setTriggerParameter', 'fieldName', fieldName);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'triggerLocator'}}`, encodeURIComponent(String(triggerLocator)))
        .replace(`{${'fieldName'}}`, encodeURIComponent(String(fieldName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterOfBuildType: async (
      name: string,
      btLocator: string,
      fields?: string,
      body?: Property,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParameterOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterOfBuildType_7: async (
      name: string,
      btLocator: string,
      fields?: string,
      body?: Property,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterOfBuildType_7', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParameterOfBuildType_7', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameter specification.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterSpecificationOfBuildType: async (
      name: string,
      btLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterSpecificationOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParameterSpecificationOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update type of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {Type} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterTypeOfBuildType: async (
      name: string,
      btLocator: string,
      body?: Type,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterTypeOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParameterTypeOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}/type`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterValueOfBuildType: async (
      name: string,
      btLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterValueOfBuildType', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParameterValueOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters/{name}/value`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterValueOfBuildType_8: async (
      name: string,
      btLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterValueOfBuildType_8', 'name', name);
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParameterValueOfBuildType_8', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters/{name}/value`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParametersOfBuildType: async (
      btLocator: string,
      fields?: string,
      body?: Properties,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParametersOfBuildType', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/output-parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParametersOfBuildType_9: async (
      btLocator: string,
      fields?: string,
      body?: Properties,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildParametersOfBuildType_9', 'btLocator', btLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/parameters`.replace(
        `{${'btLocator'}}`,
        encodeURIComponent(String(btLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {VcsRootEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildTypeVcsRoot: async (
      btLocator: string,
      vcsRootLocator: string,
      fields?: string,
      body?: VcsRootEntry,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildTypeVcsRoot', 'btLocator', btLocator);
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('updateBuildTypeVcsRoot', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}`
        .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update checkout rules of a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildTypeVcsRootCheckoutRules: async (
      btLocator: string,
      vcsRootLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'btLocator' is not null or undefined
      assertParamExists('updateBuildTypeVcsRootCheckoutRules', 'btLocator', btLocator);
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('updateBuildTypeVcsRootCheckoutRules', 'vcsRootLocator', vcsRootLocator);
      const localVarPath =
        `/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules`
          .replace(`{${'btLocator'}}`, encodeURIComponent(String(btLocator)))
          .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BuildTypeApi - functional programming interface
 * @export
 */
export const BuildTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BuildTypeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add an agent requirement to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {AgentRequirement} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addAgentRequirementToBuildType(
      btLocator: string,
      fields?: string,
      body?: AgentRequirement,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentRequirement>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addAgentRequirementToBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addAgentRequirementToBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add an artifact dependency to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {ArtifactDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addArtifactDependencyToBuildType(
      btLocator: string,
      fields?: string,
      body?: ArtifactDependency,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactDependency>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addArtifactDependencyToBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addArtifactDependencyToBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add build feature to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Feature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addBuildFeatureToBuildType(
      btLocator: string,
      fields?: string,
      body?: Feature,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addBuildFeatureToBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addBuildFeatureToBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a build step to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Step} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addBuildStepToBuildType(
      btLocator: string,
      fields?: string,
      body?: Step,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Step>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addBuildStepToBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addBuildStepToBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a build template to the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [optimizeSettings]
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addBuildTemplate(
      btLocator: string,
      optimizeSettings?: boolean,
      fields?: string,
      body?: BuildType,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addBuildTemplate(
        btLocator,
        optimizeSettings,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addBuildTemplate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build feature parameter for the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} parameterName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addParameterToBuildFeature(
      btLocator: string,
      featureId: string,
      parameterName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addParameterToBuildFeature(
        btLocator,
        featureId,
        parameterName,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addParameterToBuildFeature']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a parameter to a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} parameterName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addParameterToBuildStep(
      btLocator: string,
      stepId: string,
      parameterName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addParameterToBuildStep(
        btLocator,
        stepId,
        parameterName,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addParameterToBuildStep']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a snapshot dependency to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {SnapshotDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addSnapshotDependencyToBuildType(
      btLocator: string,
      fields?: string,
      body?: SnapshotDependency,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotDependency>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addSnapshotDependencyToBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addSnapshotDependencyToBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a trigger to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Trigger} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addTriggerToBuildType(
      btLocator: string,
      fields?: string,
      body?: Trigger,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trigger>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addTriggerToBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addTriggerToBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a VCS root to the matching build.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {VcsRootEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addVcsRootToBuildType(
      btLocator: string,
      fields?: string,
      body?: VcsRootEntry,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootEntry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addVcsRootToBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.addVcsRootToBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBuildParameterOfBuildType(
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBuildParameterOfBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.createBuildParameterOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBuildParameterOfBuildType_1(
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBuildParameterOfBuildType_1(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.createBuildParameterOfBuildType_1']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new build configuration.
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBuildType(
      fields?: string,
      body?: BuildType,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBuildType(
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.createBuildType']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAgentRequirement(
      btLocator: string,
      agentRequirementLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgentRequirement(
        btLocator,
        agentRequirementLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteAgentRequirement']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove an artifact dependency from the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteArtifactDependency(
      btLocator: string,
      artifactDepLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArtifactDependency(
        btLocator,
        artifactDepLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteArtifactDependency']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildParameterOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildParameterOfBuildType(
        name,
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteBuildParameterOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildParameterOfBuildType_2(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildParameterOfBuildType_2(
        name,
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteBuildParameterOfBuildType_2']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildParametersOfBuildType(
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildParametersOfBuildType(
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteBuildParametersOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildParametersOfBuildType_3(
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildParametersOfBuildType_3(
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteBuildParametersOfBuildType_3']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildStep(
      btLocator: string,
      stepId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildStep(
        btLocator,
        stepId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteBuildStep']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildStepParameters(
      btLocator: string,
      stepId: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildStepParameters(
        btLocator,
        stepId,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteBuildStepParameters']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete build configuration matching the locator.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildType(
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildType(btLocator, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteBuildType']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFeatureOfBuildType(
      btLocator: string,
      featureId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeatureOfBuildType(
        btLocator,
        featureId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteFeatureOfBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSnapshotDependency(
      btLocator: string,
      snapshotDepLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSnapshotDependency(
        btLocator,
        snapshotDepLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteSnapshotDependency']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTrigger(
      btLocator: string,
      triggerLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrigger(
        btLocator,
        triggerLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteTrigger']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVcsRootOfBuildType(
      btLocator: string,
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVcsRootOfBuildType(
        btLocator,
        vcsRootLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.deleteVcsRootOfBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Download specific file.
     * @param {string} path
     * @param {string} btLocator
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async downloadFileOfBuildType(
      path: string,
      btLocator: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileOfBuildType(
        path,
        btLocator,
        resolveParameters,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.downloadFileOfBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAgentRequirement(
      btLocator: string,
      agentRequirementLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentRequirement>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentRequirement(
        btLocator,
        agentRequirementLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAgentRequirement']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a setting of an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAgentRequirementParameter(
      btLocator: string,
      agentRequirementLocator: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentRequirementParameter(
        btLocator,
        agentRequirementLocator,
        fieldName,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAgentRequirementParameter']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get external IDs of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAliases(
      btLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Items>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAliases(
        btLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAliases']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all agent requirements of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllAgentRequirements(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentRequirements>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAgentRequirements(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllAgentRequirements']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all artifact dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllArtifactDependencies(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactDependencies>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllArtifactDependencies(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllArtifactDependencies']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all branches of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBranchesOfBuildType(
      btLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branches>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBranchesOfBuildType(
        btLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllBranchesOfBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all parameters of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBuildFeatureParameters(
      btLocator: string,
      featureId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuildFeatureParameters(
        btLocator,
        featureId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllBuildFeatureParameters']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all build features of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBuildFeatures(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Features>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuildFeatures(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllBuildFeatures']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all parameters of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBuildStepParameters(
      btLocator: string,
      stepId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuildStepParameters(
        btLocator,
        stepId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllBuildStepParameters']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all build steps of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBuildSteps(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Steps>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuildSteps(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllBuildSteps']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all build templates of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBuildTemplates(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildTypes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuildTemplates(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllBuildTemplates']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all build configurations.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBuildTypes(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildTypes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuildTypes(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllBuildTypes']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all investigations of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllInvestigationsOfBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Investigations>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInvestigationsOfBuildType(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllInvestigationsOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all snapshot dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllSnapshotDependencies(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotDependencies>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSnapshotDependencies(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllSnapshotDependencies']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all triggers of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllTriggers(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Triggers>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTriggers(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllTriggers']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all VCS roots of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllVcsRootsOfBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootEntries>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVcsRootsOfBuildType(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getAllVcsRootsOfBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getArtifactDependency(
      btLocator: string,
      artifactDepLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactDependency>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getArtifactDependency(
        btLocator,
        artifactDepLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getArtifactDependency']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a parameter of an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getArtifactDependencyParameter(
      btLocator: string,
      artifactDepLocator: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getArtifactDependencyParameter(
        btLocator,
        artifactDepLocator,
        fieldName,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getArtifactDependencyParameter']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildFeature(
      btLocator: string,
      featureId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildFeature(
        btLocator,
        featureId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildFeature']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} parameterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildFeatureParameter(
      btLocator: string,
      featureId: string,
      parameterName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildFeatureParameter(
        btLocator,
        featureId,
        parameterName,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildFeatureParameter']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the setting of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildFeatureSetting(
      btLocator: string,
      featureId: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildFeatureSetting(
        btLocator,
        featureId,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildFeatureSetting']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterOfBuildType(
      name: string,
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterOfBuildType(
        name,
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParameterOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterOfBuildType_4(
      name: string,
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterOfBuildType_4(
        name,
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParameterOfBuildType_4']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameter specification.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterSpecificationOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBuildParameterSpecificationOfBuildType(
          name,
          btLocator,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParameterSpecificationOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get type of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterTypeOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Type>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterTypeOfBuildType(
        name,
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParameterTypeOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterValueOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterValueOfBuildType(
        name,
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParameterValueOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterValueOfBuildType_5(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterValueOfBuildType_5(
        name,
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParameterValueOfBuildType_5']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParametersOfBuildType(
      btLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParametersOfBuildType(
        btLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParametersOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParametersOfBuildType_6(
      btLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParametersOfBuildType_6(
        btLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildParametersOfBuildType_6']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildStep(
      btLocator: string,
      stepId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Step>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildStep(
        btLocator,
        stepId,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildStep']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} parameterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildStepParameter(
      btLocator: string,
      stepId: string,
      parameterName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildStepParameter(
        btLocator,
        stepId,
        parameterName,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildStepParameter']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the setting of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildStepSetting(
      btLocator: string,
      stepId: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildStepSetting(
        btLocator,
        stepId,
        fieldName,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildStepSetting']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a template of the matching build configuration.
     * @param {string} btLocator
     * @param {string} templateLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildTemplate(
      btLocator: string,
      templateLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildTemplate(
        btLocator,
        templateLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildTemplate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build configuration matching the locator.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildType(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildType']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get tags of builds of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildTypeBuildTags(
      btLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildTypeBuildTags(
        btLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildTypeBuildTags']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get builds of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildTypeBuilds(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Builds>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildTypeBuilds(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildTypeBuilds']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a field of the matching build configuration.
     * @param {string} btLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildTypeField(
      btLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildTypeField(
        btLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildTypeField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the settings file of the matching build configuration.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildTypeSettingsFile(
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildTypeSettingsFile(
        btLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getBuildTypeSettingsFile']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get metadata of specific file.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFileMetadataOfBuildType(
      path: string,
      btLocator: string,
      fields?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFileMetadataOfBuildType(
        path,
        btLocator,
        fields,
        resolveParameters,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getFileMetadataOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List files under this path.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFilesListForSubpathOfBuildType(
      path: string,
      btLocator: string,
      basePath?: string,
      locator?: string,
      fields?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Files>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFilesListForSubpathOfBuildType(
        path,
        btLocator,
        basePath,
        locator,
        fields,
        resolveParameters,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getFilesListForSubpathOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List all files.
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFilesListOfBuildType(
      btLocator: string,
      basePath?: string,
      locator?: string,
      fields?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Files>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFilesListOfBuildType(
        btLocator,
        basePath,
        locator,
        fields,
        resolveParameters,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getFilesListOfBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSnapshotDependency(
      btLocator: string,
      snapshotDepLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotDependency>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshotDependency(
        btLocator,
        snapshotDepLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getSnapshotDependency']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTrigger(
      btLocator: string,
      triggerLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trigger>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTrigger(
        btLocator,
        triggerLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getTrigger']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a parameter of a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTriggerParameter(
      btLocator: string,
      triggerLocator: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTriggerParameter(
        btLocator,
        triggerLocator,
        fieldName,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getTriggerParameter']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVcsRoot(
      btLocator: string,
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootEntry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVcsRoot(
        btLocator,
        vcsRootLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getVcsRoot']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get checkout rules of a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVcsRootCheckoutRules(
      btLocator: string,
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVcsRootCheckoutRules(
        btLocator,
        vcsRootLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getVcsRootCheckoutRules']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all VCS root instances of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVcsRootInstancesOfBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootInstances>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVcsRootInstancesOfBuildType(
        btLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getVcsRootInstancesOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get specific file zipped.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [name]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getZippedFileOfBuildType(
      path: string,
      btLocator: string,
      basePath?: string,
      locator?: string,
      name?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getZippedFileOfBuildType(
        path,
        btLocator,
        basePath,
        locator,
        name,
        resolveParameters,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.getZippedFileOfBuildType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Move build type to another project.
     * @param {string} btLocator
     * @param {string} [targetProjectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moveBuildType(
      btLocator: string,
      targetProjectId?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.moveBuildType(
        btLocator,
        targetProjectId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.moveBuildType']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Detach all templates from the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [inlineSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeAllTemplates(
      btLocator: string,
      inlineSettings?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeAllTemplates(
        btLocator,
        inlineSettings,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.removeAllTemplates']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Detach a template from the matching build configuration.
     * @param {string} btLocator
     * @param {string} templateLocator
     * @param {boolean} [inlineSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeTemplate(
      btLocator: string,
      templateLocator: string,
      inlineSettings?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeTemplate(
        btLocator,
        templateLocator,
        inlineSettings,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.removeTemplate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} [fields]
     * @param {AgentRequirement} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAgentRequirement(
      btLocator: string,
      agentRequirementLocator: string,
      fields?: string,
      body?: AgentRequirement,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentRequirement>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAgentRequirement(
        btLocator,
        agentRequirementLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAgentRequirement']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all agent requirements of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {AgentRequirements} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAllAgentRequirements(
      btLocator: string,
      fields?: string,
      body?: AgentRequirements,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentRequirements>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllAgentRequirements(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAllAgentRequirements']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all artifact dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {ArtifactDependencies} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAllArtifactDependencies(
      btLocator: string,
      fields?: string,
      body?: ArtifactDependencies,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactDependencies>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllArtifactDependencies(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAllArtifactDependencies']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all build features of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Features} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAllBuildFeatures(
      btLocator: string,
      fields?: string,
      body?: Features,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Features>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllBuildFeatures(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAllBuildFeatures']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all build steps of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Steps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAllBuildSteps(
      btLocator: string,
      fields?: string,
      body?: Steps,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Steps>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllBuildSteps(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAllBuildSteps']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all snapshot dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {SnapshotDependencies} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAllSnapshotDependencies(
      btLocator: string,
      fields?: string,
      body?: SnapshotDependencies,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotDependencies>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllSnapshotDependencies(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAllSnapshotDependencies']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all triggers of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Triggers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAllTriggers(
      btLocator: string,
      fields?: string,
      body?: Triggers,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Triggers>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllTriggers(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAllTriggers']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all VCS roots of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {VcsRootEntries} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceAllVcsRoots(
      btLocator: string,
      fields?: string,
      body?: VcsRootEntries,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootEntries>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceAllVcsRoots(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceAllVcsRoots']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} [fields]
     * @param {ArtifactDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceArtifactDependency(
      btLocator: string,
      artifactDepLocator: string,
      fields?: string,
      body?: ArtifactDependency,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactDependency>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceArtifactDependency(
        btLocator,
        artifactDepLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceArtifactDependency']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {Feature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceBuildFeature(
      btLocator: string,
      featureId: string,
      fields?: string,
      body?: Feature,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceBuildFeature(
        btLocator,
        featureId,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceBuildFeature']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceBuildFeatureParameters(
      btLocator: string,
      featureId: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceBuildFeatureParameters(
        btLocator,
        featureId,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceBuildFeatureParameters']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Replace a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {Step} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceBuildStep(
      btLocator: string,
      stepId: string,
      fields?: string,
      body?: Step,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Step>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceBuildStep(
        btLocator,
        stepId,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceBuildStep']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {string} [fields]
     * @param {SnapshotDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceSnapshotDependency(
      btLocator: string,
      snapshotDepLocator: string,
      fields?: string,
      body?: SnapshotDependency,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotDependency>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceSnapshotDependency(
        btLocator,
        snapshotDepLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceSnapshotDependency']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} [fields]
     * @param {Trigger} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceTrigger(
      btLocator: string,
      triggerLocator: string,
      fields?: string,
      body?: Trigger,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trigger>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceTrigger(
        btLocator,
        triggerLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.replaceTrigger']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a parameter of an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAgentRequirementParameter(
      btLocator: string,
      agentRequirementLocator: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAgentRequirementParameter(
        btLocator,
        agentRequirementLocator,
        fieldName,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.setAgentRequirementParameter']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a parameter of an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setArtifactDependencyParameter(
      btLocator: string,
      artifactDepLocator: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setArtifactDependencyParameter(
        btLocator,
        artifactDepLocator,
        fieldName,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.setArtifactDependencyParameter']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setBuildFeatureParameter(
      btLocator: string,
      featureId: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setBuildFeatureParameter(
        btLocator,
        featureId,
        name,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.setBuildFeatureParameter']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setBuildStepParameter(
      btLocator: string,
      stepId: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setBuildStepParameter(
        btLocator,
        stepId,
        fieldName,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.setBuildStepParameter']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a field of the matching build configuration.
     * @param {string} btLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setBuildTypeField(
      btLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setBuildTypeField(
        btLocator,
        field,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.setBuildTypeField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all templates of the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [optimizeSettings]
     * @param {string} [fields]
     * @param {BuildTypes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setBuildTypeTemplates(
      btLocator: string,
      optimizeSettings?: boolean,
      fields?: string,
      body?: BuildTypes,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildTypes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setBuildTypeTemplates(
        btLocator,
        optimizeSettings,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.setBuildTypeTemplates']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a parameter of a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setTriggerParameter(
      btLocator: string,
      triggerLocator: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setTriggerParameter(
        btLocator,
        triggerLocator,
        fieldName,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.setTriggerParameter']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterOfBuildType(
      name: string,
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameterOfBuildType(
        name,
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParameterOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterOfBuildType_7(
      name: string,
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameterOfBuildType_7(
        name,
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParameterOfBuildType_7']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameter specification.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterSpecificationOfBuildType(
      name: string,
      btLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateBuildParameterSpecificationOfBuildType(
          name,
          btLocator,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParameterSpecificationOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update type of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {Type} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterTypeOfBuildType(
      name: string,
      btLocator: string,
      body?: Type,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Type>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameterTypeOfBuildType(
        name,
        btLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParameterTypeOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterValueOfBuildType(
      name: string,
      btLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateBuildParameterValueOfBuildType(
          name,
          btLocator,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParameterValueOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterValueOfBuildType_8(
      name: string,
      btLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateBuildParameterValueOfBuildType_8(
          name,
          btLocator,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParameterValueOfBuildType_8']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParametersOfBuildType(
      btLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParametersOfBuildType(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParametersOfBuildType']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParametersOfBuildType_9(
      btLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParametersOfBuildType_9(
        btLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildParametersOfBuildType_9']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {VcsRootEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildTypeVcsRoot(
      btLocator: string,
      vcsRootLocator: string,
      fields?: string,
      body?: VcsRootEntry,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootEntry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildTypeVcsRoot(
        btLocator,
        vcsRootLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildTypeVcsRoot']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update checkout rules of a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildTypeVcsRootCheckoutRules(
      btLocator: string,
      vcsRootLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildTypeVcsRootCheckoutRules(
        btLocator,
        vcsRootLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BuildTypeApi.updateBuildTypeVcsRootCheckoutRules']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BuildTypeApi - factory interface
 * @export
 */
export const BuildTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BuildTypeApiFp(configuration);
  return {
    /**
     *
     * @summary Add an agent requirement to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {AgentRequirement} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAgentRequirementToBuildType(
      btLocator: string,
      fields?: string,
      body?: AgentRequirement,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentRequirement> {
      return localVarFp
        .addAgentRequirementToBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add an artifact dependency to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {ArtifactDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addArtifactDependencyToBuildType(
      btLocator: string,
      fields?: string,
      body?: ArtifactDependency,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ArtifactDependency> {
      return localVarFp
        .addArtifactDependencyToBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add build feature to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Feature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildFeatureToBuildType(
      btLocator: string,
      fields?: string,
      body?: Feature,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Feature> {
      return localVarFp
        .addBuildFeatureToBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a build step to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Step} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildStepToBuildType(
      btLocator: string,
      fields?: string,
      body?: Step,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Step> {
      return localVarFp
        .addBuildStepToBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a build template to the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [optimizeSettings]
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildTemplate(
      btLocator: string,
      optimizeSettings?: boolean,
      fields?: string,
      body?: BuildType,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .addBuildTemplate(btLocator, optimizeSettings, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build feature parameter for the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} parameterName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParameterToBuildFeature(
      btLocator: string,
      featureId: string,
      parameterName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .addParameterToBuildFeature(btLocator, featureId, parameterName, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a parameter to a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} parameterName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParameterToBuildStep(
      btLocator: string,
      stepId: string,
      parameterName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .addParameterToBuildStep(btLocator, stepId, parameterName, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a snapshot dependency to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {SnapshotDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSnapshotDependencyToBuildType(
      btLocator: string,
      fields?: string,
      body?: SnapshotDependency,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SnapshotDependency> {
      return localVarFp
        .addSnapshotDependencyToBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a trigger to the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Trigger} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTriggerToBuildType(
      btLocator: string,
      fields?: string,
      body?: Trigger,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Trigger> {
      return localVarFp
        .addTriggerToBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a VCS root to the matching build.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {VcsRootEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVcsRootToBuildType(
      btLocator: string,
      fields?: string,
      body?: VcsRootEntry,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootEntry> {
      return localVarFp
        .addVcsRootToBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildParameterOfBuildType(
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .createBuildParameterOfBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildParameterOfBuildType_1(
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .createBuildParameterOfBuildType_1(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new build configuration.
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildType(
      fields?: string,
      body?: BuildType,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .createBuildType(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentRequirement(
      btLocator: string,
      agentRequirementLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteAgentRequirement(btLocator, agentRequirementLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove an artifact dependency from the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArtifactDependency(
      btLocator: string,
      artifactDepLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteArtifactDependency(btLocator, artifactDepLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameterOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteBuildParameterOfBuildType(name, btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameterOfBuildType_2(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteBuildParameterOfBuildType_2(name, btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParametersOfBuildType(
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteBuildParametersOfBuildType(btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParametersOfBuildType_3(
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteBuildParametersOfBuildType_3(btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildStep(
      btLocator: string,
      stepId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteBuildStep(btLocator, stepId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildStepParameters(
      btLocator: string,
      stepId: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .deleteBuildStepParameters(btLocator, stepId, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete build configuration matching the locator.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildType(btLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteBuildType(btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureOfBuildType(
      btLocator: string,
      featureId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteFeatureOfBuildType(btLocator, featureId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapshotDependency(
      btLocator: string,
      snapshotDepLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteSnapshotDependency(btLocator, snapshotDepLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrigger(
      btLocator: string,
      triggerLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTrigger(btLocator, triggerLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVcsRootOfBuildType(
      btLocator: string,
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteVcsRootOfBuildType(btLocator, vcsRootLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Download specific file.
     * @param {string} path
     * @param {string} btLocator
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFileOfBuildType(
      path: string,
      btLocator: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .downloadFileOfBuildType(path, btLocator, resolveParameters, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentRequirement(
      btLocator: string,
      agentRequirementLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentRequirement> {
      return localVarFp
        .getAgentRequirement(btLocator, agentRequirementLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a setting of an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentRequirementParameter(
      btLocator: string,
      agentRequirementLocator: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getAgentRequirementParameter(btLocator, agentRequirementLocator, fieldName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get external IDs of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAliases(
      btLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Items> {
      return localVarFp
        .getAliases(btLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all agent requirements of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAgentRequirements(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentRequirements> {
      return localVarFp
        .getAllAgentRequirements(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all artifact dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllArtifactDependencies(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ArtifactDependencies> {
      return localVarFp
        .getAllArtifactDependencies(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all branches of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBranchesOfBuildType(
      btLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Branches> {
      return localVarFp
        .getAllBranchesOfBuildType(btLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all parameters of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildFeatureParameters(
      btLocator: string,
      featureId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getAllBuildFeatureParameters(btLocator, featureId, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all build features of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildFeatures(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Features> {
      return localVarFp
        .getAllBuildFeatures(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all parameters of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildStepParameters(
      btLocator: string,
      stepId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getAllBuildStepParameters(btLocator, stepId, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all build steps of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildSteps(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Steps> {
      return localVarFp
        .getAllBuildSteps(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all build templates of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildTemplates(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildTypes> {
      return localVarFp
        .getAllBuildTemplates(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all build configurations.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildTypes(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildTypes> {
      return localVarFp
        .getAllBuildTypes(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all investigations of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllInvestigationsOfBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Investigations> {
      return localVarFp
        .getAllInvestigationsOfBuildType(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all snapshot dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSnapshotDependencies(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SnapshotDependencies> {
      return localVarFp
        .getAllSnapshotDependencies(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all triggers of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTriggers(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Triggers> {
      return localVarFp
        .getAllTriggers(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all VCS roots of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllVcsRootsOfBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootEntries> {
      return localVarFp
        .getAllVcsRootsOfBuildType(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArtifactDependency(
      btLocator: string,
      artifactDepLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ArtifactDependency> {
      return localVarFp
        .getArtifactDependency(btLocator, artifactDepLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a parameter of an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArtifactDependencyParameter(
      btLocator: string,
      artifactDepLocator: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getArtifactDependencyParameter(btLocator, artifactDepLocator, fieldName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildFeature(
      btLocator: string,
      featureId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Feature> {
      return localVarFp
        .getBuildFeature(btLocator, featureId, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} parameterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildFeatureParameter(
      btLocator: string,
      featureId: string,
      parameterName: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildFeatureParameter(btLocator, featureId, parameterName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the setting of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildFeatureSetting(
      btLocator: string,
      featureId: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildFeatureSetting(btLocator, featureId, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterOfBuildType(
      name: string,
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .getBuildParameterOfBuildType(name, btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterOfBuildType_4(
      name: string,
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .getBuildParameterOfBuildType_4(name, btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameter specification.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterSpecificationOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildParameterSpecificationOfBuildType(name, btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get type of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterTypeOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Type> {
      return localVarFp
        .getBuildParameterTypeOfBuildType(name, btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterValueOfBuildType(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildParameterValueOfBuildType(name, btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterValueOfBuildType_5(
      name: string,
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildParameterValueOfBuildType_5(name, btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParametersOfBuildType(
      btLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getBuildParametersOfBuildType(btLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} btLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParametersOfBuildType_6(
      btLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getBuildParametersOfBuildType_6(btLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildStep(
      btLocator: string,
      stepId: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Step> {
      return localVarFp
        .getBuildStep(btLocator, stepId, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} parameterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildStepParameter(
      btLocator: string,
      stepId: string,
      parameterName: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildStepParameter(btLocator, stepId, parameterName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the setting of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildStepSetting(
      btLocator: string,
      stepId: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildStepSetting(btLocator, stepId, fieldName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a template of the matching build configuration.
     * @param {string} btLocator
     * @param {string} templateLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTemplate(
      btLocator: string,
      templateLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .getBuildTemplate(btLocator, templateLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build configuration matching the locator.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .getBuildType(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get tags of builds of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeBuildTags(
      btLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Tags> {
      return localVarFp
        .getBuildTypeBuildTags(btLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get builds of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeBuilds(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Builds> {
      return localVarFp
        .getBuildTypeBuilds(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a field of the matching build configuration.
     * @param {string} btLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeField(
      btLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildTypeField(btLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the settings file of the matching build configuration.
     * @param {string} btLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildTypeSettingsFile(
      btLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildTypeSettingsFile(btLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get metadata of specific file.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMetadataOfBuildType(
      path: string,
      btLocator: string,
      fields?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .getFileMetadataOfBuildType(path, btLocator, fields, resolveParameters, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List files under this path.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesListForSubpathOfBuildType(
      path: string,
      btLocator: string,
      basePath?: string,
      locator?: string,
      fields?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Files> {
      return localVarFp
        .getFilesListForSubpathOfBuildType(
          path,
          btLocator,
          basePath,
          locator,
          fields,
          resolveParameters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all files.
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesListOfBuildType(
      btLocator: string,
      basePath?: string,
      locator?: string,
      fields?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Files> {
      return localVarFp
        .getFilesListOfBuildType(btLocator, basePath, locator, fields, resolveParameters, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSnapshotDependency(
      btLocator: string,
      snapshotDepLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SnapshotDependency> {
      return localVarFp
        .getSnapshotDependency(btLocator, snapshotDepLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrigger(
      btLocator: string,
      triggerLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Trigger> {
      return localVarFp
        .getTrigger(btLocator, triggerLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a parameter of a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTriggerParameter(
      btLocator: string,
      triggerLocator: string,
      fieldName: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getTriggerParameter(btLocator, triggerLocator, fieldName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRoot(
      btLocator: string,
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootEntry> {
      return localVarFp
        .getVcsRoot(btLocator, vcsRootLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get checkout rules of a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootCheckoutRules(
      btLocator: string,
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getVcsRootCheckoutRules(btLocator, vcsRootLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all VCS root instances of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootInstancesOfBuildType(
      btLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootInstances> {
      return localVarFp
        .getVcsRootInstancesOfBuildType(btLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get specific file zipped.
     * @param {string} path
     * @param {string} btLocator
     * @param {string} [basePath]
     * @param {string} [locator]
     * @param {string} [name]
     * @param {boolean} [resolveParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getZippedFileOfBuildType(
      path: string,
      btLocator: string,
      basePath?: string,
      locator?: string,
      name?: string,
      resolveParameters?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .getZippedFileOfBuildType(
          path,
          btLocator,
          basePath,
          locator,
          name,
          resolveParameters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Move build type to another project.
     * @param {string} btLocator
     * @param {string} [targetProjectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuildType(
      btLocator: string,
      targetProjectId?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .moveBuildType(btLocator, targetProjectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Detach all templates from the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [inlineSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllTemplates(
      btLocator: string,
      inlineSettings?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeAllTemplates(btLocator, inlineSettings, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Detach a template from the matching build configuration.
     * @param {string} btLocator
     * @param {string} templateLocator
     * @param {boolean} [inlineSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTemplate(
      btLocator: string,
      templateLocator: string,
      inlineSettings?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeTemplate(btLocator, templateLocator, inlineSettings, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} [fields]
     * @param {AgentRequirement} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAgentRequirement(
      btLocator: string,
      agentRequirementLocator: string,
      fields?: string,
      body?: AgentRequirement,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentRequirement> {
      return localVarFp
        .replaceAgentRequirement(btLocator, agentRequirementLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all agent requirements of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {AgentRequirements} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllAgentRequirements(
      btLocator: string,
      fields?: string,
      body?: AgentRequirements,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentRequirements> {
      return localVarFp
        .replaceAllAgentRequirements(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all artifact dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {ArtifactDependencies} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllArtifactDependencies(
      btLocator: string,
      fields?: string,
      body?: ArtifactDependencies,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ArtifactDependencies> {
      return localVarFp
        .replaceAllArtifactDependencies(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all build features of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Features} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllBuildFeatures(
      btLocator: string,
      fields?: string,
      body?: Features,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Features> {
      return localVarFp
        .replaceAllBuildFeatures(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all build steps of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Steps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllBuildSteps(
      btLocator: string,
      fields?: string,
      body?: Steps,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Steps> {
      return localVarFp
        .replaceAllBuildSteps(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all snapshot dependencies of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {SnapshotDependencies} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllSnapshotDependencies(
      btLocator: string,
      fields?: string,
      body?: SnapshotDependencies,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SnapshotDependencies> {
      return localVarFp
        .replaceAllSnapshotDependencies(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all triggers of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Triggers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllTriggers(
      btLocator: string,
      fields?: string,
      body?: Triggers,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Triggers> {
      return localVarFp
        .replaceAllTriggers(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all VCS roots of the matching build configuration.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {VcsRootEntries} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceAllVcsRoots(
      btLocator: string,
      fields?: string,
      body?: VcsRootEntries,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootEntries> {
      return localVarFp
        .replaceAllVcsRoots(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} [fields]
     * @param {ArtifactDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceArtifactDependency(
      btLocator: string,
      artifactDepLocator: string,
      fields?: string,
      body?: ArtifactDependency,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ArtifactDependency> {
      return localVarFp
        .replaceArtifactDependency(btLocator, artifactDepLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {Feature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceBuildFeature(
      btLocator: string,
      featureId: string,
      fields?: string,
      body?: Feature,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Feature> {
      return localVarFp
        .replaceBuildFeature(btLocator, featureId, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceBuildFeatureParameters(
      btLocator: string,
      featureId: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .replaceBuildFeatureParameters(btLocator, featureId, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Replace a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} [fields]
     * @param {Step} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceBuildStep(
      btLocator: string,
      stepId: string,
      fields?: string,
      body?: Step,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Step> {
      return localVarFp
        .replaceBuildStep(btLocator, stepId, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a snapshot dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} snapshotDepLocator
     * @param {string} [fields]
     * @param {SnapshotDependency} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceSnapshotDependency(
      btLocator: string,
      snapshotDepLocator: string,
      fields?: string,
      body?: SnapshotDependency,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SnapshotDependency> {
      return localVarFp
        .replaceSnapshotDependency(btLocator, snapshotDepLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} [fields]
     * @param {Trigger} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceTrigger(
      btLocator: string,
      triggerLocator: string,
      fields?: string,
      body?: Trigger,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Trigger> {
      return localVarFp
        .replaceTrigger(btLocator, triggerLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a parameter of an agent requirement of the matching build configuration.
     * @param {string} btLocator
     * @param {string} agentRequirementLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentRequirementParameter(
      btLocator: string,
      agentRequirementLocator: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setAgentRequirementParameter(btLocator, agentRequirementLocator, fieldName, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a parameter of an artifact dependency of the matching build configuration.
     * @param {string} btLocator
     * @param {string} artifactDepLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setArtifactDependencyParameter(
      btLocator: string,
      artifactDepLocator: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setArtifactDependencyParameter(btLocator, artifactDepLocator, fieldName, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a parameter of a build feature of the matching build configuration.
     * @param {string} btLocator
     * @param {string} featureId
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildFeatureParameter(
      btLocator: string,
      featureId: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setBuildFeatureParameter(btLocator, featureId, name, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a parameter of a build step of the matching build configuration.
     * @param {string} btLocator
     * @param {string} stepId
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildStepParameter(
      btLocator: string,
      stepId: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setBuildStepParameter(btLocator, stepId, fieldName, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a field of the matching build configuration.
     * @param {string} btLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildTypeField(
      btLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setBuildTypeField(btLocator, field, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all templates of the matching build configuration.
     * @param {string} btLocator
     * @param {boolean} [optimizeSettings]
     * @param {string} [fields]
     * @param {BuildTypes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildTypeTemplates(
      btLocator: string,
      optimizeSettings?: boolean,
      fields?: string,
      body?: BuildTypes,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildTypes> {
      return localVarFp
        .setBuildTypeTemplates(btLocator, optimizeSettings, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a parameter of a trigger of the matching build configuration.
     * @param {string} btLocator
     * @param {string} triggerLocator
     * @param {string} fieldName
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTriggerParameter(
      btLocator: string,
      triggerLocator: string,
      fieldName: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setTriggerParameter(btLocator, triggerLocator, fieldName, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterOfBuildType(
      name: string,
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .updateBuildParameterOfBuildType(name, btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterOfBuildType_7(
      name: string,
      btLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .updateBuildParameterOfBuildType_7(name, btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameter specification.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterSpecificationOfBuildType(
      name: string,
      btLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .updateBuildParameterSpecificationOfBuildType(name, btLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update type of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {Type} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterTypeOfBuildType(
      name: string,
      btLocator: string,
      body?: Type,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Type> {
      return localVarFp
        .updateBuildParameterTypeOfBuildType(name, btLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterValueOfBuildType(
      name: string,
      btLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .updateBuildParameterValueOfBuildType(name, btLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} btLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterValueOfBuildType_8(
      name: string,
      btLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .updateBuildParameterValueOfBuildType_8(name, btLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParametersOfBuildType(
      btLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .updateBuildParametersOfBuildType(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} btLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParametersOfBuildType_9(
      btLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .updateBuildParametersOfBuildType_9(btLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {VcsRootEntry} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildTypeVcsRoot(
      btLocator: string,
      vcsRootLocator: string,
      fields?: string,
      body?: VcsRootEntry,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootEntry> {
      return localVarFp
        .updateBuildTypeVcsRoot(btLocator, vcsRootLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update checkout rules of a VCS root of the matching build configuration.
     * @param {string} btLocator
     * @param {string} vcsRootLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildTypeVcsRootCheckoutRules(
      btLocator: string,
      vcsRootLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .updateBuildTypeVcsRootCheckoutRules(btLocator, vcsRootLocator, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BuildTypeApi - interface
 * @export
 * @interface BuildTypeApi
 */
export interface BuildTypeApiInterface {
  /**
   *
   * @summary Add an agent requirement to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {AgentRequirement} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addAgentRequirementToBuildType(
    btLocator: string,
    fields?: string,
    body?: AgentRequirement,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentRequirement>;

  /**
   *
   * @summary Add an artifact dependency to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {ArtifactDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addArtifactDependencyToBuildType(
    btLocator: string,
    fields?: string,
    body?: ArtifactDependency,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ArtifactDependency>;

  /**
   *
   * @summary Add build feature to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Feature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addBuildFeatureToBuildType(
    btLocator: string,
    fields?: string,
    body?: Feature,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Feature>;

  /**
   *
   * @summary Add a build step to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Step} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addBuildStepToBuildType(
    btLocator: string,
    fields?: string,
    body?: Step,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Step>;

  /**
   *
   * @summary Add a build template to the matching build configuration.
   * @param {string} btLocator
   * @param {boolean} [optimizeSettings]
   * @param {string} [fields]
   * @param {BuildType} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addBuildTemplate(
    btLocator: string,
    optimizeSettings?: boolean,
    fields?: string,
    body?: BuildType,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary Update build feature parameter for the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} parameterName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addParameterToBuildFeature(
    btLocator: string,
    featureId: string,
    parameterName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Add a parameter to a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} parameterName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addParameterToBuildStep(
    btLocator: string,
    stepId: string,
    parameterName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Add a snapshot dependency to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {SnapshotDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addSnapshotDependencyToBuildType(
    btLocator: string,
    fields?: string,
    body?: SnapshotDependency,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SnapshotDependency>;

  /**
   *
   * @summary Add a trigger to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Trigger} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addTriggerToBuildType(
    btLocator: string,
    fields?: string,
    body?: Trigger,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Trigger>;

  /**
   *
   * @summary Add a VCS root to the matching build.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {VcsRootEntry} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  addVcsRootToBuildType(
    btLocator: string,
    fields?: string,
    body?: VcsRootEntry,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootEntry>;

  /**
   *
   * @summary Create a build parameter.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  createBuildParameterOfBuildType(
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Create a build parameter.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  createBuildParameterOfBuildType_1(
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Create a new build configuration.
   * @param {string} [fields]
   * @param {BuildType} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  createBuildType(
    fields?: string,
    body?: BuildType,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary Remove an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteAgentRequirement(
    btLocator: string,
    agentRequirementLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Remove an artifact dependency from the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteArtifactDependency(
    btLocator: string,
    artifactDepLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteBuildParameterOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteBuildParameterOfBuildType_2(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete all build parameters.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteBuildParametersOfBuildType(
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete all build parameters.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteBuildParametersOfBuildType_3(
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteBuildStep(
    btLocator: string,
    stepId: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Update a parameter of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteBuildStepParameters(
    btLocator: string,
    stepId: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Delete build configuration matching the locator.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteBuildType(btLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Remove a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteFeatureOfBuildType(
    btLocator: string,
    featureId: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete a snapshot dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} snapshotDepLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteSnapshotDependency(
    btLocator: string,
    snapshotDepLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteTrigger(
    btLocator: string,
    triggerLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Remove a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  deleteVcsRootOfBuildType(
    btLocator: string,
    vcsRootLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Download specific file.
   * @param {string} path
   * @param {string} btLocator
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  downloadFileOfBuildType(
    path: string,
    btLocator: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Get an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAgentRequirement(
    btLocator: string,
    agentRequirementLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentRequirement>;

  /**
   *
   * @summary Get a setting of an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAgentRequirementParameter(
    btLocator: string,
    agentRequirementLocator: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get external IDs of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAliases(
    btLocator: string,
    field?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Items>;

  /**
   *
   * @summary Get all agent requirements of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllAgentRequirements(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentRequirements>;

  /**
   *
   * @summary Get all artifact dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllArtifactDependencies(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ArtifactDependencies>;

  /**
   *
   * @summary Get all branches of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllBranchesOfBuildType(
    btLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Branches>;

  /**
   *
   * @summary Get all parameters of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllBuildFeatureParameters(
    btLocator: string,
    featureId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get all build features of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllBuildFeatures(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Features>;

  /**
   *
   * @summary Get all parameters of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllBuildStepParameters(
    btLocator: string,
    stepId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get all build steps of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllBuildSteps(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Steps>;

  /**
   *
   * @summary Get all build templates of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllBuildTemplates(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildTypes>;

  /**
   *
   * @summary Get all build configurations.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllBuildTypes(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildTypes>;

  /**
   *
   * @summary Get all investigations of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllInvestigationsOfBuildType(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Investigations>;

  /**
   *
   * @summary Get all snapshot dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllSnapshotDependencies(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SnapshotDependencies>;

  /**
   *
   * @summary Get all triggers of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllTriggers(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Triggers>;

  /**
   *
   * @summary Get all VCS roots of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getAllVcsRootsOfBuildType(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootEntries>;

  /**
   *
   * @summary Get an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getArtifactDependency(
    btLocator: string,
    artifactDepLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ArtifactDependency>;

  /**
   *
   * @summary Get a parameter of an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getArtifactDependencyParameter(
    btLocator: string,
    artifactDepLocator: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildFeature(
    btLocator: string,
    featureId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Feature>;

  /**
   *
   * @summary Get a parameter of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} parameterName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildFeatureParameter(
    btLocator: string,
    featureId: string,
    parameterName: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get the setting of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildFeatureSetting(
    btLocator: string,
    featureId: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParameterOfBuildType(
    name: string,
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Get build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParameterOfBuildType_4(
    name: string,
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Get build parameter specification.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParameterSpecificationOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get type of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParameterTypeOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Type>;

  /**
   *
   * @summary Get value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParameterValueOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParameterValueOfBuildType_5(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get build parameters.
   * @param {string} btLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParametersOfBuildType(
    btLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get build parameters.
   * @param {string} btLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildParametersOfBuildType_6(
    btLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildStep(
    btLocator: string,
    stepId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Step>;

  /**
   *
   * @summary Get a parameter of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} parameterName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildStepParameter(
    btLocator: string,
    stepId: string,
    parameterName: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get the setting of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildStepSetting(
    btLocator: string,
    stepId: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get a template of the matching build configuration.
   * @param {string} btLocator
   * @param {string} templateLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildTemplate(
    btLocator: string,
    templateLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary Get build configuration matching the locator.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildType(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary Get tags of builds of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildTypeBuildTags(
    btLocator: string,
    field?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Tags>;

  /**
   *
   * @summary Get builds of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildTypeBuilds(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Builds>;

  /**
   *
   * @summary Get a field of the matching build configuration.
   * @param {string} btLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildTypeField(
    btLocator: string,
    field: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get the settings file of the matching build configuration.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getBuildTypeSettingsFile(
    btLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get metadata of specific file.
   * @param {string} path
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getFileMetadataOfBuildType(
    path: string,
    btLocator: string,
    fields?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>;

  /**
   *
   * @summary List files under this path.
   * @param {string} path
   * @param {string} btLocator
   * @param {string} [basePath]
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getFilesListForSubpathOfBuildType(
    path: string,
    btLocator: string,
    basePath?: string,
    locator?: string,
    fields?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Files>;

  /**
   *
   * @summary List all files.
   * @param {string} btLocator
   * @param {string} [basePath]
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getFilesListOfBuildType(
    btLocator: string,
    basePath?: string,
    locator?: string,
    fields?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Files>;

  /**
   *
   * @summary Get a snapshot dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} snapshotDepLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getSnapshotDependency(
    btLocator: string,
    snapshotDepLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SnapshotDependency>;

  /**
   *
   * @summary Get a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getTrigger(
    btLocator: string,
    triggerLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Trigger>;

  /**
   *
   * @summary Get a parameter of a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getTriggerParameter(
    btLocator: string,
    triggerLocator: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getVcsRoot(
    btLocator: string,
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootEntry>;

  /**
   *
   * @summary Get checkout rules of a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getVcsRootCheckoutRules(
    btLocator: string,
    vcsRootLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get all VCS root instances of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getVcsRootInstancesOfBuildType(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootInstances>;

  /**
   *
   * @summary Get specific file zipped.
   * @param {string} path
   * @param {string} btLocator
   * @param {string} [basePath]
   * @param {string} [locator]
   * @param {string} [name]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  getZippedFileOfBuildType(
    path: string,
    btLocator: string,
    basePath?: string,
    locator?: string,
    name?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Move build type to another project.
   * @param {string} btLocator
   * @param {string} [targetProjectId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  moveBuildType(
    btLocator: string,
    targetProjectId?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Detach all templates from the matching build configuration.
   * @param {string} btLocator
   * @param {boolean} [inlineSettings]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  removeAllTemplates(
    btLocator: string,
    inlineSettings?: boolean,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Detach a template from the matching build configuration.
   * @param {string} btLocator
   * @param {string} templateLocator
   * @param {boolean} [inlineSettings]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  removeTemplate(
    btLocator: string,
    templateLocator: string,
    inlineSettings?: boolean,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Update an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} [fields]
   * @param {AgentRequirement} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAgentRequirement(
    btLocator: string,
    agentRequirementLocator: string,
    fields?: string,
    body?: AgentRequirement,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentRequirement>;

  /**
   *
   * @summary Update all agent requirements of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {AgentRequirements} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAllAgentRequirements(
    btLocator: string,
    fields?: string,
    body?: AgentRequirements,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentRequirements>;

  /**
   *
   * @summary Update all artifact dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {ArtifactDependencies} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAllArtifactDependencies(
    btLocator: string,
    fields?: string,
    body?: ArtifactDependencies,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ArtifactDependencies>;

  /**
   *
   * @summary Update all build features of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Features} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAllBuildFeatures(
    btLocator: string,
    fields?: string,
    body?: Features,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Features>;

  /**
   *
   * @summary Update all build steps of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Steps} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAllBuildSteps(
    btLocator: string,
    fields?: string,
    body?: Steps,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Steps>;

  /**
   *
   * @summary Update all snapshot dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {SnapshotDependencies} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAllSnapshotDependencies(
    btLocator: string,
    fields?: string,
    body?: SnapshotDependencies,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SnapshotDependencies>;

  /**
   *
   * @summary Update all triggers of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Triggers} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAllTriggers(
    btLocator: string,
    fields?: string,
    body?: Triggers,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Triggers>;

  /**
   *
   * @summary Update all VCS roots of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {VcsRootEntries} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceAllVcsRoots(
    btLocator: string,
    fields?: string,
    body?: VcsRootEntries,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootEntries>;

  /**
   *
   * @summary Update an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} [fields]
   * @param {ArtifactDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceArtifactDependency(
    btLocator: string,
    artifactDepLocator: string,
    fields?: string,
    body?: ArtifactDependency,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ArtifactDependency>;

  /**
   *
   * @summary Update a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {Feature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceBuildFeature(
    btLocator: string,
    featureId: string,
    fields?: string,
    body?: Feature,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Feature>;

  /**
   *
   * @summary Update a parameter of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceBuildFeatureParameters(
    btLocator: string,
    featureId: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Replace a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {Step} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceBuildStep(
    btLocator: string,
    stepId: string,
    fields?: string,
    body?: Step,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Step>;

  /**
   *
   * @summary Update a snapshot dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} snapshotDepLocator
   * @param {string} [fields]
   * @param {SnapshotDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceSnapshotDependency(
    btLocator: string,
    snapshotDepLocator: string,
    fields?: string,
    body?: SnapshotDependency,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SnapshotDependency>;

  /**
   *
   * @summary Update a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} [fields]
   * @param {Trigger} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  replaceTrigger(
    btLocator: string,
    triggerLocator: string,
    fields?: string,
    body?: Trigger,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Trigger>;

  /**
   *
   * @summary Update a parameter of an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  setAgentRequirementParameter(
    btLocator: string,
    agentRequirementLocator: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update a parameter of an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  setArtifactDependencyParameter(
    btLocator: string,
    artifactDepLocator: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update a parameter of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  setBuildFeatureParameter(
    btLocator: string,
    featureId: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update a parameter of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  setBuildStepParameter(
    btLocator: string,
    stepId: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update a field of the matching build configuration.
   * @param {string} btLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  setBuildTypeField(
    btLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update all templates of the matching build configuration.
   * @param {string} btLocator
   * @param {boolean} [optimizeSettings]
   * @param {string} [fields]
   * @param {BuildTypes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  setBuildTypeTemplates(
    btLocator: string,
    optimizeSettings?: boolean,
    fields?: string,
    body?: BuildTypes,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildTypes>;

  /**
   *
   * @summary Update a parameter of a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  setTriggerParameter(
    btLocator: string,
    triggerLocator: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParameterOfBuildType(
    name: string,
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Update build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParameterOfBuildType_7(
    name: string,
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Update build parameter specification.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParameterSpecificationOfBuildType(
    name: string,
    btLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update type of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {Type} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParameterTypeOfBuildType(
    name: string,
    btLocator: string,
    body?: Type,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Type>;

  /**
   *
   * @summary Update value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParameterValueOfBuildType(
    name: string,
    btLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParameterValueOfBuildType_8(
    name: string,
    btLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update build parameters.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParametersOfBuildType(
    btLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Update build parameters.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildParametersOfBuildType_9(
    btLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Update a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {VcsRootEntry} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildTypeVcsRoot(
    btLocator: string,
    vcsRootLocator: string,
    fields?: string,
    body?: VcsRootEntry,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootEntry>;

  /**
   *
   * @summary Update checkout rules of a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApiInterface
   */
  updateBuildTypeVcsRootCheckoutRules(
    btLocator: string,
    vcsRootLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;
}

/**
 * BuildTypeApi - object-oriented interface
 * @export
 * @class BuildTypeApi
 * @extends {BaseAPI}
 */
export class BuildTypeApi extends BaseAPI implements BuildTypeApiInterface {
  /**
   *
   * @summary Add an agent requirement to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {AgentRequirement} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addAgentRequirementToBuildType(
    btLocator: string,
    fields?: string,
    body?: AgentRequirement,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addAgentRequirementToBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add an artifact dependency to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {ArtifactDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addArtifactDependencyToBuildType(
    btLocator: string,
    fields?: string,
    body?: ArtifactDependency,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addArtifactDependencyToBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add build feature to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Feature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addBuildFeatureToBuildType(
    btLocator: string,
    fields?: string,
    body?: Feature,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addBuildFeatureToBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a build step to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Step} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addBuildStepToBuildType(
    btLocator: string,
    fields?: string,
    body?: Step,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addBuildStepToBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a build template to the matching build configuration.
   * @param {string} btLocator
   * @param {boolean} [optimizeSettings]
   * @param {string} [fields]
   * @param {BuildType} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addBuildTemplate(
    btLocator: string,
    optimizeSettings?: boolean,
    fields?: string,
    body?: BuildType,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addBuildTemplate(btLocator, optimizeSettings, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build feature parameter for the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} parameterName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addParameterToBuildFeature(
    btLocator: string,
    featureId: string,
    parameterName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addParameterToBuildFeature(btLocator, featureId, parameterName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a parameter to a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} parameterName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addParameterToBuildStep(
    btLocator: string,
    stepId: string,
    parameterName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addParameterToBuildStep(btLocator, stepId, parameterName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a snapshot dependency to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {SnapshotDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addSnapshotDependencyToBuildType(
    btLocator: string,
    fields?: string,
    body?: SnapshotDependency,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addSnapshotDependencyToBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a trigger to the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Trigger} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addTriggerToBuildType(
    btLocator: string,
    fields?: string,
    body?: Trigger,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addTriggerToBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a VCS root to the matching build.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {VcsRootEntry} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public addVcsRootToBuildType(
    btLocator: string,
    fields?: string,
    body?: VcsRootEntry,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .addVcsRootToBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a build parameter.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public createBuildParameterOfBuildType(
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .createBuildParameterOfBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a build parameter.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public createBuildParameterOfBuildType_1(
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .createBuildParameterOfBuildType_1(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new build configuration.
   * @param {string} [fields]
   * @param {BuildType} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public createBuildType(fields?: string, body?: BuildType, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .createBuildType(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteAgentRequirement(
    btLocator: string,
    agentRequirementLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteAgentRequirement(btLocator, agentRequirementLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove an artifact dependency from the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteArtifactDependency(
    btLocator: string,
    artifactDepLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteArtifactDependency(btLocator, artifactDepLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteBuildParameterOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteBuildParameterOfBuildType(name, btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteBuildParameterOfBuildType_2(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteBuildParameterOfBuildType_2(name, btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete all build parameters.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteBuildParametersOfBuildType(btLocator: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .deleteBuildParametersOfBuildType(btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete all build parameters.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteBuildParametersOfBuildType_3(btLocator: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .deleteBuildParametersOfBuildType_3(btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteBuildStep(btLocator: string, stepId: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .deleteBuildStep(btLocator, stepId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a parameter of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteBuildStepParameters(
    btLocator: string,
    stepId: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteBuildStepParameters(btLocator, stepId, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete build configuration matching the locator.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteBuildType(btLocator: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .deleteBuildType(btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteFeatureOfBuildType(
    btLocator: string,
    featureId: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteFeatureOfBuildType(btLocator, featureId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a snapshot dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} snapshotDepLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteSnapshotDependency(
    btLocator: string,
    snapshotDepLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteSnapshotDependency(btLocator, snapshotDepLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteTrigger(btLocator: string, triggerLocator: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .deleteTrigger(btLocator, triggerLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public deleteVcsRootOfBuildType(
    btLocator: string,
    vcsRootLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .deleteVcsRootOfBuildType(btLocator, vcsRootLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Download specific file.
   * @param {string} path
   * @param {string} btLocator
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public downloadFileOfBuildType(
    path: string,
    btLocator: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .downloadFileOfBuildType(path, btLocator, resolveParameters, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAgentRequirement(
    btLocator: string,
    agentRequirementLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAgentRequirement(btLocator, agentRequirementLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a setting of an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAgentRequirementParameter(
    btLocator: string,
    agentRequirementLocator: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAgentRequirementParameter(btLocator, agentRequirementLocator, fieldName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get external IDs of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAliases(btLocator: string, field?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getAliases(btLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all agent requirements of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllAgentRequirements(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllAgentRequirements(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all artifact dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllArtifactDependencies(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllArtifactDependencies(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all branches of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllBranchesOfBuildType(
    btLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllBranchesOfBuildType(btLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all parameters of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllBuildFeatureParameters(
    btLocator: string,
    featureId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllBuildFeatureParameters(btLocator, featureId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all build features of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllBuildFeatures(btLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getAllBuildFeatures(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all parameters of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllBuildStepParameters(
    btLocator: string,
    stepId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllBuildStepParameters(btLocator, stepId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all build steps of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllBuildSteps(btLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getAllBuildSteps(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all build templates of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllBuildTemplates(btLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getAllBuildTemplates(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all build configurations.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllBuildTypes(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getAllBuildTypes(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all investigations of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllInvestigationsOfBuildType(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllInvestigationsOfBuildType(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all snapshot dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllSnapshotDependencies(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllSnapshotDependencies(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all triggers of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllTriggers(btLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getAllTriggers(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all VCS roots of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getAllVcsRootsOfBuildType(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getAllVcsRootsOfBuildType(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getArtifactDependency(
    btLocator: string,
    artifactDepLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getArtifactDependency(btLocator, artifactDepLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a parameter of an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getArtifactDependencyParameter(
    btLocator: string,
    artifactDepLocator: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getArtifactDependencyParameter(btLocator, artifactDepLocator, fieldName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildFeature(
    btLocator: string,
    featureId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildFeature(btLocator, featureId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a parameter of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} parameterName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildFeatureParameter(
    btLocator: string,
    featureId: string,
    parameterName: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildFeatureParameter(btLocator, featureId, parameterName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the setting of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildFeatureSetting(
    btLocator: string,
    featureId: string,
    name: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildFeatureSetting(btLocator, featureId, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParameterOfBuildType(
    name: string,
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParameterOfBuildType(name, btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParameterOfBuildType_4(
    name: string,
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParameterOfBuildType_4(name, btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameter specification.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParameterSpecificationOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParameterSpecificationOfBuildType(name, btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get type of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParameterTypeOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParameterTypeOfBuildType(name, btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParameterValueOfBuildType(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParameterValueOfBuildType(name, btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParameterValueOfBuildType_5(
    name: string,
    btLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParameterValueOfBuildType_5(name, btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameters.
   * @param {string} btLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParametersOfBuildType(
    btLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParametersOfBuildType(btLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameters.
   * @param {string} btLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildParametersOfBuildType_6(
    btLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildParametersOfBuildType_6(btLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildStep(
    btLocator: string,
    stepId: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildStep(btLocator, stepId, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a parameter of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} parameterName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildStepParameter(
    btLocator: string,
    stepId: string,
    parameterName: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildStepParameter(btLocator, stepId, parameterName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the setting of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildStepSetting(
    btLocator: string,
    stepId: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildStepSetting(btLocator, stepId, fieldName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a template of the matching build configuration.
   * @param {string} btLocator
   * @param {string} templateLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildTemplate(
    btLocator: string,
    templateLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getBuildTemplate(btLocator, templateLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build configuration matching the locator.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildType(btLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getBuildType(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get tags of builds of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildTypeBuildTags(btLocator: string, field?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getBuildTypeBuildTags(btLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get builds of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildTypeBuilds(btLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getBuildTypeBuilds(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a field of the matching build configuration.
   * @param {string} btLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildTypeField(btLocator: string, field: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getBuildTypeField(btLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the settings file of the matching build configuration.
   * @param {string} btLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getBuildTypeSettingsFile(btLocator: string, options?: RawAxiosRequestConfig) {
    return BuildTypeApiFp(this.configuration)
      .getBuildTypeSettingsFile(btLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get metadata of specific file.
   * @param {string} path
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getFileMetadataOfBuildType(
    path: string,
    btLocator: string,
    fields?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getFileMetadataOfBuildType(path, btLocator, fields, resolveParameters, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List files under this path.
   * @param {string} path
   * @param {string} btLocator
   * @param {string} [basePath]
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getFilesListForSubpathOfBuildType(
    path: string,
    btLocator: string,
    basePath?: string,
    locator?: string,
    fields?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getFilesListForSubpathOfBuildType(
        path,
        btLocator,
        basePath,
        locator,
        fields,
        resolveParameters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all files.
   * @param {string} btLocator
   * @param {string} [basePath]
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getFilesListOfBuildType(
    btLocator: string,
    basePath?: string,
    locator?: string,
    fields?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getFilesListOfBuildType(btLocator, basePath, locator, fields, resolveParameters, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a snapshot dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} snapshotDepLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getSnapshotDependency(
    btLocator: string,
    snapshotDepLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getSnapshotDependency(btLocator, snapshotDepLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getTrigger(
    btLocator: string,
    triggerLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getTrigger(btLocator, triggerLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a parameter of a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getTriggerParameter(
    btLocator: string,
    triggerLocator: string,
    fieldName: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getTriggerParameter(btLocator, triggerLocator, fieldName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getVcsRoot(
    btLocator: string,
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getVcsRoot(btLocator, vcsRootLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get checkout rules of a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getVcsRootCheckoutRules(
    btLocator: string,
    vcsRootLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getVcsRootCheckoutRules(btLocator, vcsRootLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all VCS root instances of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getVcsRootInstancesOfBuildType(
    btLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getVcsRootInstancesOfBuildType(btLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get specific file zipped.
   * @param {string} path
   * @param {string} btLocator
   * @param {string} [basePath]
   * @param {string} [locator]
   * @param {string} [name]
   * @param {boolean} [resolveParameters]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public getZippedFileOfBuildType(
    path: string,
    btLocator: string,
    basePath?: string,
    locator?: string,
    name?: string,
    resolveParameters?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .getZippedFileOfBuildType(
        path,
        btLocator,
        basePath,
        locator,
        name,
        resolveParameters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Move build type to another project.
   * @param {string} btLocator
   * @param {string} [targetProjectId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public moveBuildType(
    btLocator: string,
    targetProjectId?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .moveBuildType(btLocator, targetProjectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Detach all templates from the matching build configuration.
   * @param {string} btLocator
   * @param {boolean} [inlineSettings]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public removeAllTemplates(
    btLocator: string,
    inlineSettings?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .removeAllTemplates(btLocator, inlineSettings, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Detach a template from the matching build configuration.
   * @param {string} btLocator
   * @param {string} templateLocator
   * @param {boolean} [inlineSettings]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public removeTemplate(
    btLocator: string,
    templateLocator: string,
    inlineSettings?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .removeTemplate(btLocator, templateLocator, inlineSettings, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} [fields]
   * @param {AgentRequirement} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAgentRequirement(
    btLocator: string,
    agentRequirementLocator: string,
    fields?: string,
    body?: AgentRequirement,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAgentRequirement(btLocator, agentRequirementLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all agent requirements of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {AgentRequirements} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAllAgentRequirements(
    btLocator: string,
    fields?: string,
    body?: AgentRequirements,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAllAgentRequirements(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all artifact dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {ArtifactDependencies} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAllArtifactDependencies(
    btLocator: string,
    fields?: string,
    body?: ArtifactDependencies,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAllArtifactDependencies(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all build features of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Features} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAllBuildFeatures(
    btLocator: string,
    fields?: string,
    body?: Features,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAllBuildFeatures(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all build steps of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Steps} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAllBuildSteps(
    btLocator: string,
    fields?: string,
    body?: Steps,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAllBuildSteps(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all snapshot dependencies of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {SnapshotDependencies} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAllSnapshotDependencies(
    btLocator: string,
    fields?: string,
    body?: SnapshotDependencies,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAllSnapshotDependencies(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all triggers of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Triggers} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAllTriggers(
    btLocator: string,
    fields?: string,
    body?: Triggers,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAllTriggers(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all VCS roots of the matching build configuration.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {VcsRootEntries} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceAllVcsRoots(
    btLocator: string,
    fields?: string,
    body?: VcsRootEntries,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceAllVcsRoots(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} [fields]
   * @param {ArtifactDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceArtifactDependency(
    btLocator: string,
    artifactDepLocator: string,
    fields?: string,
    body?: ArtifactDependency,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceArtifactDependency(btLocator, artifactDepLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {Feature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceBuildFeature(
    btLocator: string,
    featureId: string,
    fields?: string,
    body?: Feature,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceBuildFeature(btLocator, featureId, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a parameter of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceBuildFeatureParameters(
    btLocator: string,
    featureId: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceBuildFeatureParameters(btLocator, featureId, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Replace a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} [fields]
   * @param {Step} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceBuildStep(
    btLocator: string,
    stepId: string,
    fields?: string,
    body?: Step,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceBuildStep(btLocator, stepId, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a snapshot dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} snapshotDepLocator
   * @param {string} [fields]
   * @param {SnapshotDependency} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceSnapshotDependency(
    btLocator: string,
    snapshotDepLocator: string,
    fields?: string,
    body?: SnapshotDependency,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceSnapshotDependency(btLocator, snapshotDepLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} [fields]
   * @param {Trigger} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public replaceTrigger(
    btLocator: string,
    triggerLocator: string,
    fields?: string,
    body?: Trigger,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .replaceTrigger(btLocator, triggerLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a parameter of an agent requirement of the matching build configuration.
   * @param {string} btLocator
   * @param {string} agentRequirementLocator
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public setAgentRequirementParameter(
    btLocator: string,
    agentRequirementLocator: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .setAgentRequirementParameter(btLocator, agentRequirementLocator, fieldName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a parameter of an artifact dependency of the matching build configuration.
   * @param {string} btLocator
   * @param {string} artifactDepLocator
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public setArtifactDependencyParameter(
    btLocator: string,
    artifactDepLocator: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .setArtifactDependencyParameter(btLocator, artifactDepLocator, fieldName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a parameter of a build feature of the matching build configuration.
   * @param {string} btLocator
   * @param {string} featureId
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public setBuildFeatureParameter(
    btLocator: string,
    featureId: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .setBuildFeatureParameter(btLocator, featureId, name, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a parameter of a build step of the matching build configuration.
   * @param {string} btLocator
   * @param {string} stepId
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public setBuildStepParameter(
    btLocator: string,
    stepId: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .setBuildStepParameter(btLocator, stepId, fieldName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a field of the matching build configuration.
   * @param {string} btLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public setBuildTypeField(
    btLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .setBuildTypeField(btLocator, field, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all templates of the matching build configuration.
   * @param {string} btLocator
   * @param {boolean} [optimizeSettings]
   * @param {string} [fields]
   * @param {BuildTypes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public setBuildTypeTemplates(
    btLocator: string,
    optimizeSettings?: boolean,
    fields?: string,
    body?: BuildTypes,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .setBuildTypeTemplates(btLocator, optimizeSettings, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a parameter of a trigger of the matching build configuration.
   * @param {string} btLocator
   * @param {string} triggerLocator
   * @param {string} fieldName
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public setTriggerParameter(
    btLocator: string,
    triggerLocator: string,
    fieldName: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .setTriggerParameter(btLocator, triggerLocator, fieldName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParameterOfBuildType(
    name: string,
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParameterOfBuildType(name, btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParameterOfBuildType_7(
    name: string,
    btLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParameterOfBuildType_7(name, btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameter specification.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParameterSpecificationOfBuildType(
    name: string,
    btLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParameterSpecificationOfBuildType(name, btLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update type of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {Type} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParameterTypeOfBuildType(
    name: string,
    btLocator: string,
    body?: Type,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParameterTypeOfBuildType(name, btLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParameterValueOfBuildType(
    name: string,
    btLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParameterValueOfBuildType(name, btLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update value of build parameter.
   * @param {string} name
   * @param {string} btLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParameterValueOfBuildType_8(
    name: string,
    btLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParameterValueOfBuildType_8(name, btLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameters.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParametersOfBuildType(
    btLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParametersOfBuildType(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameters.
   * @param {string} btLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildParametersOfBuildType_9(
    btLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildParametersOfBuildType_9(btLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {VcsRootEntry} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildTypeVcsRoot(
    btLocator: string,
    vcsRootLocator: string,
    fields?: string,
    body?: VcsRootEntry,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildTypeVcsRoot(btLocator, vcsRootLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update checkout rules of a VCS root of the matching build configuration.
   * @param {string} btLocator
   * @param {string} vcsRootLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuildTypeApi
   */
  public updateBuildTypeVcsRootCheckoutRules(
    btLocator: string,
    vcsRootLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BuildTypeApiFp(this.configuration)
      .updateBuildTypeVcsRootCheckoutRules(btLocator, vcsRootLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { AgentType } from '../models';

/**
 * AgentTypeApi - axios parameter creator
 * @export
 */
export const AgentTypeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get agent type matching the locator.
     * @param {string} agentTypeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentType: async (
      agentTypeLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentTypeLocator' is not null or undefined
      assertParamExists('getAgentType', 'agentTypeLocator', agentTypeLocator);
      const localVarPath = `/app/rest/agentTypes/{agentTypeLocator}`.replace(
        `{${'agentTypeLocator'}}`,
        encodeURIComponent(String(agentTypeLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AgentTypeApi - functional programming interface
 * @export
 */
export const AgentTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AgentTypeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get agent type matching the locator.
     * @param {string} agentTypeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAgentType(
      agentTypeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentType(
        agentTypeLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AgentTypeApi.getAgentType']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AgentTypeApi - factory interface
 * @export
 */
export const AgentTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AgentTypeApiFp(configuration);
  return {
    /**
     *
     * @summary Get agent type matching the locator.
     * @param {string} agentTypeLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentType(
      agentTypeLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentType> {
      return localVarFp
        .getAgentType(agentTypeLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AgentTypeApi - interface
 * @export
 * @interface AgentTypeApi
 */
export interface AgentTypeApiInterface {
  /**
   *
   * @summary Get agent type matching the locator.
   * @param {string} agentTypeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTypeApiInterface
   */
  getAgentType(
    agentTypeLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentType>;
}

/**
 * AgentTypeApi - object-oriented interface
 * @export
 * @class AgentTypeApi
 * @extends {BaseAPI}
 */
export class AgentTypeApi extends BaseAPI implements AgentTypeApiInterface {
  /**
   *
   * @summary Get agent type matching the locator.
   * @param {string} agentTypeLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentTypeApi
   */
  public getAgentType(agentTypeLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return AgentTypeApiFp(this.configuration)
      .getAgentType(agentTypeLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

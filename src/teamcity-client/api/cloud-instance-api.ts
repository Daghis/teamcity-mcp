/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { CloudImage } from '../models';
// @ts-ignore
import type { CloudImages } from '../models';
// @ts-ignore
import type { CloudInstance } from '../models';
// @ts-ignore
import type { CloudInstances } from '../models';
// @ts-ignore
import type { CloudProfile } from '../models';
// @ts-ignore
import type { CloudProfiles } from '../models';

/**
 * CloudInstanceApi - axios parameter creator
 * @export
 */
export const CloudInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Terminates existing cloud instance immediately
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forseTerminateInstance: async (
      instanceLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceLocator' is not null or undefined
      assertParamExists('forseTerminateInstance', 'instanceLocator', instanceLocator);
      const localVarPath = `/app/rest/cloud/instances/{instanceLocator}/actions/forceStop`.replace(
        `{${'instanceLocator'}}`,
        encodeURIComponent(String(instanceLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all cloud images.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCloudImages: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/cloud/images`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all cloud instances.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCloudInstances: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/cloud/instances`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all cloud profiles.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCloudProfiles: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/cloud/profiles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get cloud image matching the locator.
     * @param {string} imageLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudImage: async (
      imageLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'imageLocator' is not null or undefined
      assertParamExists('getCloudImage', 'imageLocator', imageLocator);
      const localVarPath = `/app/rest/cloud/images/{imageLocator}`.replace(
        `{${'imageLocator'}}`,
        encodeURIComponent(String(imageLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get cloud instance matching the locator.
     * @param {string} instanceLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudInstance: async (
      instanceLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceLocator' is not null or undefined
      assertParamExists('getCloudInstance', 'instanceLocator', instanceLocator);
      const localVarPath = `/app/rest/cloud/instances/{instanceLocator}`.replace(
        `{${'instanceLocator'}}`,
        encodeURIComponent(String(instanceLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get cloud profile matching the locator.
     * @param {string} profileLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProfile: async (
      profileLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'profileLocator' is not null or undefined
      assertParamExists('getCloudProfile', 'profileLocator', profileLocator);
      const localVarPath = `/app/rest/cloud/profiles/{profileLocator}`.replace(
        `{${'profileLocator'}}`,
        encodeURIComponent(String(profileLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Start a new cloud instance.
     * @param {string} [fields]
     * @param {CloudInstance} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startInstance: async (
      fields?: string,
      body?: CloudInstance,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/cloud/instances`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Stop cloud instance matching the locator.
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopInstance: async (
      instanceLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceLocator' is not null or undefined
      assertParamExists('stopInstance', 'instanceLocator', instanceLocator);
      const localVarPath = `/app/rest/cloud/instances/{instanceLocator}`.replace(
        `{${'instanceLocator'}}`,
        encodeURIComponent(String(instanceLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Schedules existing cloud instance for termination
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    terminateInstance: async (
      instanceLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceLocator' is not null or undefined
      assertParamExists('terminateInstance', 'instanceLocator', instanceLocator);
      const localVarPath = `/app/rest/cloud/instances/{instanceLocator}/actions/stop`.replace(
        `{${'instanceLocator'}}`,
        encodeURIComponent(String(instanceLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CloudInstanceApi - functional programming interface
 * @export
 */
export const CloudInstanceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CloudInstanceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Terminates existing cloud instance immediately
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forseTerminateInstance(
      instanceLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forseTerminateInstance(
        instanceLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.forseTerminateInstance']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all cloud images.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllCloudImages(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudImages>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCloudImages(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.getAllCloudImages']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all cloud instances.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllCloudInstances(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudInstances>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCloudInstances(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.getAllCloudInstances']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all cloud profiles.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllCloudProfiles(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProfiles>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCloudProfiles(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.getAllCloudProfiles']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get cloud image matching the locator.
     * @param {string} imageLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCloudImage(
      imageLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudImage>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCloudImage(
        imageLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.getCloudImage']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get cloud instance matching the locator.
     * @param {string} instanceLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCloudInstance(
      instanceLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudInstance>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCloudInstance(
        instanceLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.getCloudInstance']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get cloud profile matching the locator.
     * @param {string} profileLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCloudProfile(
      profileLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProfile>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCloudProfile(
        profileLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.getCloudProfile']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Start a new cloud instance.
     * @param {string} [fields]
     * @param {CloudInstance} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async startInstance(
      fields?: string,
      body?: CloudInstance,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.startInstance(
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.startInstance']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Stop cloud instance matching the locator.
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stopInstance(
      instanceLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stopInstance(
        instanceLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.stopInstance']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Schedules existing cloud instance for termination
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async terminateInstance(
      instanceLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.terminateInstance(
        instanceLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CloudInstanceApi.terminateInstance']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CloudInstanceApi - factory interface
 * @export
 */
export const CloudInstanceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CloudInstanceApiFp(configuration);
  return {
    /**
     *
     * @summary Terminates existing cloud instance immediately
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forseTerminateInstance(
      instanceLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .forseTerminateInstance(instanceLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all cloud images.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCloudImages(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CloudImages> {
      return localVarFp
        .getAllCloudImages(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all cloud instances.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCloudInstances(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CloudInstances> {
      return localVarFp
        .getAllCloudInstances(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all cloud profiles.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCloudProfiles(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CloudProfiles> {
      return localVarFp
        .getAllCloudProfiles(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get cloud image matching the locator.
     * @param {string} imageLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudImage(
      imageLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CloudImage> {
      return localVarFp
        .getCloudImage(imageLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get cloud instance matching the locator.
     * @param {string} instanceLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudInstance(
      instanceLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CloudInstance> {
      return localVarFp
        .getCloudInstance(instanceLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get cloud profile matching the locator.
     * @param {string} profileLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProfile(
      profileLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CloudProfile> {
      return localVarFp
        .getCloudProfile(profileLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Start a new cloud instance.
     * @param {string} [fields]
     * @param {CloudInstance} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startInstance(
      fields?: string,
      body?: CloudInstance,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .startInstance(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Stop cloud instance matching the locator.
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopInstance(instanceLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .stopInstance(instanceLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Schedules existing cloud instance for termination
     * @param {string} instanceLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    terminateInstance(
      instanceLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .terminateInstance(instanceLocator, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CloudInstanceApi - interface
 * @export
 * @interface CloudInstanceApi
 */
export interface CloudInstanceApiInterface {
  /**
   *
   * @summary Terminates existing cloud instance immediately
   * @param {string} instanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  forseTerminateInstance(
    instanceLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Get all cloud images.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  getAllCloudImages(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CloudImages>;

  /**
   *
   * @summary Get all cloud instances.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  getAllCloudInstances(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CloudInstances>;

  /**
   *
   * @summary Get all cloud profiles.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  getAllCloudProfiles(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CloudProfiles>;

  /**
   *
   * @summary Get cloud image matching the locator.
   * @param {string} imageLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  getCloudImage(
    imageLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CloudImage>;

  /**
   *
   * @summary Get cloud instance matching the locator.
   * @param {string} instanceLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  getCloudInstance(
    instanceLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CloudInstance>;

  /**
   *
   * @summary Get cloud profile matching the locator.
   * @param {string} profileLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  getCloudProfile(
    profileLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CloudProfile>;

  /**
   *
   * @summary Start a new cloud instance.
   * @param {string} [fields]
   * @param {CloudInstance} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  startInstance(
    fields?: string,
    body?: CloudInstance,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Stop cloud instance matching the locator.
   * @param {string} instanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  stopInstance(instanceLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Schedules existing cloud instance for termination
   * @param {string} instanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApiInterface
   */
  terminateInstance(instanceLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
}

/**
 * CloudInstanceApi - object-oriented interface
 * @export
 * @class CloudInstanceApi
 * @extends {BaseAPI}
 */
export class CloudInstanceApi extends BaseAPI implements CloudInstanceApiInterface {
  /**
   *
   * @summary Terminates existing cloud instance immediately
   * @param {string} instanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public forseTerminateInstance(instanceLocator: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .forseTerminateInstance(instanceLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all cloud images.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public getAllCloudImages(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .getAllCloudImages(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all cloud instances.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public getAllCloudInstances(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .getAllCloudInstances(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all cloud profiles.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public getAllCloudProfiles(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .getAllCloudProfiles(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get cloud image matching the locator.
   * @param {string} imageLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public getCloudImage(imageLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .getCloudImage(imageLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get cloud instance matching the locator.
   * @param {string} instanceLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public getCloudInstance(
    instanceLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return CloudInstanceApiFp(this.configuration)
      .getCloudInstance(instanceLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get cloud profile matching the locator.
   * @param {string} profileLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public getCloudProfile(profileLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .getCloudProfile(profileLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Start a new cloud instance.
   * @param {string} [fields]
   * @param {CloudInstance} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public startInstance(fields?: string, body?: CloudInstance, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .startInstance(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Stop cloud instance matching the locator.
   * @param {string} instanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public stopInstance(instanceLocator: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .stopInstance(instanceLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Schedules existing cloud instance for termination
   * @param {string} instanceLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CloudInstanceApi
   */
  public terminateInstance(instanceLocator: string, options?: RawAxiosRequestConfig) {
    return CloudInstanceApiFp(this.configuration)
      .terminateInstance(instanceLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Group } from '../models';
// @ts-ignore
import type { Groups } from '../models';
// @ts-ignore
import type { Properties } from '../models';
// @ts-ignore
import type { Role } from '../models';
// @ts-ignore
import type { Roles } from '../models';

/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a new user group.
     * @param {string} [fields]
     * @param {Group} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroup: async (
      fields?: string,
      body?: Group,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/userGroups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a role with the specific scope to the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleAtScopeToGroup: async (
      groupLocator: string,
      roleId: string,
      scope: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('addRoleAtScopeToGroup', 'groupLocator', groupLocator);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('addRoleAtScopeToGroup', 'roleId', roleId);
      // verify required parameter 'scope' is not null or undefined
      assertParamExists('addRoleAtScopeToGroup', 'scope', scope);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}`
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'scope'}}`, encodeURIComponent(String(scope)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a role to the matching user group.
     * @param {string} groupLocator
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleToGroup: async (
      groupLocator: string,
      body?: Role,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('addRoleToGroup', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/roles`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete user group matching the locator.
     * @param {string} groupLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: async (
      groupLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('deleteGroup', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all user groups.
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGroups: async (
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/userGroups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get parent groups of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupParentGroups: async (
      groupLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('getGroupParentGroups', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/parent-groups`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get properties of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupProperties: async (
      groupLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('getGroupProperties', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/properties`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupProperty: async (
      groupLocator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('getGroupProperty', 'groupLocator', groupLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getGroupProperty', 'name', name);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/properties/{name}`
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a role with the specific scope of the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupRoleAtScope: async (
      groupLocator: string,
      roleId: string,
      scope: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('getGroupRoleAtScope', 'groupLocator', groupLocator);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('getGroupRoleAtScope', 'roleId', roleId);
      // verify required parameter 'scope' is not null or undefined
      assertParamExists('getGroupRoleAtScope', 'scope', scope);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}`
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'scope'}}`, encodeURIComponent(String(scope)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all roles of the matching user group.
     * @param {string} groupLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupRoles: async (
      groupLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('getGroupRoles', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/roles`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user group matching the locator.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupOfGroup: async (
      groupLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('getUserGroupOfGroup', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeGroupProperty: async (
      groupLocator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('removeGroupProperty', 'groupLocator', groupLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('removeGroupProperty', 'name', name);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/properties/{name}`
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a role with the specific scope from the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRoleAtScopeFromGroup: async (
      groupLocator: string,
      roleId: string,
      scope: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('removeRoleAtScopeFromGroup', 'groupLocator', groupLocator);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('removeRoleAtScopeFromGroup', 'roleId', roleId);
      // verify required parameter 'scope' is not null or undefined
      assertParamExists('removeRoleAtScopeFromGroup', 'scope', scope);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}`
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'scope'}}`, encodeURIComponent(String(scope)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update parent groups of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {Groups} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGroupParentGroups: async (
      groupLocator: string,
      fields?: string,
      body?: Groups,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('setGroupParentGroups', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/parent-groups`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGroupProperty: async (
      groupLocator: string,
      name: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('setGroupProperty', 'groupLocator', groupLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('setGroupProperty', 'name', name);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/properties/{name}`
        .replace(`{${'groupLocator'}}`, encodeURIComponent(String(groupLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update roles of the matching user group.
     * @param {string} groupLocator
     * @param {Roles} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGroupRoles: async (
      groupLocator: string,
      body?: Roles,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupLocator' is not null or undefined
      assertParamExists('setGroupRoles', 'groupLocator', groupLocator);
      const localVarPath = `/app/rest/userGroups/{groupLocator}/roles`.replace(
        `{${'groupLocator'}}`,
        encodeURIComponent(String(groupLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add a new user group.
     * @param {string} [fields]
     * @param {Group} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addGroup(
      fields?: string,
      body?: Group,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addGroup(fields, body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.addGroup']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a role with the specific scope to the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addRoleAtScopeToGroup(
      groupLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleAtScopeToGroup(
        groupLocator,
        roleId,
        scope,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.addRoleAtScopeToGroup']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a role to the matching user group.
     * @param {string} groupLocator
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addRoleToGroup(
      groupLocator: string,
      body?: Role,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleToGroup(
        groupLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.addRoleToGroup']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete user group matching the locator.
     * @param {string} groupLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGroup(
      groupLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(groupLocator, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.deleteGroup']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all user groups.
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllGroups(
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Groups>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGroups(fields, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.getAllGroups']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get parent groups of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupParentGroups(
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Groups>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupParentGroups(
        groupLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.getGroupParentGroups']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get properties of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupProperties(
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupProperties(
        groupLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.getGroupProperties']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupProperty(
      groupLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupProperty(
        groupLocator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.getGroupProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a role with the specific scope of the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupRoleAtScope(
      groupLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupRoleAtScope(
        groupLocator,
        roleId,
        scope,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.getGroupRoleAtScope']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all roles of the matching user group.
     * @param {string} groupLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupRoles(
      groupLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupRoles(
        groupLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.getGroupRoles']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get user group matching the locator.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserGroupOfGroup(
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroupOfGroup(
        groupLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.getUserGroupOfGroup']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeGroupProperty(
      groupLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeGroupProperty(
        groupLocator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.removeGroupProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove a role with the specific scope from the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeRoleAtScopeFromGroup(
      groupLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleAtScopeFromGroup(
        groupLocator,
        roleId,
        scope,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.removeRoleAtScopeFromGroup']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update parent groups of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {Groups} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setGroupParentGroups(
      groupLocator: string,
      fields?: string,
      body?: Groups,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Groups>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setGroupParentGroups(
        groupLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.setGroupParentGroups']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setGroupProperty(
      groupLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setGroupProperty(
        groupLocator,
        name,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.setGroupProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update roles of the matching user group.
     * @param {string} groupLocator
     * @param {Roles} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setGroupRoles(
      groupLocator: string,
      body?: Roles,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setGroupRoles(
        groupLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GroupApi.setGroupRoles']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GroupApiFp(configuration);
  return {
    /**
     *
     * @summary Add a new user group.
     * @param {string} [fields]
     * @param {Group} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroup(fields?: string, body?: Group, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
      return localVarFp.addGroup(fields, body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a role with the specific scope to the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleAtScopeToGroup(
      groupLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .addRoleAtScopeToGroup(groupLocator, roleId, scope, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a role to the matching user group.
     * @param {string} groupLocator
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleToGroup(
      groupLocator: string,
      body?: Role,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .addRoleToGroup(groupLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete user group matching the locator.
     * @param {string} groupLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(groupLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteGroup(groupLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all user groups.
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGroups(fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Groups> {
      return localVarFp.getAllGroups(fields, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get parent groups of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupParentGroups(
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Groups> {
      return localVarFp
        .getGroupParentGroups(groupLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get properties of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupProperties(
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getGroupProperties(groupLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupProperty(
      groupLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getGroupProperty(groupLocator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a role with the specific scope of the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupRoleAtScope(
      groupLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Role> {
      return localVarFp
        .getGroupRoleAtScope(groupLocator, roleId, scope, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all roles of the matching user group.
     * @param {string} groupLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupRoles(groupLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<Roles> {
      return localVarFp
        .getGroupRoles(groupLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user group matching the locator.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupOfGroup(
      groupLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Group> {
      return localVarFp
        .getUserGroupOfGroup(groupLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeGroupProperty(
      groupLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeGroupProperty(groupLocator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a role with the specific scope from the matching user group.
     * @param {string} groupLocator
     * @param {string} roleId
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRoleAtScopeFromGroup(
      groupLocator: string,
      roleId: string,
      scope: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeRoleAtScopeFromGroup(groupLocator, roleId, scope, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update parent groups of the matching user group.
     * @param {string} groupLocator
     * @param {string} [fields]
     * @param {Groups} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGroupParentGroups(
      groupLocator: string,
      fields?: string,
      body?: Groups,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Groups> {
      return localVarFp
        .setGroupParentGroups(groupLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a property of the matching user group.
     * @param {string} groupLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGroupProperty(
      groupLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setGroupProperty(groupLocator, name, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update roles of the matching user group.
     * @param {string} groupLocator
     * @param {Roles} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGroupRoles(
      groupLocator: string,
      body?: Roles,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Roles> {
      return localVarFp
        .setGroupRoles(groupLocator, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GroupApi - interface
 * @export
 * @interface GroupApi
 */
export interface GroupApiInterface {
  /**
   *
   * @summary Add a new user group.
   * @param {string} [fields]
   * @param {Group} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  addGroup(fields?: string, body?: Group, options?: RawAxiosRequestConfig): AxiosPromise<Group>;

  /**
   *
   * @summary Add a role with the specific scope to the matching user group.
   * @param {string} groupLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  addRoleAtScopeToGroup(
    groupLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Add a role to the matching user group.
   * @param {string} groupLocator
   * @param {Role} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  addRoleToGroup(
    groupLocator: string,
    body?: Role,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Delete user group matching the locator.
   * @param {string} groupLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  deleteGroup(groupLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Get all user groups.
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  getAllGroups(fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Groups>;

  /**
   *
   * @summary Get parent groups of the matching user group.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  getGroupParentGroups(
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Groups>;

  /**
   *
   * @summary Get properties of the matching user group.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  getGroupProperties(
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get a property of the matching user group.
   * @param {string} groupLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  getGroupProperty(
    groupLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get a role with the specific scope of the matching user group.
   * @param {string} groupLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  getGroupRoleAtScope(
    groupLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Role>;

  /**
   *
   * @summary Get all roles of the matching user group.
   * @param {string} groupLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  getGroupRoles(groupLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<Roles>;

  /**
   *
   * @summary Get user group matching the locator.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  getUserGroupOfGroup(
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Group>;

  /**
   *
   * @summary Remove a property of the matching user group.
   * @param {string} groupLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  removeGroupProperty(
    groupLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Remove a role with the specific scope from the matching user group.
   * @param {string} groupLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  removeRoleAtScopeFromGroup(
    groupLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Update parent groups of the matching user group.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {Groups} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  setGroupParentGroups(
    groupLocator: string,
    fields?: string,
    body?: Groups,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Groups>;

  /**
   *
   * @summary Update a property of the matching user group.
   * @param {string} groupLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  setGroupProperty(
    groupLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update roles of the matching user group.
   * @param {string} groupLocator
   * @param {Roles} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApiInterface
   */
  setGroupRoles(
    groupLocator: string,
    body?: Roles,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Roles>;
}

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI implements GroupApiInterface {
  /**
   *
   * @summary Add a new user group.
   * @param {string} [fields]
   * @param {Group} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public addGroup(fields?: string, body?: Group, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .addGroup(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a role with the specific scope to the matching user group.
   * @param {string} groupLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public addRoleAtScopeToGroup(
    groupLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .addRoleAtScopeToGroup(groupLocator, roleId, scope, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a role to the matching user group.
   * @param {string} groupLocator
   * @param {Role} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public addRoleToGroup(groupLocator: string, body?: Role, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .addRoleToGroup(groupLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete user group matching the locator.
   * @param {string} groupLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public deleteGroup(groupLocator: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .deleteGroup(groupLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all user groups.
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getAllGroups(fields?: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .getAllGroups(fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get parent groups of the matching user group.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getGroupParentGroups(
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .getGroupParentGroups(groupLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get properties of the matching user group.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getGroupProperties(
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .getGroupProperties(groupLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a property of the matching user group.
   * @param {string} groupLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getGroupProperty(groupLocator: string, name: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .getGroupProperty(groupLocator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a role with the specific scope of the matching user group.
   * @param {string} groupLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getGroupRoleAtScope(
    groupLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .getGroupRoleAtScope(groupLocator, roleId, scope, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all roles of the matching user group.
   * @param {string} groupLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getGroupRoles(groupLocator: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .getGroupRoles(groupLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user group matching the locator.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getUserGroupOfGroup(
    groupLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .getUserGroupOfGroup(groupLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a property of the matching user group.
   * @param {string} groupLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public removeGroupProperty(groupLocator: string, name: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .removeGroupProperty(groupLocator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a role with the specific scope from the matching user group.
   * @param {string} groupLocator
   * @param {string} roleId
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public removeRoleAtScopeFromGroup(
    groupLocator: string,
    roleId: string,
    scope: string,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .removeRoleAtScopeFromGroup(groupLocator, roleId, scope, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update parent groups of the matching user group.
   * @param {string} groupLocator
   * @param {string} [fields]
   * @param {Groups} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public setGroupParentGroups(
    groupLocator: string,
    fields?: string,
    body?: Groups,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .setGroupParentGroups(groupLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a property of the matching user group.
   * @param {string} groupLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public setGroupProperty(
    groupLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GroupApiFp(this.configuration)
      .setGroupProperty(groupLocator, name, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update roles of the matching user group.
   * @param {string} groupLocator
   * @param {Roles} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public setGroupRoles(groupLocator: string, body?: Roles, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .setGroupRoles(groupLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

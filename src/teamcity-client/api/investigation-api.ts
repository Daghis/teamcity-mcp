/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Investigation } from '../models';
// @ts-ignore
import type { Investigations } from '../models';

/**
 * InvestigationApi - axios parameter creator
 * @export
 */
export const InvestigationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new investigation.
     * @param {string} [fields]
     * @param {Investigation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInvestigation: async (
      fields?: string,
      body?: Investigation,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/investigations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create multiple new investigations.
     * @param {string} [fields]
     * @param {Investigations} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMultipleInvestigations: async (
      fields?: string,
      body?: Investigations,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/investigations/multiple`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete investigation matching the locator.
     * @param {string} investigationLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvestigation: async (
      investigationLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'investigationLocator' is not null or undefined
      assertParamExists('deleteInvestigation', 'investigationLocator', investigationLocator);
      const localVarPath = `/app/rest/investigations/{investigationLocator}`.replace(
        `{${'investigationLocator'}}`,
        encodeURIComponent(String(investigationLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all investigations.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllInvestigations: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/investigations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get investigation matching the locator.
     * @param {string} investigationLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestigation: async (
      investigationLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'investigationLocator' is not null or undefined
      assertParamExists('getInvestigation', 'investigationLocator', investigationLocator);
      const localVarPath = `/app/rest/investigations/{investigationLocator}`.replace(
        `{${'investigationLocator'}}`,
        encodeURIComponent(String(investigationLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update investigation matching the locator.
     * @param {string} investigationLocator
     * @param {string} [fields]
     * @param {Investigation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceInvestigation: async (
      investigationLocator: string,
      fields?: string,
      body?: Investigation,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'investigationLocator' is not null or undefined
      assertParamExists('replaceInvestigation', 'investigationLocator', investigationLocator);
      const localVarPath = `/app/rest/investigations/{investigationLocator}`.replace(
        `{${'investigationLocator'}}`,
        encodeURIComponent(String(investigationLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InvestigationApi - functional programming interface
 * @export
 */
export const InvestigationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InvestigationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a new investigation.
     * @param {string} [fields]
     * @param {Investigation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addInvestigation(
      fields?: string,
      body?: Investigation,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Investigation>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addInvestigation(
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InvestigationApi.addInvestigation']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create multiple new investigations.
     * @param {string} [fields]
     * @param {Investigations} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMultipleInvestigations(
      fields?: string,
      body?: Investigations,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Investigations>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMultipleInvestigations(
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InvestigationApi.addMultipleInvestigations']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete investigation matching the locator.
     * @param {string} investigationLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteInvestigation(
      investigationLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInvestigation(
        investigationLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InvestigationApi.deleteInvestigation']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all investigations.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllInvestigations(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Investigations>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInvestigations(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InvestigationApi.getAllInvestigations']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get investigation matching the locator.
     * @param {string} investigationLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvestigation(
      investigationLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Investigation>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInvestigation(
        investigationLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InvestigationApi.getInvestigation']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update investigation matching the locator.
     * @param {string} investigationLocator
     * @param {string} [fields]
     * @param {Investigation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceInvestigation(
      investigationLocator: string,
      fields?: string,
      body?: Investigation,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Investigation>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceInvestigation(
        investigationLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InvestigationApi.replaceInvestigation']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * InvestigationApi - factory interface
 * @export
 */
export const InvestigationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InvestigationApiFp(configuration);
  return {
    /**
     *
     * @summary Create a new investigation.
     * @param {string} [fields]
     * @param {Investigation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInvestigation(
      fields?: string,
      body?: Investigation,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Investigation> {
      return localVarFp
        .addInvestigation(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create multiple new investigations.
     * @param {string} [fields]
     * @param {Investigations} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMultipleInvestigations(
      fields?: string,
      body?: Investigations,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Investigations> {
      return localVarFp
        .addMultipleInvestigations(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete investigation matching the locator.
     * @param {string} investigationLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvestigation(
      investigationLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteInvestigation(investigationLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all investigations.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllInvestigations(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Investigations> {
      return localVarFp
        .getAllInvestigations(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get investigation matching the locator.
     * @param {string} investigationLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestigation(
      investigationLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Investigation> {
      return localVarFp
        .getInvestigation(investigationLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update investigation matching the locator.
     * @param {string} investigationLocator
     * @param {string} [fields]
     * @param {Investigation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceInvestigation(
      investigationLocator: string,
      fields?: string,
      body?: Investigation,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Investigation> {
      return localVarFp
        .replaceInvestigation(investigationLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * InvestigationApi - interface
 * @export
 * @interface InvestigationApi
 */
export interface InvestigationApiInterface {
  /**
   *
   * @summary Create a new investigation.
   * @param {string} [fields]
   * @param {Investigation} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApiInterface
   */
  addInvestigation(
    fields?: string,
    body?: Investigation,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Investigation>;

  /**
   *
   * @summary Create multiple new investigations.
   * @param {string} [fields]
   * @param {Investigations} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApiInterface
   */
  addMultipleInvestigations(
    fields?: string,
    body?: Investigations,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Investigations>;

  /**
   *
   * @summary Delete investigation matching the locator.
   * @param {string} investigationLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApiInterface
   */
  deleteInvestigation(
    investigationLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Get all investigations.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApiInterface
   */
  getAllInvestigations(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Investigations>;

  /**
   *
   * @summary Get investigation matching the locator.
   * @param {string} investigationLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApiInterface
   */
  getInvestigation(
    investigationLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Investigation>;

  /**
   *
   * @summary Update investigation matching the locator.
   * @param {string} investigationLocator
   * @param {string} [fields]
   * @param {Investigation} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApiInterface
   */
  replaceInvestigation(
    investigationLocator: string,
    fields?: string,
    body?: Investigation,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Investigation>;
}

/**
 * InvestigationApi - object-oriented interface
 * @export
 * @class InvestigationApi
 * @extends {BaseAPI}
 */
export class InvestigationApi extends BaseAPI implements InvestigationApiInterface {
  /**
   *
   * @summary Create a new investigation.
   * @param {string} [fields]
   * @param {Investigation} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApi
   */
  public addInvestigation(fields?: string, body?: Investigation, options?: RawAxiosRequestConfig) {
    return InvestigationApiFp(this.configuration)
      .addInvestigation(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create multiple new investigations.
   * @param {string} [fields]
   * @param {Investigations} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApi
   */
  public addMultipleInvestigations(
    fields?: string,
    body?: Investigations,
    options?: RawAxiosRequestConfig
  ) {
    return InvestigationApiFp(this.configuration)
      .addMultipleInvestigations(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete investigation matching the locator.
   * @param {string} investigationLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApi
   */
  public deleteInvestigation(investigationLocator: string, options?: RawAxiosRequestConfig) {
    return InvestigationApiFp(this.configuration)
      .deleteInvestigation(investigationLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all investigations.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApi
   */
  public getAllInvestigations(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return InvestigationApiFp(this.configuration)
      .getAllInvestigations(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get investigation matching the locator.
   * @param {string} investigationLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApi
   */
  public getInvestigation(
    investigationLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return InvestigationApiFp(this.configuration)
      .getInvestigation(investigationLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update investigation matching the locator.
   * @param {string} investigationLocator
   * @param {string} [fields]
   * @param {Investigation} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvestigationApi
   */
  public replaceInvestigation(
    investigationLocator: string,
    fields?: string,
    body?: Investigation,
    options?: RawAxiosRequestConfig
  ) {
    return InvestigationApiFp(this.configuration)
      .replaceInvestigation(investigationLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

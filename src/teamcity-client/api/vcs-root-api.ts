/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { Properties } from '../models';
// @ts-ignore
import type { VcsRoot } from '../models';
// @ts-ignore
import type { VcsRootInstances } from '../models';
// @ts-ignore
import type { VcsRoots } from '../models';

/**
 * VcsRootApi - axios parameter creator
 * @export
 */
export const VcsRootApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a new VCS root.
     * @param {string} [fields]
     * @param {VcsRoot} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVcsRoot: async (
      fields?: string,
      body?: VcsRoot,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/vcs-roots`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllVcsRootProperties: async (
      vcsRootLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('deleteAllVcsRootProperties', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/properties`.replace(
        `{${'vcsRootLocator'}}`,
        encodeURIComponent(String(vcsRootLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove VCS root matching the locator.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVcsRoot: async (
      vcsRootLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('deleteVcsRoot', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}`.replace(
        `{${'vcsRootLocator'}}`,
        encodeURIComponent(String(vcsRootLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a property of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVcsRootProperty: async (
      vcsRootLocator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('deleteVcsRootProperty', 'vcsRootLocator', vcsRootLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deleteVcsRootProperty', 'name', name);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}`
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllVcsRootProperties: async (
      vcsRootLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getAllVcsRootProperties', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/properties`.replace(
        `{${'vcsRootLocator'}}`,
        encodeURIComponent(String(vcsRootLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all VCS roots.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllVcsRoots: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/vcs-roots`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get root endpoints.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRootEndpoints: async (
      vcsRootLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getRootEndpoints', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}`.replace(
        `{${'vcsRootLocator'}}`,
        encodeURIComponent(String(vcsRootLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a field of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootField: async (
      vcsRootLocator: string,
      field: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getVcsRootField', 'vcsRootLocator', vcsRootLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('getVcsRootField', 'field', field);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/{field}`
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all VCS root instances of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootInstances: async (
      vcsRootLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getVcsRootInstances', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/instances`.replace(
        `{${'vcsRootLocator'}}`,
        encodeURIComponent(String(vcsRootLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a property on the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootProperty: async (
      vcsRootLocator: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getVcsRootProperty', 'vcsRootLocator', vcsRootLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getVcsRootProperty', 'name', name);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}`
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the settings file of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootSettingsFile: async (
      vcsRootLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('getVcsRootSettingsFile', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/settingsFile`.replace(
        `{${'vcsRootLocator'}}`,
        encodeURIComponent(String(vcsRootLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a field of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVcsRootField: async (
      vcsRootLocator: string,
      field: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('setVcsRootField', 'vcsRootLocator', vcsRootLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('setVcsRootField', 'field', field);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/{field}`
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVcsRootProperties: async (
      vcsRootLocator: string,
      fields?: string,
      body?: Properties,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('setVcsRootProperties', 'vcsRootLocator', vcsRootLocator);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/properties`.replace(
        `{${'vcsRootLocator'}}`,
        encodeURIComponent(String(vcsRootLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a property of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVcsRootProperty: async (
      vcsRootLocator: string,
      name: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'vcsRootLocator' is not null or undefined
      assertParamExists('setVcsRootProperty', 'vcsRootLocator', vcsRootLocator);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('setVcsRootProperty', 'name', name);
      const localVarPath = `/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}`
        .replace(`{${'vcsRootLocator'}}`, encodeURIComponent(String(vcsRootLocator)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VcsRootApi - functional programming interface
 * @export
 */
export const VcsRootApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VcsRootApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add a new VCS root.
     * @param {string} [fields]
     * @param {VcsRoot} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addVcsRoot(
      fields?: string,
      body?: VcsRoot,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRoot>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addVcsRoot(fields, body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.addVcsRoot']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAllVcsRootProperties(
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllVcsRootProperties(
        vcsRootLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.deleteAllVcsRootProperties']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove VCS root matching the locator.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVcsRoot(
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVcsRoot(
        vcsRootLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.deleteVcsRoot']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a property of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVcsRootProperty(
      vcsRootLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVcsRootProperty(
        vcsRootLocator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.deleteVcsRootProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllVcsRootProperties(
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVcsRootProperties(
        vcsRootLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.getAllVcsRootProperties']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all VCS roots.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllVcsRoots(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRoots>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVcsRoots(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.getAllVcsRoots']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get root endpoints.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRootEndpoints(
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRoot>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRootEndpoints(
        vcsRootLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.getRootEndpoints']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a field of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVcsRootField(
      vcsRootLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVcsRootField(
        vcsRootLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.getVcsRootField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all VCS root instances of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVcsRootInstances(
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VcsRootInstances>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVcsRootInstances(
        vcsRootLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.getVcsRootInstances']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a property on the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVcsRootProperty(
      vcsRootLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVcsRootProperty(
        vcsRootLocator,
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.getVcsRootProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the settings file of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVcsRootSettingsFile(
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVcsRootSettingsFile(
        vcsRootLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.getVcsRootSettingsFile']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a field of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setVcsRootField(
      vcsRootLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setVcsRootField(
        vcsRootLocator,
        field,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.setVcsRootField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setVcsRootProperties(
      vcsRootLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setVcsRootProperties(
        vcsRootLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.setVcsRootProperties']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a property of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setVcsRootProperty(
      vcsRootLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setVcsRootProperty(
        vcsRootLocator,
        name,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['VcsRootApi.setVcsRootProperty']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * VcsRootApi - factory interface
 * @export
 */
export const VcsRootApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = VcsRootApiFp(configuration);
  return {
    /**
     *
     * @summary Add a new VCS root.
     * @param {string} [fields]
     * @param {VcsRoot} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVcsRoot(
      fields?: string,
      body?: VcsRoot,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRoot> {
      return localVarFp
        .addVcsRoot(fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllVcsRootProperties(
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteAllVcsRootProperties(vcsRootLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove VCS root matching the locator.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVcsRoot(vcsRootLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteVcsRoot(vcsRootLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a property of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVcsRootProperty(
      vcsRootLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteVcsRootProperty(vcsRootLocator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllVcsRootProperties(
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getAllVcsRootProperties(vcsRootLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all VCS roots.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllVcsRoots(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRoots> {
      return localVarFp
        .getAllVcsRoots(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get root endpoints.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRootEndpoints(
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRoot> {
      return localVarFp
        .getRootEndpoints(vcsRootLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a field of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootField(
      vcsRootLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getVcsRootField(vcsRootLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all VCS root instances of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootInstances(
      vcsRootLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<VcsRootInstances> {
      return localVarFp
        .getVcsRootInstances(vcsRootLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a property on the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootProperty(
      vcsRootLocator: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getVcsRootProperty(vcsRootLocator, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the settings file of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVcsRootSettingsFile(
      vcsRootLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getVcsRootSettingsFile(vcsRootLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a field of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVcsRootField(
      vcsRootLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setVcsRootField(vcsRootLocator, field, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all properties of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVcsRootProperties(
      vcsRootLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .setVcsRootProperties(vcsRootLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a property of the matching VCS root.
     * @param {string} vcsRootLocator
     * @param {string} name
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVcsRootProperty(
      vcsRootLocator: string,
      name: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setVcsRootProperty(vcsRootLocator, name, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VcsRootApi - interface
 * @export
 * @interface VcsRootApi
 */
export interface VcsRootApiInterface {
  /**
   *
   * @summary Add a new VCS root.
   * @param {string} [fields]
   * @param {VcsRoot} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  addVcsRoot(
    fields?: string,
    body?: VcsRoot,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRoot>;

  /**
   *
   * @summary Delete all properties of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  deleteAllVcsRootProperties(
    vcsRootLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Remove VCS root matching the locator.
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  deleteVcsRoot(vcsRootLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Delete a property of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  deleteVcsRootProperty(
    vcsRootLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Get all properties of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  getAllVcsRootProperties(
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get all VCS roots.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  getAllVcsRoots(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRoots>;

  /**
   *
   * @summary Get root endpoints.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  getRootEndpoints(
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRoot>;

  /**
   *
   * @summary Get a field of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  getVcsRootField(
    vcsRootLocator: string,
    field: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get all VCS root instances of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  getVcsRootInstances(
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<VcsRootInstances>;

  /**
   *
   * @summary Get a property on the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  getVcsRootProperty(
    vcsRootLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get the settings file of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  getVcsRootSettingsFile(
    vcsRootLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update a field of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  setVcsRootField(
    vcsRootLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update all properties of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  setVcsRootProperties(
    vcsRootLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Update a property of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApiInterface
   */
  setVcsRootProperty(
    vcsRootLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;
}

/**
 * VcsRootApi - object-oriented interface
 * @export
 * @class VcsRootApi
 * @extends {BaseAPI}
 */
export class VcsRootApi extends BaseAPI implements VcsRootApiInterface {
  /**
   *
   * @summary Add a new VCS root.
   * @param {string} [fields]
   * @param {VcsRoot} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public addVcsRoot(fields?: string, body?: VcsRoot, options?: RawAxiosRequestConfig) {
    return VcsRootApiFp(this.configuration)
      .addVcsRoot(fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete all properties of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public deleteAllVcsRootProperties(vcsRootLocator: string, options?: RawAxiosRequestConfig) {
    return VcsRootApiFp(this.configuration)
      .deleteAllVcsRootProperties(vcsRootLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove VCS root matching the locator.
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public deleteVcsRoot(vcsRootLocator: string, options?: RawAxiosRequestConfig) {
    return VcsRootApiFp(this.configuration)
      .deleteVcsRoot(vcsRootLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a property of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public deleteVcsRootProperty(
    vcsRootLocator: string,
    name: string,
    options?: RawAxiosRequestConfig
  ) {
    return VcsRootApiFp(this.configuration)
      .deleteVcsRootProperty(vcsRootLocator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all properties of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public getAllVcsRootProperties(
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VcsRootApiFp(this.configuration)
      .getAllVcsRootProperties(vcsRootLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all VCS roots.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public getAllVcsRoots(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return VcsRootApiFp(this.configuration)
      .getAllVcsRoots(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get root endpoints.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public getRootEndpoints(
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VcsRootApiFp(this.configuration)
      .getRootEndpoints(vcsRootLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a field of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public getVcsRootField(vcsRootLocator: string, field: string, options?: RawAxiosRequestConfig) {
    return VcsRootApiFp(this.configuration)
      .getVcsRootField(vcsRootLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all VCS root instances of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public getVcsRootInstances(
    vcsRootLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VcsRootApiFp(this.configuration)
      .getVcsRootInstances(vcsRootLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a property on the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public getVcsRootProperty(vcsRootLocator: string, name: string, options?: RawAxiosRequestConfig) {
    return VcsRootApiFp(this.configuration)
      .getVcsRootProperty(vcsRootLocator, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the settings file of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public getVcsRootSettingsFile(vcsRootLocator: string, options?: RawAxiosRequestConfig) {
    return VcsRootApiFp(this.configuration)
      .getVcsRootSettingsFile(vcsRootLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a field of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public setVcsRootField(
    vcsRootLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VcsRootApiFp(this.configuration)
      .setVcsRootField(vcsRootLocator, field, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all properties of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public setVcsRootProperties(
    vcsRootLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ) {
    return VcsRootApiFp(this.configuration)
      .setVcsRootProperties(vcsRootLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a property of the matching VCS root.
   * @param {string} vcsRootLocator
   * @param {string} name
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VcsRootApi
   */
  public setVcsRootProperty(
    vcsRootLocator: string,
    name: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VcsRootApiFp(this.configuration)
      .setVcsRootProperty(vcsRootLocator, name, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

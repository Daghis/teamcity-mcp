/* tslint:disable */
/* eslint-disable */
/**
 * TeamCity REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1 (current)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  type RequestArgs,
  RequiredError,
  operationServerMap,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import type { AgentPool } from '../models';
// @ts-ignore
import type { AgentPools } from '../models';
// @ts-ignore
import type { Branches } from '../models';
// @ts-ignore
import type { BuildType } from '../models';
// @ts-ignore
import type { BuildTypes } from '../models';
// @ts-ignore
import type { DeploymentDashboard } from '../models';
// @ts-ignore
import type { DeploymentDashboards } from '../models';
// @ts-ignore
import type { NewBuildTypeDescription } from '../models';
// @ts-ignore
import type { NewProjectDescription } from '../models';
// @ts-ignore
import type { Project } from '../models';
// @ts-ignore
import type { ProjectFeature } from '../models';
// @ts-ignore
import type { ProjectFeatures } from '../models';
// @ts-ignore
import type { Projects } from '../models';
// @ts-ignore
import type { Properties } from '../models';
// @ts-ignore
import type { Property } from '../models';
// @ts-ignore
import type { Type } from '../models';
// @ts-ignore
import type { TypedValueSets } from '../models';

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Assign the matching project to the agent pool.
     * @param {string} projectLocator
     * @param {AgentPool} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAgentPoolsProject: async (
      projectLocator: string,
      body?: AgentPool,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('addAgentPoolsProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/agentPools`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a build configuration to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {NewBuildTypeDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildType: async (
      projectLocator: string,
      fields?: string,
      body?: NewBuildTypeDescription,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('addBuildType', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/buildTypes`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a feature.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeature: async (
      projectLocator: string,
      fields?: string,
      body?: ProjectFeature,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('addFeature', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/projectFeatures`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new project.
     * @param {NewProjectDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProject: async (
      body?: NewProjectDescription,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSecureToken: async (
      projectLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('addSecureToken', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/secure/tokens`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a build configuration template to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {NewBuildTypeDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTemplate: async (
      projectLocator: string,
      fields?: string,
      body?: NewBuildTypeDescription,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('addTemplate', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/templates`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildParameter: async (
      projectLocator: string,
      fields?: string,
      body?: Property,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('createBuildParameter', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameter: async (
      name: string,
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deleteBuildParameter', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('deleteBuildParameter', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameters: async (
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('deleteBuildParameters', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeature: async (
      featureLocator: string,
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'featureLocator' is not null or undefined
      assertParamExists('deleteFeature', 'featureLocator', featureLocator);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('deleteFeature', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}`
        .replace(`{${'featureLocator'}}`, encodeURIComponent(String(featureLocator)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete project matching the locator.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: async (
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('deleteProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get agent pools appointed to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPoolsProject: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getAgentPoolsProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/agentPools`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all branches of the matching project.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBranches: async (
      projectLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getAllBranches', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/branches`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all build configurations from the matching project, with custom ordering applied.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildTypesOrdered: async (
      projectLocator: string,
      field?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getAllBuildTypesOrdered', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/order/buildTypes`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (field !== undefined) {
        localVarQueryParameter['field'] = String(field);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all projects.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProjects: async (
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/app/rest/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all subprojects of the matching project, with custom ordering applied.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSubprojectsOrdered: async (
      projectLocator: string,
      field?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getAllSubprojectsOrdered', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/order/projects`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (field !== undefined) {
        localVarQueryParameter['field'] = String(field);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameter: async (
      name: string,
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameter', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getBuildParameter', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameter specification.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterSpecification: async (
      name: string,
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterSpecification', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getBuildParameterSpecification', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get type of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterType: async (
      name: string,
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterType', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getBuildParameterType', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}/type`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterValue: async (
      name: string,
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getBuildParameterValue', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getBuildParameterValue', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}/value`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameters: async (
      projectLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getBuildParameters', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the default template of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultTemplate: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getDefaultTemplate', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/defaultTemplate`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getDefaultValueSets
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultValueSets: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getDefaultValueSets', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/defaultValueSets`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getDeploymentDashboardInProject
     * @param {string} projectLocator
     * @param {string} dashboardLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeploymentDashboardInProject: async (
      projectLocator: string,
      dashboardLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getDeploymentDashboardInProject', 'projectLocator', projectLocator);
      // verify required parameter 'dashboardLocator' is not null or undefined
      assertParamExists('getDeploymentDashboardInProject', 'dashboardLocator', dashboardLocator);
      const localVarPath =
        `/app/rest/projects/{projectLocator}/deploymentDashboards/{dashboardLocator}`
          .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)))
          .replace(`{${'dashboardLocator'}}`, encodeURIComponent(String(dashboardLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getDeploymentDashboardsInProjet
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeploymentDashboardsInProject: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getDeploymentDashboardsInProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/deploymentDashboards`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeature: async (
      featureLocator: string,
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'featureLocator' is not null or undefined
      assertParamExists('getFeature', 'featureLocator', featureLocator);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getFeature', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}`
        .replace(`{${'featureLocator'}}`, encodeURIComponent(String(featureLocator)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all features.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatures: async (
      projectLocator: string,
      locator?: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getFeatures', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/projectFeatures`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (locator !== undefined) {
        localVarQueryParameter['locator'] = String(locator);
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get project matching the locator.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a field of the matching project.
     * @param {string} projectLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectField: async (
      projectLocator: string,
      field: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getProjectField', 'projectLocator', projectLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('getProjectField', 'field', field);
      const localVarPath = `/app/rest/projects/{projectLocator}/{field}`
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the parent project of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectParentProject: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getProjectParentProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parentProject`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the settings file of the matching build configuration.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSettingsFile: async (
      projectLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getProjectSettingsFile', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/settingsFile`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all templates of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTemplates: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getProjectTemplates', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/templates`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).
     * @param {string} projectLocator
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSecureValue: async (
      projectLocator: string,
      token: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('getSecureValue', 'projectLocator', projectLocator);
      // verify required parameter 'token' is not null or undefined
      assertParamExists('getSecureValue', 'token', token);
      const localVarPath = `/app/rest/projects/{projectLocator}/secure/values/{token}`
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)))
        .replace(`{${'token'}}`, encodeURIComponent(String(token)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove the default template from the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDefaultTemplate: async (
      projectLocator: string,
      fields?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('removeDefaultTemplate', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/defaultTemplate`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unassign a project from the matching agent pool.
     * @param {string} projectLocator
     * @param {string} agentPoolLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectFromAgentPool: async (
      projectLocator: string,
      agentPoolLocator: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('removeProjectFromAgentPool', 'projectLocator', projectLocator);
      // verify required parameter 'agentPoolLocator' is not null or undefined
      assertParamExists('removeProjectFromAgentPool', 'agentPoolLocator', agentPoolLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}`
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)))
        .replace(`{${'agentPoolLocator'}}`, encodeURIComponent(String(agentPoolLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update agent pools apppointed to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {AgentPools} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentPoolsProject: async (
      projectLocator: string,
      fields?: string,
      body?: AgentPools,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('setAgentPoolsProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/agentPools`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update custom ordering of build configurations of the matching project.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {BuildTypes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildTypesOrder: async (
      projectLocator: string,
      field?: string,
      body?: BuildTypes,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('setBuildTypesOrder', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/order/buildTypes`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (field !== undefined) {
        localVarQueryParameter['field'] = String(field);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the default template of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultTemplate: async (
      projectLocator: string,
      fields?: string,
      body?: BuildType,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('setDefaultTemplate', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/defaultTemplate`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the parent project of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Project} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setParentProject: async (
      projectLocator: string,
      fields?: string,
      body?: Project,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('setParentProject', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parentProject`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a field of the matching project.
     * @param {string} projectLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setProjectField: async (
      projectLocator: string,
      field: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('setProjectField', 'projectLocator', projectLocator);
      // verify required parameter 'field' is not null or undefined
      assertParamExists('setProjectField', 'field', field);
      const localVarPath = `/app/rest/projects/{projectLocator}/{field}`
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)))
        .replace(`{${'field'}}`, encodeURIComponent(String(field)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update custom ordering of subprojects of the matching project.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {Projects} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSubprojectsOrder: async (
      projectLocator: string,
      field?: string,
      body?: Projects,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('setSubprojectsOrder', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/order/projects`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (field !== undefined) {
        localVarQueryParameter['field'] = String(field);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameter: async (
      name: string,
      projectLocator: string,
      fields?: string,
      body?: Property,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameter', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('updateBuildParameter', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameter specification.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterSpecification: async (
      name: string,
      projectLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterSpecification', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('updateBuildParameterSpecification', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update type of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {Type} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterType: async (
      name: string,
      projectLocator: string,
      body?: Type,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterType', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('updateBuildParameterType', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}/type`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterValue: async (
      name: string,
      projectLocator: string,
      body?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updateBuildParameterValue', 'name', name);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('updateBuildParameterValue', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters/{name}/value`
        .replace(`{${'name'}}`, encodeURIComponent(String(name)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      localVarHeaderParameter['Content-Type'] = 'text/plain';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameters: async (
      projectLocator: string,
      fields?: string,
      body?: Properties,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('updateBuildParameters', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/parameters`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeature: async (
      featureLocator: string,
      projectLocator: string,
      fields?: string,
      body?: ProjectFeature,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'featureLocator' is not null or undefined
      assertParamExists('updateFeature', 'featureLocator', featureLocator);
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('updateFeature', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}`
        .replace(`{${'featureLocator'}}`, encodeURIComponent(String(featureLocator)))
        .replace(`{${'projectLocator'}}`, encodeURIComponent(String(projectLocator)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update all features.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeatures} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeatures: async (
      projectLocator: string,
      fields?: string,
      body?: ProjectFeatures,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectLocator' is not null or undefined
      assertParamExists('updateFeatures', 'projectLocator', projectLocator);
      const localVarPath = `/app/rest/projects/{projectLocator}/projectFeatures`.replace(
        `{${'projectLocator'}}`,
        encodeURIComponent(String(projectLocator))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as Record<string, string>;
      const localVarQueryParameter = {} as Record<string, string>;

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = String(fields);
      }

      localVarHeaderParameter['Content-Type'] = 'application/xml';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions["headers"] ? baseOptions["headers"] : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options["headers"],
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Assign the matching project to the agent pool.
     * @param {string} projectLocator
     * @param {AgentPool} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addAgentPoolsProject(
      projectLocator: string,
      body?: AgentPool,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentPool>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addAgentPoolsProject(
        projectLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.addAgentPoolsProject']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a build configuration to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {NewBuildTypeDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addBuildType(
      projectLocator: string,
      fields?: string,
      body?: NewBuildTypeDescription,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addBuildType(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.addBuildType']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a feature.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addFeature(
      projectLocator: string,
      fields?: string,
      body?: ProjectFeature,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addFeature(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.addFeature']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new project.
     * @param {NewProjectDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addProject(
      body?: NewProjectDescription,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addProject(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.addProject']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addSecureToken(
      projectLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addSecureToken(
        projectLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.addSecureToken']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Add a build configuration template to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {NewBuildTypeDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addTemplate(
      projectLocator: string,
      fields?: string,
      body?: NewBuildTypeDescription,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addTemplate(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.addTemplate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBuildParameter(
      projectLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBuildParameter(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.createBuildParameter']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildParameter(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildParameter(
        name,
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.deleteBuildParameter']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildParameters(
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildParameters(
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.deleteBuildParameters']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFeature(
      featureLocator: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeature(
        featureLocator,
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.deleteFeature']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete project matching the locator.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProject(
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.deleteProject']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get agent pools appointed to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAgentPoolsProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentPools>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentPoolsProject(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getAgentPoolsProject']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all branches of the matching project.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBranches(
      projectLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branches>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBranches(
        projectLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getAllBranches']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all build configurations from the matching project, with custom ordering applied.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBuildTypesOrdered(
      projectLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildTypes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuildTypesOrdered(
        projectLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getAllBuildTypesOrdered']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all projects.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllProjects(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projects>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjects(
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getAllProjects']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all subprojects of the matching project, with custom ordering applied.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllSubprojectsOrdered(
      projectLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projects>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubprojectsOrdered(
        projectLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getAllSubprojectsOrdered']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameter(
      name: string,
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameter(
        name,
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getBuildParameter']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameter specification.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterSpecification(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterSpecification(
        name,
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getBuildParameterSpecification']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get type of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterType(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Type>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterType(
        name,
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getBuildParameterType']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameterValue(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameterValue(
        name,
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getBuildParameterValue']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildParameters(
      projectLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildParameters(
        projectLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getBuildParameters']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the default template of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDefaultTemplate(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultTemplate(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getDefaultTemplate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary getDefaultValueSets
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDefaultValueSets(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TypedValueSets>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultValueSets(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getDefaultValueSets']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary getDeploymentDashboardInProject
     * @param {string} projectLocator
     * @param {string} dashboardLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDeploymentDashboardInProject(
      projectLocator: string,
      dashboardLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentDashboard>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDeploymentDashboardInProject(
        projectLocator,
        dashboardLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getDeploymentDashboardInProject']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary getDeploymentDashboardsInProjet
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDeploymentDashboardsInProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentDashboards>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDeploymentDashboardsInProject(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getDeploymentDashboardsInProject']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFeature(
      featureLocator: string,
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFeature(
        featureLocator,
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getFeature']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all features.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFeatures(
      projectLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(
        projectLocator,
        locator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getFeatures']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get project matching the locator.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getProject']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get a field of the matching project.
     * @param {string} projectLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectField(
      projectLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectField(
        projectLocator,
        field,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getProjectField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the parent project of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectParentProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectParentProject(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getProjectParentProject']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get the settings file of the matching build configuration.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectSettingsFile(
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectSettingsFile(
        projectLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getProjectSettingsFile']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all templates of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectTemplates(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildTypes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectTemplates(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getProjectTemplates']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).
     * @param {string} projectLocator
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSecureValue(
      projectLocator: string,
      token: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSecureValue(
        projectLocator,
        token,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.getSecureValue']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Remove the default template from the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeDefaultTemplate(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeDefaultTemplate(
        projectLocator,
        fields,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.removeDefaultTemplate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unassign a project from the matching agent pool.
     * @param {string} projectLocator
     * @param {string} agentPoolLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeProjectFromAgentPool(
      projectLocator: string,
      agentPoolLocator: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeProjectFromAgentPool(
        projectLocator,
        agentPoolLocator,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.removeProjectFromAgentPool']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update agent pools apppointed to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {AgentPools} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAgentPoolsProject(
      projectLocator: string,
      fields?: string,
      body?: AgentPools,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentPools>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAgentPoolsProject(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.setAgentPoolsProject']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update custom ordering of build configurations of the matching project.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {BuildTypes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setBuildTypesOrder(
      projectLocator: string,
      field?: string,
      body?: BuildTypes,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildTypes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setBuildTypesOrder(
        projectLocator,
        field,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.setBuildTypesOrder']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update the default template of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setDefaultTemplate(
      projectLocator: string,
      fields?: string,
      body?: BuildType,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultTemplate(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.setDefaultTemplate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update the parent project of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Project} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setParentProject(
      projectLocator: string,
      fields?: string,
      body?: Project,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setParentProject(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.setParentProject']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a field of the matching project.
     * @param {string} projectLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setProjectField(
      projectLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setProjectField(
        projectLocator,
        field,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.setProjectField']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update custom ordering of subprojects of the matching project.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {Projects} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setSubprojectsOrder(
      projectLocator: string,
      field?: string,
      body?: Projects,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projects>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setSubprojectsOrder(
        projectLocator,
        field,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.setSubprojectsOrder']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameter(
      name: string,
      projectLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameter(
        name,
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.updateBuildParameter']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameter specification.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterSpecification(
      name: string,
      projectLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameterSpecification(
        name,
        projectLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.updateBuildParameterSpecification']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update type of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {Type} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterType(
      name: string,
      projectLocator: string,
      body?: Type,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Type>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameterType(
        name,
        projectLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.updateBuildParameterType']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameterValue(
      name: string,
      projectLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameterValue(
        name,
        projectLocator,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.updateBuildParameterValue']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuildParameters(
      projectLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildParameters(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.updateBuildParameters']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateFeature(
      featureLocator: string,
      projectLocator: string,
      fields?: string,
      body?: ProjectFeature,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeature(
        featureLocator,
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.updateFeature']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update all features.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeatures} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateFeatures(
      projectLocator: string,
      fields?: string,
      body?: ProjectFeatures,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeatures(
        projectLocator,
        fields,
        body,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProjectApi.updateFeatures']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProjectApiFp(configuration);
  return {
    /**
     *
     * @summary Assign the matching project to the agent pool.
     * @param {string} projectLocator
     * @param {AgentPool} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAgentPoolsProject(
      projectLocator: string,
      body?: AgentPool,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentPool> {
      return localVarFp
        .addAgentPoolsProject(projectLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a build configuration to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {NewBuildTypeDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBuildType(
      projectLocator: string,
      fields?: string,
      body?: NewBuildTypeDescription,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .addBuildType(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a feature.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeature(
      projectLocator: string,
      fields?: string,
      body?: ProjectFeature,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<object> {
      return localVarFp
        .addFeature(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new project.
     * @param {NewProjectDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProject(
      body?: NewProjectDescription,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Project> {
      return localVarFp.addProject(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSecureToken(
      projectLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .addSecureToken(projectLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a build configuration template to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {NewBuildTypeDescription} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTemplate(
      projectLocator: string,
      fields?: string,
      body?: NewBuildTypeDescription,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .addTemplate(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a build parameter.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuildParameter(
      projectLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .createBuildParameter(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameter(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteBuildParameter(name, projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete all build parameters.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildParameters(
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteBuildParameters(projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeature(
      featureLocator: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteFeature(featureLocator, projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete project matching the locator.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(projectLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteProject(projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get agent pools appointed to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPoolsProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentPools> {
      return localVarFp
        .getAgentPoolsProject(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all branches of the matching project.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBranches(
      projectLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Branches> {
      return localVarFp
        .getAllBranches(projectLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all build configurations from the matching project, with custom ordering applied.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBuildTypesOrdered(
      projectLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildTypes> {
      return localVarFp
        .getAllBuildTypesOrdered(projectLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all projects.
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProjects(
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Projects> {
      return localVarFp
        .getAllProjects(locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all subprojects of the matching project, with custom ordering applied.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSubprojectsOrdered(
      projectLocator: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Projects> {
      return localVarFp
        .getAllSubprojectsOrdered(projectLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameter(
      name: string,
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .getBuildParameter(name, projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameter specification.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterSpecification(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildParameterSpecification(name, projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get type of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterType(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Type> {
      return localVarFp
        .getBuildParameterType(name, projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get value of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameterValue(
      name: string,
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getBuildParameterValue(name, projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get build parameters.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildParameters(
      projectLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .getBuildParameters(projectLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the default template of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultTemplate(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .getDefaultTemplate(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getDefaultValueSets
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultValueSets(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<TypedValueSets> {
      return localVarFp
        .getDefaultValueSets(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getDeploymentDashboardInProject
     * @param {string} projectLocator
     * @param {string} dashboardLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeploymentDashboardInProject(
      projectLocator: string,
      dashboardLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentDashboard> {
      return localVarFp
        .getDeploymentDashboardInProject(projectLocator, dashboardLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getDeploymentDashboardsInProjet
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeploymentDashboardsInProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeploymentDashboards> {
      return localVarFp
        .getDeploymentDashboardsInProject(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeature(
      featureLocator: string,
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<object> {
      return localVarFp
        .getFeature(featureLocator, projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all features.
     * @param {string} projectLocator
     * @param {string} [locator]
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatures(
      projectLocator: string,
      locator?: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<object> {
      return localVarFp
        .getFeatures(projectLocator, locator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get project matching the locator.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Project> {
      return localVarFp
        .getProject(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a field of the matching project.
     * @param {string} projectLocator
     * @param {string} field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectField(
      projectLocator: string,
      field: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getProjectField(projectLocator, field, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the parent project of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectParentProject(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Project> {
      return localVarFp
        .getProjectParentProject(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the settings file of the matching build configuration.
     * @param {string} projectLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSettingsFile(
      projectLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getProjectSettingsFile(projectLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all templates of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTemplates(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildTypes> {
      return localVarFp
        .getProjectTemplates(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).
     * @param {string} projectLocator
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSecureValue(
      projectLocator: string,
      token: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .getSecureValue(projectLocator, token, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove the default template from the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDefaultTemplate(
      projectLocator: string,
      fields?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeDefaultTemplate(projectLocator, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unassign a project from the matching agent pool.
     * @param {string} projectLocator
     * @param {string} agentPoolLocator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectFromAgentPool(
      projectLocator: string,
      agentPoolLocator: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeProjectFromAgentPool(projectLocator, agentPoolLocator, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update agent pools apppointed to the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {AgentPools} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAgentPoolsProject(
      projectLocator: string,
      fields?: string,
      body?: AgentPools,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AgentPools> {
      return localVarFp
        .setAgentPoolsProject(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update custom ordering of build configurations of the matching project.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {BuildTypes} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setBuildTypesOrder(
      projectLocator: string,
      field?: string,
      body?: BuildTypes,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildTypes> {
      return localVarFp
        .setBuildTypesOrder(projectLocator, field, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the default template of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {BuildType} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultTemplate(
      projectLocator: string,
      fields?: string,
      body?: BuildType,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BuildType> {
      return localVarFp
        .setDefaultTemplate(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the parent project of the matching project.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Project} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setParentProject(
      projectLocator: string,
      fields?: string,
      body?: Project,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Project> {
      return localVarFp
        .setParentProject(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a field of the matching project.
     * @param {string} projectLocator
     * @param {string} field
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setProjectField(
      projectLocator: string,
      field: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .setProjectField(projectLocator, field, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update custom ordering of subprojects of the matching project.
     * @param {string} projectLocator
     * @param {string} [field]
     * @param {Projects} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSubprojectsOrder(
      projectLocator: string,
      field?: string,
      body?: Projects,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Projects> {
      return localVarFp
        .setSubprojectsOrder(projectLocator, field, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Property} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameter(
      name: string,
      projectLocator: string,
      fields?: string,
      body?: Property,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Property> {
      return localVarFp
        .updateBuildParameter(name, projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameter specification.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterSpecification(
      name: string,
      projectLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .updateBuildParameterSpecification(name, projectLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update type of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {Type} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterType(
      name: string,
      projectLocator: string,
      body?: Type,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Type> {
      return localVarFp
        .updateBuildParameterType(name, projectLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update value of build parameter.
     * @param {string} name
     * @param {string} projectLocator
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameterValue(
      name: string,
      projectLocator: string,
      body?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .updateBuildParameterValue(name, projectLocator, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update build parameters.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {Properties} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuildParameters(
      projectLocator: string,
      fields?: string,
      body?: Properties,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Properties> {
      return localVarFp
        .updateBuildParameters(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a matching feature.
     * @param {string} featureLocator
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeature} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeature(
      featureLocator: string,
      projectLocator: string,
      fields?: string,
      body?: ProjectFeature,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<object> {
      return localVarFp
        .updateFeature(featureLocator, projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update all features.
     * @param {string} projectLocator
     * @param {string} [fields]
     * @param {ProjectFeatures} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeatures(
      projectLocator: string,
      fields?: string,
      body?: ProjectFeatures,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<object> {
      return localVarFp
        .updateFeatures(projectLocator, fields, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectApi - interface
 * @export
 * @interface ProjectApi
 */
export interface ProjectApiInterface {
  /**
   *
   * @summary Assign the matching project to the agent pool.
   * @param {string} projectLocator
   * @param {AgentPool} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  addAgentPoolsProject(
    projectLocator: string,
    body?: AgentPool,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentPool>;

  /**
   *
   * @summary Add a build configuration to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {NewBuildTypeDescription} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  addBuildType(
    projectLocator: string,
    fields?: string,
    body?: NewBuildTypeDescription,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary Add a feature.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {ProjectFeature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  addFeature(
    projectLocator: string,
    fields?: string,
    body?: ProjectFeature,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<object>;

  /**
   *
   * @summary Create a new project.
   * @param {NewProjectDescription} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  addProject(body?: NewProjectDescription, options?: RawAxiosRequestConfig): AxiosPromise<Project>;

  /**
   *
   * @summary Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).
   * @param {string} projectLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  addSecureToken(
    projectLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Add a build configuration template to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {NewBuildTypeDescription} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  addTemplate(
    projectLocator: string,
    fields?: string,
    body?: NewBuildTypeDescription,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary Create a build parameter.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  createBuildParameter(
    projectLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Delete build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  deleteBuildParameter(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete all build parameters.
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  deleteBuildParameters(
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete a matching feature.
   * @param {string} featureLocator
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  deleteFeature(
    featureLocator: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Delete project matching the locator.
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  deleteProject(projectLocator: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary Get agent pools appointed to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getAgentPoolsProject(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentPools>;

  /**
   *
   * @summary Get all branches of the matching project.
   * @param {string} projectLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getAllBranches(
    projectLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Branches>;

  /**
   *
   * @summary Get all build configurations from the matching project, with custom ordering applied.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getAllBuildTypesOrdered(
    projectLocator: string,
    field?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildTypes>;

  /**
   *
   * @summary Get all projects.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getAllProjects(
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Projects>;

  /**
   *
   * @summary Get all subprojects of the matching project, with custom ordering applied.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getAllSubprojectsOrdered(
    projectLocator: string,
    field?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Projects>;

  /**
   *
   * @summary Get build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getBuildParameter(
    name: string,
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Get build parameter specification.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getBuildParameterSpecification(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get type of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getBuildParameterType(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Type>;

  /**
   *
   * @summary Get value of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getBuildParameterValue(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get build parameters.
   * @param {string} projectLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getBuildParameters(
    projectLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Get the default template of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getDefaultTemplate(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary getDefaultValueSets
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getDefaultValueSets(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<TypedValueSets>;

  /**
   *
   * @summary getDeploymentDashboardInProject
   * @param {string} projectLocator
   * @param {string} dashboardLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getDeploymentDashboardInProject(
    projectLocator: string,
    dashboardLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentDashboard>;

  /**
   *
   * @summary getDeploymentDashboardsInProjet
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getDeploymentDashboardsInProject(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DeploymentDashboards>;

  /**
   *
   * @summary Get a matching feature.
   * @param {string} featureLocator
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getFeature(
    featureLocator: string,
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<object>;

  /**
   *
   * @summary Get all features.
   * @param {string} projectLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getFeatures(
    projectLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<object>;

  /**
   *
   * @summary Get project matching the locator.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getProject(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Project>;

  /**
   *
   * @summary Get a field of the matching project.
   * @param {string} projectLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getProjectField(
    projectLocator: string,
    field: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get the parent project of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getProjectParentProject(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Project>;

  /**
   *
   * @summary Get the settings file of the matching build configuration.
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getProjectSettingsFile(
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Get all templates of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getProjectTemplates(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildTypes>;

  /**
   *
   * @summary Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).
   * @param {string} projectLocator
   * @param {string} token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  getSecureValue(
    projectLocator: string,
    token: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Remove the default template from the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  removeDefaultTemplate(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Unassign a project from the matching agent pool.
   * @param {string} projectLocator
   * @param {string} agentPoolLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  removeProjectFromAgentPool(
    projectLocator: string,
    agentPoolLocator: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @summary Update agent pools apppointed to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {AgentPools} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  setAgentPoolsProject(
    projectLocator: string,
    fields?: string,
    body?: AgentPools,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AgentPools>;

  /**
   *
   * @summary Update custom ordering of build configurations of the matching project.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {BuildTypes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  setBuildTypesOrder(
    projectLocator: string,
    field?: string,
    body?: BuildTypes,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildTypes>;

  /**
   *
   * @summary Update the default template of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {BuildType} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  setDefaultTemplate(
    projectLocator: string,
    fields?: string,
    body?: BuildType,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<BuildType>;

  /**
   *
   * @summary Update the parent project of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Project} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  setParentProject(
    projectLocator: string,
    fields?: string,
    body?: Project,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Project>;

  /**
   *
   * @summary Update a field of the matching project.
   * @param {string} projectLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  setProjectField(
    projectLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update custom ordering of subprojects of the matching project.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {Projects} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  setSubprojectsOrder(
    projectLocator: string,
    field?: string,
    body?: Projects,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Projects>;

  /**
   *
   * @summary Update build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  updateBuildParameter(
    name: string,
    projectLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Property>;

  /**
   *
   * @summary Update build parameter specification.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  updateBuildParameterSpecification(
    name: string,
    projectLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update type of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {Type} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  updateBuildParameterType(
    name: string,
    projectLocator: string,
    body?: Type,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Type>;

  /**
   *
   * @summary Update value of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  updateBuildParameterValue(
    name: string,
    projectLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<string>;

  /**
   *
   * @summary Update build parameters.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  updateBuildParameters(
    projectLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Properties>;

  /**
   *
   * @summary Update a matching feature.
   * @param {string} featureLocator
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {ProjectFeature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  updateFeature(
    featureLocator: string,
    projectLocator: string,
    fields?: string,
    body?: ProjectFeature,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<object>;

  /**
   *
   * @summary Update all features.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {ProjectFeatures} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApiInterface
   */
  updateFeatures(
    projectLocator: string,
    fields?: string,
    body?: ProjectFeatures,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<object>;
}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI implements ProjectApiInterface {
  /**
   *
   * @summary Assign the matching project to the agent pool.
   * @param {string} projectLocator
   * @param {AgentPool} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public addAgentPoolsProject(
    projectLocator: string,
    body?: AgentPool,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .addAgentPoolsProject(projectLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a build configuration to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {NewBuildTypeDescription} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public addBuildType(
    projectLocator: string,
    fields?: string,
    body?: NewBuildTypeDescription,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .addBuildType(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a feature.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {ProjectFeature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public addFeature(
    projectLocator: string,
    fields?: string,
    body?: ProjectFeature,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .addFeature(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new project.
   * @param {NewProjectDescription} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public addProject(body?: NewProjectDescription, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .addProject(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).
   * @param {string} projectLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public addSecureToken(projectLocator: string, body?: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .addSecureToken(projectLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a build configuration template to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {NewBuildTypeDescription} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public addTemplate(
    projectLocator: string,
    fields?: string,
    body?: NewBuildTypeDescription,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .addTemplate(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a build parameter.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public createBuildParameter(
    projectLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .createBuildParameter(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public deleteBuildParameter(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .deleteBuildParameter(name, projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete all build parameters.
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public deleteBuildParameters(projectLocator: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .deleteBuildParameters(projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a matching feature.
   * @param {string} featureLocator
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public deleteFeature(
    featureLocator: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .deleteFeature(featureLocator, projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete project matching the locator.
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public deleteProject(projectLocator: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .deleteProject(projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get agent pools appointed to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getAgentPoolsProject(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getAgentPoolsProject(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all branches of the matching project.
   * @param {string} projectLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getAllBranches(
    projectLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getAllBranches(projectLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all build configurations from the matching project, with custom ordering applied.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getAllBuildTypesOrdered(
    projectLocator: string,
    field?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getAllBuildTypesOrdered(projectLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all projects.
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getAllProjects(locator?: string, fields?: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .getAllProjects(locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all subprojects of the matching project, with custom ordering applied.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getAllSubprojectsOrdered(
    projectLocator: string,
    field?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getAllSubprojectsOrdered(projectLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getBuildParameter(
    name: string,
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getBuildParameter(name, projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameter specification.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getBuildParameterSpecification(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getBuildParameterSpecification(name, projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get type of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getBuildParameterType(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getBuildParameterType(name, projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get value of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getBuildParameterValue(
    name: string,
    projectLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getBuildParameterValue(name, projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get build parameters.
   * @param {string} projectLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getBuildParameters(
    projectLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getBuildParameters(projectLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the default template of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getDefaultTemplate(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getDefaultTemplate(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getDefaultValueSets
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getDefaultValueSets(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getDefaultValueSets(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getDeploymentDashboardInProject
   * @param {string} projectLocator
   * @param {string} dashboardLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getDeploymentDashboardInProject(
    projectLocator: string,
    dashboardLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getDeploymentDashboardInProject(projectLocator, dashboardLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getDeploymentDashboardsInProjet
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getDeploymentDashboardsInProject(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getDeploymentDashboardsInProject(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a matching feature.
   * @param {string} featureLocator
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getFeature(
    featureLocator: string,
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getFeature(featureLocator, projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all features.
   * @param {string} projectLocator
   * @param {string} [locator]
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getFeatures(
    projectLocator: string,
    locator?: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getFeatures(projectLocator, locator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get project matching the locator.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getProject(projectLocator: string, fields?: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .getProject(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a field of the matching project.
   * @param {string} projectLocator
   * @param {string} field
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getProjectField(projectLocator: string, field: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .getProjectField(projectLocator, field, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the parent project of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getProjectParentProject(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getProjectParentProject(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the settings file of the matching build configuration.
   * @param {string} projectLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getProjectSettingsFile(projectLocator: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .getProjectSettingsFile(projectLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all templates of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getProjectTemplates(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .getProjectTemplates(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).
   * @param {string} projectLocator
   * @param {string} token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getSecureValue(projectLocator: string, token: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .getSecureValue(projectLocator, token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove the default template from the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public removeDefaultTemplate(
    projectLocator: string,
    fields?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .removeDefaultTemplate(projectLocator, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unassign a project from the matching agent pool.
   * @param {string} projectLocator
   * @param {string} agentPoolLocator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public removeProjectFromAgentPool(
    projectLocator: string,
    agentPoolLocator: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .removeProjectFromAgentPool(projectLocator, agentPoolLocator, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update agent pools apppointed to the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {AgentPools} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public setAgentPoolsProject(
    projectLocator: string,
    fields?: string,
    body?: AgentPools,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .setAgentPoolsProject(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update custom ordering of build configurations of the matching project.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {BuildTypes} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public setBuildTypesOrder(
    projectLocator: string,
    field?: string,
    body?: BuildTypes,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .setBuildTypesOrder(projectLocator, field, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the default template of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {BuildType} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public setDefaultTemplate(
    projectLocator: string,
    fields?: string,
    body?: BuildType,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .setDefaultTemplate(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the parent project of the matching project.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Project} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public setParentProject(
    projectLocator: string,
    fields?: string,
    body?: Project,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .setParentProject(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a field of the matching project.
   * @param {string} projectLocator
   * @param {string} field
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public setProjectField(
    projectLocator: string,
    field: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .setProjectField(projectLocator, field, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update custom ordering of subprojects of the matching project.
   * @param {string} projectLocator
   * @param {string} [field]
   * @param {Projects} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public setSubprojectsOrder(
    projectLocator: string,
    field?: string,
    body?: Projects,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .setSubprojectsOrder(projectLocator, field, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Property} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public updateBuildParameter(
    name: string,
    projectLocator: string,
    fields?: string,
    body?: Property,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .updateBuildParameter(name, projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameter specification.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public updateBuildParameterSpecification(
    name: string,
    projectLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .updateBuildParameterSpecification(name, projectLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update type of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {Type} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public updateBuildParameterType(
    name: string,
    projectLocator: string,
    body?: Type,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .updateBuildParameterType(name, projectLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update value of build parameter.
   * @param {string} name
   * @param {string} projectLocator
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public updateBuildParameterValue(
    name: string,
    projectLocator: string,
    body?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .updateBuildParameterValue(name, projectLocator, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update build parameters.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {Properties} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public updateBuildParameters(
    projectLocator: string,
    fields?: string,
    body?: Properties,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .updateBuildParameters(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a matching feature.
   * @param {string} featureLocator
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {ProjectFeature} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public updateFeature(
    featureLocator: string,
    projectLocator: string,
    fields?: string,
    body?: ProjectFeature,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .updateFeature(featureLocator, projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update all features.
   * @param {string} projectLocator
   * @param {string} [fields]
   * @param {ProjectFeatures} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public updateFeatures(
    projectLocator: string,
    fields?: string,
    body?: ProjectFeatures,
    options?: RawAxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .updateFeatures(projectLocator, fields, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
